
IR_resiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800a404  0800a404  0001a404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a470  0800a470  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800a470  0800a470  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a470  0800a470  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a470  0800a470  0001a470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a474  0800a474  0001a474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001660  20000184  0800a5fc  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017e4  0800a5fc  000217e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001775d  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034f9  00000000  00000000  0003790a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  0003ae08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f40  00000000  00000000  0003bee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ac97  00000000  00000000  0003ce20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011215  00000000  00000000  00057ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d17d  00000000  00000000  00068ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5e49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046d0  00000000  00000000  000f5ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a3ec 	.word	0x0800a3ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	0800a3ec 	.word	0x0800a3ec

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a44:	f1a2 0201 	sub.w	r2, r2, #1
 8000a48:	d1ed      	bne.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_f2uiz>:
 8000f30:	0042      	lsls	r2, r0, #1
 8000f32:	d20e      	bcs.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f38:	d30b      	bcc.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f42:	d409      	bmi.n	8000f58 <__aeabi_f2uiz+0x28>
 8000f44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f50:	4770      	bx	lr
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	4770      	bx	lr
 8000f58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f5c:	d101      	bne.n	8000f62 <__aeabi_f2uiz+0x32>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	d102      	bne.n	8000f68 <__aeabi_f2uiz+0x38>
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295
 8000f66:	4770      	bx	lr
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <protocolInit>:
		NoACK = GPIO_PIN_RESET;


// functions

void protocolInit( GPIO_PinState repeat ){
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	resive_protocol = GPIO_PIN_RESET;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <protocolInit+0x38>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
	wait = GPIO_PIN_RESET;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <protocolInit+0x3c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
	waitTime = 0;
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <protocolInit+0x40>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	801a      	strh	r2, [r3, #0]
	check = GPIO_PIN_RESET;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <protocolInit+0x44>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
	ACK = GPIO_PIN_SET;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <protocolInit+0x48>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
	repeat_m = repeat; // reset repeat
 8000f98:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <protocolInit+0x4c>)
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	7013      	strb	r3, [r2, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	2000045d 	.word	0x2000045d
 8000fac:	2000055f 	.word	0x2000055f
 8000fb0:	20000560 	.word	0x20000560
 8000fb4:	2000055e 	.word	0x2000055e
 8000fb8:	20000563 	.word	0x20000563
 8000fbc:	20000562 	.word	0x20000562

08000fc0 <ArmarPack>:

void ArmarPack(uint8_t* data, uint8_t command, uint8_t packLen){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	70bb      	strb	r3, [r7, #2]

	paquete[0] = START; // inicio
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <ArmarPack+0x7c>)
 8000fd2:	22ff      	movs	r2, #255	; 0xff
 8000fd4:	701a      	strb	r2, [r3, #0]
	paquete[1] = command; // comando
 8000fd6:	4a19      	ldr	r2, [pc, #100]	; (800103c <ArmarPack+0x7c>)
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	7053      	strb	r3, [r2, #1]
	paquete[2] = packLen; // tamaño 1
 8000fdc:	4a17      	ldr	r2, [pc, #92]	; (800103c <ArmarPack+0x7c>)
 8000fde:	78bb      	ldrb	r3, [r7, #2]
 8000fe0:	7093      	strb	r3, [r2, #2]
	for(i = 0; i < packLen; i++){
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <ArmarPack+0x80>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e010      	b.n	800100c <ArmarPack+0x4c>
		paquete[i + 3] = data[i]; // data
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <ArmarPack+0x80>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	441a      	add	r2, r3
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <ArmarPack+0x80>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	7811      	ldrb	r1, [r2, #0]
 8000ffc:	4a0f      	ldr	r2, [pc, #60]	; (800103c <ArmarPack+0x7c>)
 8000ffe:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < packLen; i++){
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <ArmarPack+0x80>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <ArmarPack+0x80>)
 800100a:	701a      	strb	r2, [r3, #0]
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <ArmarPack+0x80>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	78ba      	ldrb	r2, [r7, #2]
 8001012:	429a      	cmp	r2, r3
 8001014:	d8e9      	bhi.n	8000fea <ArmarPack+0x2a>
	}
	XORData(&paquete);
 8001016:	4809      	ldr	r0, [pc, #36]	; (800103c <ArmarPack+0x7c>)
 8001018:	f000 f816 	bl	8001048 <XORData>
	paquete[packLen + 3] = sum;
 800101c:	78bb      	ldrb	r3, [r7, #2]
 800101e:	3303      	adds	r3, #3
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <ArmarPack+0x84>)
 8001022:	7811      	ldrb	r1, [r2, #0]
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <ArmarPack+0x7c>)
 8001026:	54d1      	strb	r1, [r2, r3]
	paquete[packLen + 4] = END; // final
 8001028:	78bb      	ldrb	r3, [r7, #2]
 800102a:	3304      	adds	r3, #4
 800102c:	4a03      	ldr	r2, [pc, #12]	; (800103c <ArmarPack+0x7c>)
 800102e:	21fe      	movs	r1, #254	; 0xfe
 8001030:	54d1      	strb	r1, [r2, r3]
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200004e0 	.word	0x200004e0
 8001040:	2000055d 	.word	0x2000055d
 8001044:	200001a0 	.word	0x200001a0

08001048 <XORData>:

void XORData(uint8_t* data){
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	sum = data[1];
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	785a      	ldrb	r2, [r3, #1]
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <XORData+0x58>)
 8001056:	701a      	strb	r2, [r3, #0]
	for (i = 2; i < (data[2] + 3); i++){
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <XORData+0x5c>)
 800105a:	2202      	movs	r2, #2
 800105c:	701a      	strb	r2, [r3, #0]
 800105e:	e011      	b.n	8001084 <XORData+0x3c>
		sum ^= data[i];
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <XORData+0x5c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <XORData+0x58>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4053      	eors	r3, r2
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <XORData+0x58>)
 8001076:	701a      	strb	r2, [r3, #0]
	for (i = 2; i < (data[2] + 3); i++){
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <XORData+0x5c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <XORData+0x5c>)
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <XORData+0x5c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3302      	adds	r3, #2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	3303      	adds	r3, #3
 8001092:	429a      	cmp	r2, r3
 8001094:	dbe4      	blt.n	8001060 <XORData+0x18>
	}
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	200001a0 	.word	0x200001a0
 80010a4:	2000055d 	.word	0x2000055d

080010a8 <AnalisePack>:

void AnalisePack( uint8_t *package , uint8_t *numData){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]

	sum = package[1];
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	785a      	ldrb	r2, [r3, #1]
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <AnalisePack+0xc8>)
 80010b8:	701a      	strb	r2, [r3, #0]
	for(i = 2; i < (package[2] + 3); i++){
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <AnalisePack+0xcc>)
 80010bc:	2202      	movs	r2, #2
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	e011      	b.n	80010e6 <AnalisePack+0x3e>
		sum ^= package[i];
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <AnalisePack+0xcc>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <AnalisePack+0xc8>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4053      	eors	r3, r2
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <AnalisePack+0xc8>)
 80010d8:	701a      	strb	r2, [r3, #0]
	for(i = 2; i < (package[2] + 3); i++){
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <AnalisePack+0xcc>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b24      	ldr	r3, [pc, #144]	; (8001174 <AnalisePack+0xcc>)
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <AnalisePack+0xcc>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3302      	adds	r3, #2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	3303      	adds	r3, #3
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbe4      	blt.n	80010c2 <AnalisePack+0x1a>
	}

	if(sum == package[package[2] + 3]){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3302      	adds	r3, #2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3303      	adds	r3, #3
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <AnalisePack+0xc8>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d125      	bne.n	800115a <AnalisePack+0xb2>

		if(package[1] == Ack){
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3301      	adds	r3, #1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b20      	cmp	r3, #32
 8001116:	d118      	bne.n	800114a <AnalisePack+0xa2>

			if(package[3] == 1){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3303      	adds	r3, #3
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d10c      	bne.n	800113c <AnalisePack+0x94>

				ACK = GPIO_PIN_SET;
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <AnalisePack+0xd0>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
				NoACK = GPIO_PIN_RESET;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <AnalisePack+0xd4>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
				*numData += 1;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	701a      	strb	r2, [r3, #0]
		}
	}else{
		SendACK(GPIO_PIN_RESET, &data_Ch);
		check = GPIO_PIN_RESET;
	}
}
 800113a:	e015      	b.n	8001168 <AnalisePack+0xc0>
				NoACK = GPIO_PIN_SET;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <AnalisePack+0xd4>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
				ACK = GPIO_PIN_RESET;
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <AnalisePack+0xd0>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
}
 8001148:	e00e      	b.n	8001168 <AnalisePack+0xc0>
			SendACK(GPIO_PIN_SET, &data_Ch);
 800114a:	490d      	ldr	r1, [pc, #52]	; (8001180 <AnalisePack+0xd8>)
 800114c:	2001      	movs	r0, #1
 800114e:	f000 f81b 	bl	8001188 <SendACK>
			check = GPIO_PIN_SET;
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <AnalisePack+0xdc>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
}
 8001158:	e006      	b.n	8001168 <AnalisePack+0xc0>
		SendACK(GPIO_PIN_RESET, &data_Ch);
 800115a:	4909      	ldr	r1, [pc, #36]	; (8001180 <AnalisePack+0xd8>)
 800115c:	2000      	movs	r0, #0
 800115e:	f000 f813 	bl	8001188 <SendACK>
		check = GPIO_PIN_RESET;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <AnalisePack+0xdc>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200001a0 	.word	0x200001a0
 8001174:	2000055d 	.word	0x2000055d
 8001178:	20000563 	.word	0x20000563
 800117c:	200001a1 	.word	0x200001a1
 8001180:	20000460 	.word	0x20000460
 8001184:	2000055e 	.word	0x2000055e

08001188 <SendACK>:

void SendACK( GPIO_PinState check, uint8_t *data ){
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
	if(check){
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d008      	beq.n	80011ac <SendACK+0x24>
		data[0] = 0x01;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
		ArmarPack( data, Ack , 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2120      	movs	r1, #32
 80011a4:	6838      	ldr	r0, [r7, #0]
 80011a6:	f7ff ff0b 	bl	8000fc0 <ArmarPack>
 80011aa:	e007      	b.n	80011bc <SendACK+0x34>
	}else{
		data[0] = 0x00;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
		ArmarPack( data, Ack , 1);
 80011b2:	2201      	movs	r2, #1
 80011b4:	2120      	movs	r1, #32
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f7ff ff02 	bl	8000fc0 <ArmarPack>
	}
	CDC_Transmit_FS(paquete, 6);
 80011bc:	2106      	movs	r1, #6
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <SendACK+0x44>)
 80011c0:	f008 fcfe 	bl	8009bc0 <CDC_Transmit_FS>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200004e0 	.word	0x200004e0

080011d0 <communication>:
 * enviar data
 */


void communication( uint8_t *package, GPIO_PinState *rxData,
		            uint8_t *data, uint8_t *_commd, uint8_t *_len, uint8_t *numData){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	603b      	str	r3, [r7, #0]

	if( *rxData ){
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d013      	beq.n	800120e <communication+0x3e>
		*rxData = GPIO_PIN_RESET;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
		if(package[0] == START && (package[package[2] + 4]) == END){
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2bff      	cmp	r3, #255	; 0xff
 80011f2:	d10c      	bne.n	800120e <communication+0x3e>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3302      	adds	r3, #2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	3304      	adds	r3, #4
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2bfe      	cmp	r3, #254	; 0xfe
 8001204:	d103      	bne.n	800120e <communication+0x3e>
			AnalisePack(package, numData);
 8001206:	69f9      	ldr	r1, [r7, #28]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff4d 	bl	80010a8 <AnalisePack>
		}
	}

	if( waitTime == 1 && repeat_m){
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <communication+0xb8>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d109      	bne.n	800122a <communication+0x5a>
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <communication+0xbc>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <communication+0x5a>
		NoACK = GPIO_PIN_SET;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <communication+0xc0>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
		waitTime = 0;
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <communication+0xb8>)
 8001226:	2200      	movs	r2, #0
 8001228:	801a      	strh	r2, [r3, #0]
	}

	if(ACK){
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <communication+0xc4>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00d      	beq.n	800124e <communication+0x7e>
		//memcpy( _data_protocol_save, data , (*_len));
		wait = GPIO_PIN_RESET;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <communication+0xc8>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
		waitTime = 0;
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <communication+0xb8>)
 800123a:	2200      	movs	r2, #0
 800123c:	801a      	strh	r2, [r3, #0]
		ArmarPack(data, *_commd, *_len);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	7819      	ldrb	r1, [r3, #0]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff feb9 	bl	8000fc0 <ArmarPack>
	}

	if(ACK || NoACK){
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <communication+0xc4>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d104      	bne.n	8001260 <communication+0x90>
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <communication+0xc0>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00f      	beq.n	8001280 <communication+0xb0>
		CDC_Transmit_FS(paquete, (paquete[2]) + 5);
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <communication+0xcc>)
 8001262:	789b      	ldrb	r3, [r3, #2]
 8001264:	3305      	adds	r3, #5
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <communication+0xcc>)
 800126a:	f008 fca9 	bl	8009bc0 <CDC_Transmit_FS>
		ACK = GPIO_PIN_RESET;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <communication+0xc4>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
		NoACK = GPIO_PIN_RESET;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <communication+0xc0>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
		wait = GPIO_PIN_SET;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <communication+0xc8>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
	}

}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000560 	.word	0x20000560
 800128c:	20000562 	.word	0x20000562
 8001290:	200001a1 	.word	0x200001a1
 8001294:	20000563 	.word	0x20000563
 8001298:	2000055f 	.word	0x2000055f
 800129c:	200004e0 	.word	0x200004e0

080012a0 <InitResiver>:

uint8_t count = 0, value = 0, adress = 0;


void InitResiver (GPIO_TypeDef* recvpinport, uint16_t recvpin)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]

	params.recvpinport = recvpinport;
 80012ac:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <InitResiver+0x4c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6093      	str	r3, [r2, #8]
	params.recvpin = recvpin;
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <InitResiver+0x4c>)
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	8053      	strh	r3, [r2, #2]
	params.rcvstate = IR_STATE_IDLE;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <InitResiver+0x4c>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	701a      	strb	r2, [r3, #0]
	params.rawlen = 0;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <InitResiver+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	711a      	strb	r2, [r3, #4]
	params.timer = 0;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <InitResiver+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
	resive = GPIO_PIN_RESET;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <InitResiver+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
	numero_selec_flag = GPIO_PIN_RESET;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <InitResiver+0x54>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
	numero_seleccionado = 0;
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <InitResiver+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
	numero_temp = 0;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <InitResiver+0x5c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000564 	.word	0x20000564
 80012f0:	20000669 	.word	0x20000669
 80012f4:	2000066a 	.word	0x2000066a
 80012f8:	2000065c 	.word	0x2000065c
 80012fc:	20000664 	.word	0x20000664

08001300 <reciveData>:


void reciveData(){
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

	uint8_t irdata = (uint8_t) HAL_GPIO_ReadPin(params.recvpinport, params.recvpin);
 8001306:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <reciveData+0x180>)
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <reciveData+0x180>)
 800130c:	885b      	ldrh	r3, [r3, #2]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4619      	mov	r1, r3
 8001312:	4610      	mov	r0, r2
 8001314:	f001 ff40 	bl	8003198 <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]

	params.timer++;
 800131c:	4b58      	ldr	r3, [pc, #352]	; (8001480 <reciveData+0x180>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	3301      	adds	r3, #1
 8001322:	4a57      	ldr	r2, [pc, #348]	; (8001480 <reciveData+0x180>)
 8001324:	60d3      	str	r3, [r2, #12]

	if (params.rawlen >= IR_MAXBUFF) params.rcvstate = IR_STATE_OVERFLOW ;
 8001326:	4b56      	ldr	r3, [pc, #344]	; (8001480 <reciveData+0x180>)
 8001328:	791b      	ldrb	r3, [r3, #4]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b64      	cmp	r3, #100	; 0x64
 800132e:	d902      	bls.n	8001336 <reciveData+0x36>
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <reciveData+0x180>)
 8001332:	2206      	movs	r2, #6
 8001334:	701a      	strb	r2, [r3, #0]

	switch(params.rcvstate)
 8001336:	4b52      	ldr	r3, [pc, #328]	; (8001480 <reciveData+0x180>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	3b02      	subs	r3, #2
 800133e:	2b03      	cmp	r3, #3
 8001340:	d872      	bhi.n	8001428 <reciveData+0x128>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <reciveData+0x48>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	08001359 	.word	0x08001359
 800134c:	08001397 	.word	0x08001397
 8001350:	080013cf 	.word	0x080013cf
 8001354:	0800140d 	.word	0x0800140d
	{
		case IR_STATE_IDLE:
			if (irdata == IR_MARK)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d15d      	bne.n	800141a <reciveData+0x11a>
			{

				if (params.timer < 26)
 800135e:	4b48      	ldr	r3, [pc, #288]	; (8001480 <reciveData+0x180>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b19      	cmp	r3, #25
 8001364:	d803      	bhi.n	800136e <reciveData+0x6e>
				{
					params.timer = 0;
 8001366:	4b46      	ldr	r3, [pc, #280]	; (8001480 <reciveData+0x180>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
					Compress[0]                      = 0;
					Compress[1]                      = 0xaa;
				}
			}

			break;
 800136c:	e055      	b.n	800141a <reciveData+0x11a>
					params.overflow                  = 0;
 800136e:	4b44      	ldr	r3, [pc, #272]	; (8001480 <reciveData+0x180>)
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
					params.rawlen                    = 0;
 8001376:	4b42      	ldr	r3, [pc, #264]	; (8001480 <reciveData+0x180>)
 8001378:	2200      	movs	r2, #0
 800137a:	711a      	strb	r2, [r3, #4]
					params.timer                     = 0;
 800137c:	4b40      	ldr	r3, [pc, #256]	; (8001480 <reciveData+0x180>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
					params.rcvstate                  = IR_STATE_MARK;
 8001382:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <reciveData+0x180>)
 8001384:	2203      	movs	r2, #3
 8001386:	701a      	strb	r2, [r3, #0]
					Compress[0]                      = 0;
 8001388:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <reciveData+0x184>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
					Compress[1]                      = 0xaa;
 800138e:	4b3d      	ldr	r3, [pc, #244]	; (8001484 <reciveData+0x184>)
 8001390:	22aa      	movs	r2, #170	; 0xaa
 8001392:	705a      	strb	r2, [r3, #1]
			break;
 8001394:	e041      	b.n	800141a <reciveData+0x11a>

			//------------------------------------------------------------------------------

		case IR_STATE_MARK:

			if (irdata == IR_SPACE && params.timer != 0)
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d140      	bne.n	800141e <reciveData+0x11e>
 800139c:	4b38      	ldr	r3, [pc, #224]	; (8001480 <reciveData+0x180>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d03c      	beq.n	800141e <reciveData+0x11e>
			{
				params.rawbuf[params.rawlen++] = params.timer;
 80013a4:	4b36      	ldr	r3, [pc, #216]	; (8001480 <reciveData+0x180>)
 80013a6:	68d8      	ldr	r0, [r3, #12]
 80013a8:	4b35      	ldr	r3, [pc, #212]	; (8001480 <reciveData+0x180>)
 80013aa:	791b      	ldrb	r3, [r3, #4]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	b2d1      	uxtb	r1, r2
 80013b2:	4a33      	ldr	r2, [pc, #204]	; (8001480 <reciveData+0x180>)
 80013b4:	7111      	strb	r1, [r2, #4]
 80013b6:	4619      	mov	r1, r3
 80013b8:	b2c2      	uxtb	r2, r0
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <reciveData+0x180>)
 80013bc:	440b      	add	r3, r1
 80013be:	741a      	strb	r2, [r3, #16]
				params.timer                     = 0;
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <reciveData+0x180>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
				params.rcvstate                  = IR_STATE_SPACE;
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <reciveData+0x180>)
 80013c8:	2204      	movs	r2, #4
 80013ca:	701a      	strb	r2, [r3, #0]
			}
			break;
 80013cc:	e027      	b.n	800141e <reciveData+0x11e>
			//-------------------------------------------------------------------------------

		case IR_STATE_SPACE:

			if (irdata == IR_MARK && params.timer != 0)
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d111      	bne.n	80013f8 <reciveData+0xf8>
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <reciveData+0x180>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00d      	beq.n	80013f8 <reciveData+0xf8>
			{
				if( params.timer < 36){
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <reciveData+0x180>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b23      	cmp	r3, #35	; 0x23
 80013e2:	d806      	bhi.n	80013f2 <reciveData+0xf2>

					params.rcvstate                  = IR_STATE_MARK;
 80013e4:	4b26      	ldr	r3, [pc, #152]	; (8001480 <reciveData+0x180>)
 80013e6:	2203      	movs	r2, #3
 80013e8:	701a      	strb	r2, [r3, #0]
					params.timer                     = 0;
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <reciveData+0x180>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
				if( params.timer < 36){
 80013f0:	e00b      	b.n	800140a <reciveData+0x10a>

				}else{

					resume();
 80013f2:	f000 f84f 	bl	8001494 <resume>
				if( params.timer < 36){
 80013f6:	e008      	b.n	800140a <reciveData+0x10a>

				}
			}
			else if (params.timer > 700)
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <reciveData+0x180>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001400:	d90f      	bls.n	8001422 <reciveData+0x122>
			{

				params.rcvstate = IR_STATE_STOP;
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <reciveData+0x180>)
 8001404:	2205      	movs	r2, #5
 8001406:	701a      	strb	r2, [r3, #0]

			}
			break;
 8001408:	e00b      	b.n	8001422 <reciveData+0x122>
 800140a:	e00a      	b.n	8001422 <reciveData+0x122>

		//......................................................................
		case IR_STATE_STOP:  // stop read
			if (irdata == IR_MARK)  {
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d109      	bne.n	8001426 <reciveData+0x126>

				params.timer = 0 ;
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <reciveData+0x180>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
				/*
				CDC_Transmit_FS(params.rawbuf,params.rawlen);
				params.rcvstate = IR_STATE_IDLE;
				*/
			}
			break;
 8001418:	e005      	b.n	8001426 <reciveData+0x126>
			break;
 800141a:	bf00      	nop
 800141c:	e004      	b.n	8001428 <reciveData+0x128>
			break;
 800141e:	bf00      	nop
 8001420:	e002      	b.n	8001428 <reciveData+0x128>
			break;
 8001422:	bf00      	nop
 8001424:	e000      	b.n	8001428 <reciveData+0x128>
			break;
 8001426:	bf00      	nop
			break;
			*/
	}


	if(params.rcvstate == IR_STATE_MARK || params.rcvstate == IR_STATE_SPACE){
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <reciveData+0x180>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b03      	cmp	r3, #3
 8001430:	d004      	beq.n	800143c <reciveData+0x13c>
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <reciveData+0x180>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b04      	cmp	r3, #4
 800143a:	d112      	bne.n	8001462 <reciveData+0x162>
		if (irdata == IR_MARK) {
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <reciveData+0x150>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001448:	480f      	ldr	r0, [pc, #60]	; (8001488 <reciveData+0x188>)
 800144a:	f001 febc 	bl	80031c6 <HAL_GPIO_WritePin>
 800144e:	e008      	b.n	8001462 <reciveData+0x162>
		}
		else if((irdata == IR_SPACE)){
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d105      	bne.n	8001462 <reciveData+0x162>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); }
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800145c:	480a      	ldr	r0, [pc, #40]	; (8001488 <reciveData+0x188>)
 800145e:	f001 feb2 	bl	80031c6 <HAL_GPIO_WritePin>
	}

	if( params.rcvstate == IR_STATE_STOP ){
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <reciveData+0x180>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b05      	cmp	r3, #5
 800146a:	d105      	bne.n	8001478 <reciveData+0x178>

		decodeData(&irresults);
 800146c:	4807      	ldr	r0, [pc, #28]	; (800148c <reciveData+0x18c>)
 800146e:	f000 f81f 	bl	80014b0 <decodeData>
		resive = GPIO_PIN_SET;
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <reciveData+0x190>)
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]

	}
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000564 	.word	0x20000564
 8001484:	20000658 	.word	0x20000658
 8001488:	40010800 	.word	0x40010800
 800148c:	20000640 	.word	0x20000640
 8001490:	20000669 	.word	0x20000669

08001494 <resume>:

void resume ()
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
	params.rcvstate = IR_STATE_IDLE;
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <resume+0x18>)
 800149a:	2202      	movs	r2, #2
 800149c:	701a      	strb	r2, [r3, #0]
	params.rawlen = 0;
 800149e:	4b03      	ldr	r3, [pc, #12]	; (80014ac <resume+0x18>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	711a      	strb	r2, [r3, #4]

}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	20000564 	.word	0x20000564

080014b0 <decodeData>:


uint8_t decodeData(volatile ir_decode_results *record ){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]


	if ( !( (params.rawbuf[0]) <= 50 && (params.rawbuf[0]) >= 44  )){
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <decodeData+0x5c>)
 80014ba:	7c1b      	ldrb	r3, [r3, #16]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b32      	cmp	r3, #50	; 0x32
 80014c0:	d804      	bhi.n	80014cc <decodeData+0x1c>
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <decodeData+0x5c>)
 80014c4:	7c1b      	ldrb	r3, [r3, #16]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b2b      	cmp	r3, #43	; 0x2b
 80014ca:	d803      	bhi.n	80014d4 <decodeData+0x24>
		resume();
 80014cc:	f7ff ffe2 	bl	8001494 <resume>
		return 0 ;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e016      	b.n	8001502 <decodeData+0x52>
	}

	identify(&value,1,7);
 80014d4:	2207      	movs	r2, #7
 80014d6:	2101      	movs	r1, #1
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <decodeData+0x60>)
 80014da:	f000 f81f 	bl	800151c <identify>
	identify(&adress,7,12);
 80014de:	220c      	movs	r2, #12
 80014e0:	2107      	movs	r1, #7
 80014e2:	480c      	ldr	r0, [pc, #48]	; (8001514 <decodeData+0x64>)
 80014e4:	f000 f81a 	bl	800151c <identify>

	Compress[0] = value;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <decodeData+0x60>)
 80014ea:	781a      	ldrb	r2, [r3, #0]
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <decodeData+0x68>)
 80014ee:	701a      	strb	r2, [r3, #0]
	Compress[1] = adress;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <decodeData+0x64>)
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <decodeData+0x68>)
 80014f6:	705a      	strb	r2, [r3, #1]

	detectar_tecla();
 80014f8:	f000 f8ba 	bl	8001670 <detectar_tecla>

	resume();
 80014fc:	f7ff ffca 	bl	8001494 <resume>

	return 1;
 8001500:	2301      	movs	r3, #1

}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000564 	.word	0x20000564
 8001510:	200001a3 	.word	0x200001a3
 8001514:	200001a4 	.word	0x200001a4
 8001518:	20000658 	.word	0x20000658

0800151c <identify>:


uint8_t identify( uint8_t *save, uint8_t pos, uint8_t fin){
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
 8001528:	4613      	mov	r3, r2
 800152a:	70bb      	strb	r3, [r7, #2]

	for(count = pos; count <= fin; count ++){
 800152c:	4a24      	ldr	r2, [pc, #144]	; (80015c0 <identify+0xa4>)
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	7013      	strb	r3, [r2, #0]
 8001532:	e03a      	b.n	80015aa <identify+0x8e>

		if ( params.rawbuf[count] >= 20 && params.rawbuf[count] <= 28 ){
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <identify+0xa4>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <identify+0xa8>)
 800153c:	4413      	add	r3, r2
 800153e:	7c1b      	ldrb	r3, [r3, #16]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b13      	cmp	r3, #19
 8001544:	d913      	bls.n	800156e <identify+0x52>
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <identify+0xa4>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <identify+0xa8>)
 800154e:	4413      	add	r3, r2
 8001550:	7c1b      	ldrb	r3, [r3, #16]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b1c      	cmp	r3, #28
 8001556:	d80a      	bhi.n	800156e <identify+0x52>
			*save = (*save << 1) | 1;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b25b      	sxtb	r3, r3
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	b25b      	sxtb	r3, r3
 8001566:	b2da      	uxtb	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e017      	b.n	800159e <identify+0x82>
		}
		else if( params.rawbuf[count] >= 8 && params.rawbuf[count] <= 16 ){
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <identify+0xa4>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <identify+0xa8>)
 8001576:	4413      	add	r3, r2
 8001578:	7c1b      	ldrb	r3, [r3, #16]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b07      	cmp	r3, #7
 800157e:	d90e      	bls.n	800159e <identify+0x82>
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <identify+0xa4>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <identify+0xa8>)
 8001588:	4413      	add	r3, r2
 800158a:	7c1b      	ldrb	r3, [r3, #16]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b10      	cmp	r3, #16
 8001590:	d805      	bhi.n	800159e <identify+0x82>
			*save = (*save << 1) | 0;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	701a      	strb	r2, [r3, #0]
	for(count = pos; count <= fin; count ++){
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <identify+0xa4>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <identify+0xa4>)
 80015a8:	701a      	strb	r2, [r3, #0]
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <identify+0xa4>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	78ba      	ldrb	r2, [r7, #2]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d2bf      	bcs.n	8001534 <identify+0x18>
		}
	}

	return 1;
 80015b4:	2301      	movs	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	200001a2 	.word	0x200001a2
 80015c4:	20000564 	.word	0x20000564

080015c8 <leer_num>:

void leer_num(){
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0


		if(Compress[0] == 0x68 && Compress[1] == 0xcb && !numero_selec_flag){
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <leer_num+0x90>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b68      	cmp	r3, #104	; 0x68
 80015d2:	d112      	bne.n	80015fa <leer_num+0x32>
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <leer_num+0x90>)
 80015d6:	785b      	ldrb	r3, [r3, #1]
 80015d8:	2bcb      	cmp	r3, #203	; 0xcb
 80015da:	d10e      	bne.n	80015fa <leer_num+0x32>
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <leer_num+0x94>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10a      	bne.n	80015fa <leer_num+0x32>

			numero_temp              = numero_seleccionado;
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <leer_num+0x98>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <leer_num+0x9c>)
 80015ea:	6013      	str	r3, [r2, #0]
			numero_seleccionado      = 0;
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <leer_num+0x98>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
			numero_selec_flag        = GPIO_PIN_SET;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <leer_num+0x94>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e029      	b.n	800164e <leer_num+0x86>

		}
		else if(Compress[0] == 0x38 && Compress[1] == 0xcb)
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <leer_num+0x90>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b38      	cmp	r3, #56	; 0x38
 8001600:	d10c      	bne.n	800161c <leer_num+0x54>
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <leer_num+0x90>)
 8001604:	785b      	ldrb	r3, [r3, #1]
 8001606:	2bcb      	cmp	r3, #203	; 0xcb
 8001608:	d108      	bne.n	800161c <leer_num+0x54>
		{
			numero_seleccionado /= 10;
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <leer_num+0x98>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a16      	ldr	r2, [pc, #88]	; (8001668 <leer_num+0xa0>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <leer_num+0x98>)
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e018      	b.n	800164e <leer_num+0x86>
		}
		else if(tecla_actual < 10){
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <leer_num+0xa4>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b09      	cmp	r3, #9
 8001622:	d814      	bhi.n	800164e <leer_num+0x86>

			numero_selec_flag     = GPIO_PIN_RESET;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <leer_num+0x94>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
			numero_seleccionado   *= 10;
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <leer_num+0x98>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	461a      	mov	r2, r3
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <leer_num+0x98>)
 800163a:	601a      	str	r2, [r3, #0]
			numero_seleccionado   += tecla_actual;
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <leer_num+0xa4>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <leer_num+0x98>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a05      	ldr	r2, [pc, #20]	; (8001660 <leer_num+0x98>)
 800164a:	6013      	str	r3, [r2, #0]

		}
}
 800164c:	e7ff      	b.n	800164e <leer_num+0x86>
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000658 	.word	0x20000658
 800165c:	2000066a 	.word	0x2000066a
 8001660:	2000065c 	.word	0x2000065c
 8001664:	20000664 	.word	0x20000664
 8001668:	cccccccd 	.word	0xcccccccd
 800166c:	20000668 	.word	0x20000668

08001670 <detectar_tecla>:

void detectar_tecla(){
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
	 switch (Compress[1]) {
 8001674:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <detectar_tecla+0xb8>)
 8001676:	785b      	ldrb	r3, [r3, #1]
 8001678:	2bcb      	cmp	r3, #203	; 0xcb
 800167a:	d14c      	bne.n	8001716 <detectar_tecla+0xa6>
	    case 0xCB:
	        switch (Compress[0]) {
 800167c:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <detectar_tecla+0xb8>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b30      	cmp	r3, #48	; 0x30
 8001682:	d033      	beq.n	80016ec <detectar_tecla+0x7c>
 8001684:	2b30      	cmp	r3, #48	; 0x30
 8001686:	dc0b      	bgt.n	80016a0 <detectar_tecla+0x30>
 8001688:	2b08      	cmp	r3, #8
 800168a:	d037      	beq.n	80016fc <detectar_tecla+0x8c>
 800168c:	2b08      	cmp	r3, #8
 800168e:	dc02      	bgt.n	8001696 <detectar_tecla+0x26>
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <detectar_tecla+0x4c>
 8001694:	e03a      	b.n	800170c <detectar_tecla+0x9c>
 8001696:	2b10      	cmp	r3, #16
 8001698:	d020      	beq.n	80016dc <detectar_tecla+0x6c>
 800169a:	2b20      	cmp	r3, #32
 800169c:	d016      	beq.n	80016cc <detectar_tecla+0x5c>
 800169e:	e035      	b.n	800170c <detectar_tecla+0x9c>
 80016a0:	2b50      	cmp	r3, #80	; 0x50
 80016a2:	d01f      	beq.n	80016e4 <detectar_tecla+0x74>
 80016a4:	2b50      	cmp	r3, #80	; 0x50
 80016a6:	dc04      	bgt.n	80016b2 <detectar_tecla+0x42>
 80016a8:	2b40      	cmp	r3, #64	; 0x40
 80016aa:	d00b      	beq.n	80016c4 <detectar_tecla+0x54>
 80016ac:	2b48      	cmp	r3, #72	; 0x48
 80016ae:	d029      	beq.n	8001704 <detectar_tecla+0x94>
 80016b0:	e02c      	b.n	800170c <detectar_tecla+0x9c>
 80016b2:	2b60      	cmp	r3, #96	; 0x60
 80016b4:	d00e      	beq.n	80016d4 <detectar_tecla+0x64>
 80016b6:	2b70      	cmp	r3, #112	; 0x70
 80016b8:	d01c      	beq.n	80016f4 <detectar_tecla+0x84>
 80016ba:	e027      	b.n	800170c <detectar_tecla+0x9c>
	            case 0x00:
	                tecla_actual = 1;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <detectar_tecla+0xbc>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
	            break;
 80016c2:	e027      	b.n	8001714 <detectar_tecla+0xa4>
	            case 0x40:
	            	tecla_actual = 2;
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <detectar_tecla+0xbc>)
 80016c6:	2202      	movs	r2, #2
 80016c8:	701a      	strb	r2, [r3, #0]
	            break;
 80016ca:	e023      	b.n	8001714 <detectar_tecla+0xa4>
	            case 0x20:
	            	tecla_actual = 3;
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <detectar_tecla+0xbc>)
 80016ce:	2203      	movs	r2, #3
 80016d0:	701a      	strb	r2, [r3, #0]
	            break;
 80016d2:	e01f      	b.n	8001714 <detectar_tecla+0xa4>
	            case 0x60:
	            	tecla_actual = 4;
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <detectar_tecla+0xbc>)
 80016d6:	2204      	movs	r2, #4
 80016d8:	701a      	strb	r2, [r3, #0]
	            break;
 80016da:	e01b      	b.n	8001714 <detectar_tecla+0xa4>
	            case 0x10:
	            	tecla_actual = 5;
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <detectar_tecla+0xbc>)
 80016de:	2205      	movs	r2, #5
 80016e0:	701a      	strb	r2, [r3, #0]
	            break;
 80016e2:	e017      	b.n	8001714 <detectar_tecla+0xa4>
	            case 0x50:
	            	tecla_actual = 6;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <detectar_tecla+0xbc>)
 80016e6:	2206      	movs	r2, #6
 80016e8:	701a      	strb	r2, [r3, #0]
	            break;
 80016ea:	e013      	b.n	8001714 <detectar_tecla+0xa4>
	            case 0x30:
	            	tecla_actual = 7;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <detectar_tecla+0xbc>)
 80016ee:	2207      	movs	r2, #7
 80016f0:	701a      	strb	r2, [r3, #0]
	            break;
 80016f2:	e00f      	b.n	8001714 <detectar_tecla+0xa4>
	            case 0x70:
	            	tecla_actual = 8;
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <detectar_tecla+0xbc>)
 80016f6:	2208      	movs	r2, #8
 80016f8:	701a      	strb	r2, [r3, #0]
	            break;
 80016fa:	e00b      	b.n	8001714 <detectar_tecla+0xa4>
	            case 0x08:
	            	tecla_actual = 9;
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <detectar_tecla+0xbc>)
 80016fe:	2209      	movs	r2, #9
 8001700:	701a      	strb	r2, [r3, #0]
	            break;
 8001702:	e007      	b.n	8001714 <detectar_tecla+0xa4>
	            case 0x48:
	            	tecla_actual = 0;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <detectar_tecla+0xbc>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
	            break;
 800170a:	e003      	b.n	8001714 <detectar_tecla+0xa4>
	            default:
	            	tecla_actual = 10;
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <detectar_tecla+0xbc>)
 800170e:	220a      	movs	r2, #10
 8001710:	701a      	strb	r2, [r3, #0]
	            	break;
 8001712:	bf00      	nop
	        }
	        break;
 8001714:	e003      	b.n	800171e <detectar_tecla+0xae>
	     default:
	       tecla_actual = 10;
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <detectar_tecla+0xbc>)
 8001718:	220a      	movs	r2, #10
 800171a:	701a      	strb	r2, [r3, #0]
	       break;
 800171c:	bf00      	nop
	 }
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000658 	.word	0x20000658
 800172c:	20000668 	.word	0x20000668

08001730 <initPID_ch>:
#include "PID_ch.h"
#include <stdio.h>
#include <string.h>


void initPID_ch(){
 8001730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001734:	af00      	add	r7, sp, #0

	u=0.0,u_1=0.0;
 8001736:	4b99      	ldr	r3, [pc, #612]	; (800199c <initPID_ch+0x26c>)
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	4b98      	ldr	r3, [pc, #608]	; (80019a0 <initPID_ch+0x270>)
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

	r1=0.0;
 8001746:	4b97      	ldr	r3, [pc, #604]	; (80019a4 <initPID_ch+0x274>)
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	601a      	str	r2, [r3, #0]

	e=0.0;
 800174e:	4b96      	ldr	r3, [pc, #600]	; (80019a8 <initPID_ch+0x278>)
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
	e_1=0.0;
 8001756:	4b95      	ldr	r3, [pc, #596]	; (80019ac <initPID_ch+0x27c>)
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
	e_2=0.0;
 800175e:	4b94      	ldr	r3, [pc, #592]	; (80019b0 <initPID_ch+0x280>)
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	601a      	str	r2, [r3, #0]

	Ts = 1;
 8001766:	4b93      	ldr	r3, [pc, #588]	; (80019b4 <initPID_ch+0x284>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]

	k= 0 , tau=1500/16, theta= 150/16 + Ts/2 ;
 800176c:	4b92      	ldr	r3, [pc, #584]	; (80019b8 <initPID_ch+0x288>)
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	4b91      	ldr	r3, [pc, #580]	; (80019bc <initPID_ch+0x28c>)
 8001776:	4a92      	ldr	r2, [pc, #584]	; (80019c0 <initPID_ch+0x290>)
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	4b8e      	ldr	r3, [pc, #568]	; (80019b4 <initPID_ch+0x284>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	3309      	adds	r3, #9
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f9b9 	bl	8000afc <__aeabi_i2f>
 800178a:	4602      	mov	r2, r0
 800178c:	4b8d      	ldr	r3, [pc, #564]	; (80019c4 <initPID_ch+0x294>)
 800178e:	601a      	str	r2, [r3, #0]

	//*************************************************************************//
	//*****************   SINTONIA POR ZIEGLER y NICHOLS    *******************//
	//*************************************************************************//

	kp=(1.2*tau)/(k*theta);
 8001790:	4b8a      	ldr	r3, [pc, #552]	; (80019bc <initPID_ch+0x28c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fe3d 	bl	8000414 <__aeabi_f2d>
 800179a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800179e:	4b8a      	ldr	r3, [pc, #552]	; (80019c8 <initPID_ch+0x298>)
 80017a0:	f7fe fe90 	bl	80004c4 <__aeabi_dmul>
 80017a4:	4603      	mov	r3, r0
 80017a6:	460c      	mov	r4, r1
 80017a8:	4625      	mov	r5, r4
 80017aa:	461c      	mov	r4, r3
 80017ac:	4b82      	ldr	r3, [pc, #520]	; (80019b8 <initPID_ch+0x288>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b84      	ldr	r3, [pc, #528]	; (80019c4 <initPID_ch+0x294>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f7ff f9f4 	bl	8000ba4 <__aeabi_fmul>
 80017bc:	4603      	mov	r3, r0
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fe28 	bl	8000414 <__aeabi_f2d>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7fe ffa4 	bl	8000718 <__aeabi_ddiv>
 80017d0:	4603      	mov	r3, r0
 80017d2:	460c      	mov	r4, r1
 80017d4:	4618      	mov	r0, r3
 80017d6:	4621      	mov	r1, r4
 80017d8:	f7ff f886 	bl	80008e8 <__aeabi_d2f>
 80017dc:	4602      	mov	r2, r0
 80017de:	4b7b      	ldr	r3, [pc, #492]	; (80019cc <initPID_ch+0x29c>)
 80017e0:	601a      	str	r2, [r3, #0]
	ti=2.0*theta;
 80017e2:	4b78      	ldr	r3, [pc, #480]	; (80019c4 <initPID_ch+0x294>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4619      	mov	r1, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff f8d3 	bl	8000994 <__addsf3>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b77      	ldr	r3, [pc, #476]	; (80019d0 <initPID_ch+0x2a0>)
 80017f4:	601a      	str	r2, [r3, #0]
	td=0.5*theta;
 80017f6:	4b73      	ldr	r3, [pc, #460]	; (80019c4 <initPID_ch+0x294>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f9d0 	bl	8000ba4 <__aeabi_fmul>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4b72      	ldr	r3, [pc, #456]	; (80019d4 <initPID_ch+0x2a4>)
 800180a:	601a      	str	r2, [r3, #0]

	q0=kp*(1+Ts/(2.0*ti)+td/Ts);
 800180c:	4b6f      	ldr	r3, [pc, #444]	; (80019cc <initPID_ch+0x29c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fdff 	bl	8000414 <__aeabi_f2d>
 8001816:	4605      	mov	r5, r0
 8001818:	460e      	mov	r6, r1
 800181a:	4b66      	ldr	r3, [pc, #408]	; (80019b4 <initPID_ch+0x284>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fde6 	bl	80003f0 <__aeabi_i2d>
 8001824:	4680      	mov	r8, r0
 8001826:	4689      	mov	r9, r1
 8001828:	4b69      	ldr	r3, [pc, #420]	; (80019d0 <initPID_ch+0x2a0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fdf1 	bl	8000414 <__aeabi_f2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	f7fe fc8f 	bl	8000158 <__adddf3>
 800183a:	4603      	mov	r3, r0
 800183c:	460c      	mov	r4, r1
 800183e:	461a      	mov	r2, r3
 8001840:	4623      	mov	r3, r4
 8001842:	4640      	mov	r0, r8
 8001844:	4649      	mov	r1, r9
 8001846:	f7fe ff67 	bl	8000718 <__aeabi_ddiv>
 800184a:	4603      	mov	r3, r0
 800184c:	460c      	mov	r4, r1
 800184e:	4618      	mov	r0, r3
 8001850:	4621      	mov	r1, r4
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b60      	ldr	r3, [pc, #384]	; (80019d8 <initPID_ch+0x2a8>)
 8001858:	f7fe fc7e 	bl	8000158 <__adddf3>
 800185c:	4603      	mov	r3, r0
 800185e:	460c      	mov	r4, r1
 8001860:	4698      	mov	r8, r3
 8001862:	46a1      	mov	r9, r4
 8001864:	4b5b      	ldr	r3, [pc, #364]	; (80019d4 <initPID_ch+0x2a4>)
 8001866:	681c      	ldr	r4, [r3, #0]
 8001868:	4b52      	ldr	r3, [pc, #328]	; (80019b4 <initPID_ch+0x284>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff f945 	bl	8000afc <__aeabi_i2f>
 8001872:	4603      	mov	r3, r0
 8001874:	4619      	mov	r1, r3
 8001876:	4620      	mov	r0, r4
 8001878:	f7ff fa48 	bl	8000d0c <__aeabi_fdiv>
 800187c:	4603      	mov	r3, r0
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fdc8 	bl	8000414 <__aeabi_f2d>
 8001884:	4603      	mov	r3, r0
 8001886:	460c      	mov	r4, r1
 8001888:	461a      	mov	r2, r3
 800188a:	4623      	mov	r3, r4
 800188c:	4640      	mov	r0, r8
 800188e:	4649      	mov	r1, r9
 8001890:	f7fe fc62 	bl	8000158 <__adddf3>
 8001894:	4603      	mov	r3, r0
 8001896:	460c      	mov	r4, r1
 8001898:	461a      	mov	r2, r3
 800189a:	4623      	mov	r3, r4
 800189c:	4628      	mov	r0, r5
 800189e:	4631      	mov	r1, r6
 80018a0:	f7fe fe10 	bl	80004c4 <__aeabi_dmul>
 80018a4:	4603      	mov	r3, r0
 80018a6:	460c      	mov	r4, r1
 80018a8:	4618      	mov	r0, r3
 80018aa:	4621      	mov	r1, r4
 80018ac:	f7ff f81c 	bl	80008e8 <__aeabi_d2f>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <initPID_ch+0x2ac>)
 80018b4:	601a      	str	r2, [r3, #0]
	q1=-kp*(1-Ts/(2.0*ti)+(2.0*td)/Ts);
 80018b6:	4b45      	ldr	r3, [pc, #276]	; (80019cc <initPID_ch+0x29c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fda8 	bl	8000414 <__aeabi_f2d>
 80018c4:	4604      	mov	r4, r0
 80018c6:	460d      	mov	r5, r1
 80018c8:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <initPID_ch+0x284>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fd8f 	bl	80003f0 <__aeabi_i2d>
 80018d2:	4680      	mov	r8, r0
 80018d4:	4689      	mov	r9, r1
 80018d6:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <initPID_ch+0x2a0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fd9a 	bl	8000414 <__aeabi_f2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	f7fe fc38 	bl	8000158 <__adddf3>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4640      	mov	r0, r8
 80018ee:	4649      	mov	r1, r9
 80018f0:	f7fe ff12 	bl	8000718 <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	f04f 0000 	mov.w	r0, #0
 80018fc:	4936      	ldr	r1, [pc, #216]	; (80019d8 <initPID_ch+0x2a8>)
 80018fe:	f7fe fc29 	bl	8000154 <__aeabi_dsub>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4690      	mov	r8, r2
 8001908:	4699      	mov	r9, r3
 800190a:	4b32      	ldr	r3, [pc, #200]	; (80019d4 <initPID_ch+0x2a4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fd80 	bl	8000414 <__aeabi_f2d>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	f7fe fc1e 	bl	8000158 <__adddf3>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4692      	mov	sl, r2
 8001922:	469b      	mov	fp, r3
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <initPID_ch+0x284>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fd61 	bl	80003f0 <__aeabi_i2d>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4650      	mov	r0, sl
 8001934:	4659      	mov	r1, fp
 8001936:	f7fe feef 	bl	8000718 <__aeabi_ddiv>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4640      	mov	r0, r8
 8001940:	4649      	mov	r1, r9
 8001942:	f7fe fc09 	bl	8000158 <__adddf3>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4620      	mov	r0, r4
 800194c:	4629      	mov	r1, r5
 800194e:	f7fe fdb9 	bl	80004c4 <__aeabi_dmul>
 8001952:	4603      	mov	r3, r0
 8001954:	460c      	mov	r4, r1
 8001956:	4618      	mov	r0, r3
 8001958:	4621      	mov	r1, r4
 800195a:	f7fe ffc5 	bl	80008e8 <__aeabi_d2f>
 800195e:	4602      	mov	r2, r0
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <initPID_ch+0x2b0>)
 8001962:	601a      	str	r2, [r3, #0]
	q2=(kp*td)/Ts;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <initPID_ch+0x29c>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <initPID_ch+0x2a4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	4610      	mov	r0, r2
 8001970:	f7ff f918 	bl	8000ba4 <__aeabi_fmul>
 8001974:	4603      	mov	r3, r0
 8001976:	461c      	mov	r4, r3
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <initPID_ch+0x284>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff f8bd 	bl	8000afc <__aeabi_i2f>
 8001982:	4603      	mov	r3, r0
 8001984:	4619      	mov	r1, r3
 8001986:	4620      	mov	r0, r4
 8001988:	f7ff f9c0 	bl	8000d0c <__aeabi_fdiv>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <initPID_ch+0x2b4>)
 8001992:	601a      	str	r2, [r3, #0]

}
 8001994:	bf00      	nop
 8001996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800199a:	bf00      	nop
 800199c:	200006a4 	.word	0x200006a4
 80019a0:	2000067c 	.word	0x2000067c
 80019a4:	200006b0 	.word	0x200006b0
 80019a8:	2000069c 	.word	0x2000069c
 80019ac:	20000670 	.word	0x20000670
 80019b0:	2000066c 	.word	0x2000066c
 80019b4:	2000068c 	.word	0x2000068c
 80019b8:	20000680 	.word	0x20000680
 80019bc:	20000694 	.word	0x20000694
 80019c0:	42ba0000 	.word	0x42ba0000
 80019c4:	20000688 	.word	0x20000688
 80019c8:	3ff33333 	.word	0x3ff33333
 80019cc:	200006a8 	.word	0x200006a8
 80019d0:	200006a0 	.word	0x200006a0
 80019d4:	200006ac 	.word	0x200006ac
 80019d8:	3ff00000 	.word	0x3ff00000
 80019dc:	20000698 	.word	0x20000698
 80019e0:	20000690 	.word	0x20000690
 80019e4:	20000678 	.word	0x20000678

080019e8 <PID>:

void PID(){
 80019e8:	b598      	push	{r3, r4, r7, lr}
 80019ea:	af00      	add	r7, sp, #0

	e=(r1-v1); // calcular error
 80019ec:	4b37      	ldr	r3, [pc, #220]	; (8001acc <PID+0xe4>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <PID+0xe8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	4610      	mov	r0, r2
 80019f8:	f7fe ffca 	bl	8000990 <__aeabi_fsub>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <PID+0xec>)
 8001a02:	601a      	str	r2, [r3, #0]

	u = u_1 + q0*e + q1*e_1 + q2*e_2; //Ley del controlador PID discreto
 8001a04:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <PID+0xf0>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <PID+0xec>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f7ff f8c8 	bl	8000ba4 <__aeabi_fmul>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b30      	ldr	r3, [pc, #192]	; (8001adc <PID+0xf4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f7fe ffb8 	bl	8000994 <__addsf3>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461c      	mov	r4, r3
 8001a28:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <PID+0xf8>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <PID+0xfc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	4610      	mov	r0, r2
 8001a34:	f7ff f8b6 	bl	8000ba4 <__aeabi_fmul>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7fe ffa9 	bl	8000994 <__addsf3>
 8001a42:	4603      	mov	r3, r0
 8001a44:	461c      	mov	r4, r3
 8001a46:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <PID+0x100>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <PID+0x104>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4610      	mov	r0, r2
 8001a52:	f7ff f8a7 	bl	8000ba4 <__aeabi_fmul>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f7fe ff9a 	bl	8000994 <__addsf3>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <PID+0x108>)
 8001a66:	601a      	str	r2, [r3, #0]

	if (u >= 50.0)        //Saturo la accion de control 'uT' en un tope maximo y minimo
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <PID+0x108>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4921      	ldr	r1, [pc, #132]	; (8001af4 <PID+0x10c>)
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fa4a 	bl	8000f08 <__aeabi_fcmpge>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <PID+0x98>
	u = 50.0;
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <PID+0x108>)
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <PID+0x10c>)
 8001a7e:	601a      	str	r2, [r3, #0]
	if (u <= 0.0 || r1==0)
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <PID+0x108>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fa33 	bl	8000ef4 <__aeabi_fcmple>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d109      	bne.n	8001aa8 <PID+0xc0>
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <PID+0xe4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fa15 	bl	8000ecc <__aeabi_fcmpeq>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <PID+0xc8>
	u = 0.0;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <PID+0x108>)
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

	e_2=e_1;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <PID+0xfc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <PID+0x104>)
 8001ab6:	6013      	str	r3, [r2, #0]
	e_1=e;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <PID+0xec>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <PID+0xfc>)
 8001abe:	6013      	str	r3, [r2, #0]
	u_1=u;
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <PID+0x108>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a05      	ldr	r2, [pc, #20]	; (8001adc <PID+0xf4>)
 8001ac6:	6013      	str	r3, [r2, #0]

}
 8001ac8:	bf00      	nop
 8001aca:	bd98      	pop	{r3, r4, r7, pc}
 8001acc:	200006b0 	.word	0x200006b0
 8001ad0:	20000674 	.word	0x20000674
 8001ad4:	2000069c 	.word	0x2000069c
 8001ad8:	20000698 	.word	0x20000698
 8001adc:	2000067c 	.word	0x2000067c
 8001ae0:	20000690 	.word	0x20000690
 8001ae4:	20000670 	.word	0x20000670
 8001ae8:	20000678 	.word	0x20000678
 8001aec:	2000066c 	.word	0x2000066c
 8001af0:	200006a4 	.word	0x200006a4
 8001af4:	42480000 	.word	0x42480000

08001af8 <actualizar_par>:

void actualizar_par(){
 8001af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001afc:	af00      	add	r7, sp, #0

	kp=(1.2*tau)/(k*theta);
 8001afe:	4b82      	ldr	r3, [pc, #520]	; (8001d08 <actualizar_par+0x210>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fc86 	bl	8000414 <__aeabi_f2d>
 8001b08:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001b0c:	4b7f      	ldr	r3, [pc, #508]	; (8001d0c <actualizar_par+0x214>)
 8001b0e:	f7fe fcd9 	bl	80004c4 <__aeabi_dmul>
 8001b12:	4603      	mov	r3, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	4625      	mov	r5, r4
 8001b18:	461c      	mov	r4, r3
 8001b1a:	4b7d      	ldr	r3, [pc, #500]	; (8001d10 <actualizar_par+0x218>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4b7d      	ldr	r3, [pc, #500]	; (8001d14 <actualizar_par+0x21c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4610      	mov	r0, r2
 8001b26:	f7ff f83d 	bl	8000ba4 <__aeabi_fmul>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fc71 	bl	8000414 <__aeabi_f2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f7fe fded 	bl	8000718 <__aeabi_ddiv>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460c      	mov	r4, r1
 8001b42:	4618      	mov	r0, r3
 8001b44:	4621      	mov	r1, r4
 8001b46:	f7fe fecf 	bl	80008e8 <__aeabi_d2f>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	4b72      	ldr	r3, [pc, #456]	; (8001d18 <actualizar_par+0x220>)
 8001b4e:	601a      	str	r2, [r3, #0]
	ti=2.0*theta;
 8001b50:	4b70      	ldr	r3, [pc, #448]	; (8001d14 <actualizar_par+0x21c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe ff1c 	bl	8000994 <__addsf3>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b6e      	ldr	r3, [pc, #440]	; (8001d1c <actualizar_par+0x224>)
 8001b62:	601a      	str	r2, [r3, #0]
	td=0.5*theta;
 8001b64:	4b6b      	ldr	r3, [pc, #428]	; (8001d14 <actualizar_par+0x21c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff f819 	bl	8000ba4 <__aeabi_fmul>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <actualizar_par+0x228>)
 8001b78:	601a      	str	r2, [r3, #0]

	q0=kp*(1+Ts/(2.0*ti)+td/Ts);
 8001b7a:	4b67      	ldr	r3, [pc, #412]	; (8001d18 <actualizar_par+0x220>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fc48 	bl	8000414 <__aeabi_f2d>
 8001b84:	4605      	mov	r5, r0
 8001b86:	460e      	mov	r6, r1
 8001b88:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <actualizar_par+0x22c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fc2f 	bl	80003f0 <__aeabi_i2d>
 8001b92:	4680      	mov	r8, r0
 8001b94:	4689      	mov	r9, r1
 8001b96:	4b61      	ldr	r3, [pc, #388]	; (8001d1c <actualizar_par+0x224>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fc3a 	bl	8000414 <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	f7fe fad8 	bl	8000158 <__adddf3>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	460c      	mov	r4, r1
 8001bac:	461a      	mov	r2, r3
 8001bae:	4623      	mov	r3, r4
 8001bb0:	4640      	mov	r0, r8
 8001bb2:	4649      	mov	r1, r9
 8001bb4:	f7fe fdb0 	bl	8000718 <__aeabi_ddiv>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	460c      	mov	r4, r1
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <actualizar_par+0x230>)
 8001bc6:	f7fe fac7 	bl	8000158 <__adddf3>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460c      	mov	r4, r1
 8001bce:	4698      	mov	r8, r3
 8001bd0:	46a1      	mov	r9, r4
 8001bd2:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <actualizar_par+0x228>)
 8001bd4:	681c      	ldr	r4, [r3, #0]
 8001bd6:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <actualizar_par+0x22c>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe ff8e 	bl	8000afc <__aeabi_i2f>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4619      	mov	r1, r3
 8001be4:	4620      	mov	r0, r4
 8001be6:	f7ff f891 	bl	8000d0c <__aeabi_fdiv>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fc11 	bl	8000414 <__aeabi_f2d>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460c      	mov	r4, r1
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	4640      	mov	r0, r8
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	f7fe faab 	bl	8000158 <__adddf3>
 8001c02:	4603      	mov	r3, r0
 8001c04:	460c      	mov	r4, r1
 8001c06:	461a      	mov	r2, r3
 8001c08:	4623      	mov	r3, r4
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	4631      	mov	r1, r6
 8001c0e:	f7fe fc59 	bl	80004c4 <__aeabi_dmul>
 8001c12:	4603      	mov	r3, r0
 8001c14:	460c      	mov	r4, r1
 8001c16:	4618      	mov	r0, r3
 8001c18:	4621      	mov	r1, r4
 8001c1a:	f7fe fe65 	bl	80008e8 <__aeabi_d2f>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	4b42      	ldr	r3, [pc, #264]	; (8001d2c <actualizar_par+0x234>)
 8001c22:	601a      	str	r2, [r3, #0]
	q1=-kp*(1-Ts/(2.0*ti)+(2.0*td)/Ts);
 8001c24:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <actualizar_par+0x220>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fbf1 	bl	8000414 <__aeabi_f2d>
 8001c32:	4604      	mov	r4, r0
 8001c34:	460d      	mov	r5, r1
 8001c36:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <actualizar_par+0x22c>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fbd8 	bl	80003f0 <__aeabi_i2d>
 8001c40:	4680      	mov	r8, r0
 8001c42:	4689      	mov	r9, r1
 8001c44:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <actualizar_par+0x224>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fbe3 	bl	8000414 <__aeabi_f2d>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	f7fe fa81 	bl	8000158 <__adddf3>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	4649      	mov	r1, r9
 8001c5e:	f7fe fd5b 	bl	8000718 <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	f04f 0000 	mov.w	r0, #0
 8001c6a:	492f      	ldr	r1, [pc, #188]	; (8001d28 <actualizar_par+0x230>)
 8001c6c:	f7fe fa72 	bl	8000154 <__aeabi_dsub>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4690      	mov	r8, r2
 8001c76:	4699      	mov	r9, r3
 8001c78:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <actualizar_par+0x228>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fbc9 	bl	8000414 <__aeabi_f2d>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	f7fe fa67 	bl	8000158 <__adddf3>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4692      	mov	sl, r2
 8001c90:	469b      	mov	fp, r3
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <actualizar_par+0x22c>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fbaa 	bl	80003f0 <__aeabi_i2d>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4650      	mov	r0, sl
 8001ca2:	4659      	mov	r1, fp
 8001ca4:	f7fe fd38 	bl	8000718 <__aeabi_ddiv>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4640      	mov	r0, r8
 8001cae:	4649      	mov	r1, r9
 8001cb0:	f7fe fa52 	bl	8000158 <__adddf3>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f7fe fc02 	bl	80004c4 <__aeabi_dmul>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	460c      	mov	r4, r1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	f7fe fe0e 	bl	80008e8 <__aeabi_d2f>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <actualizar_par+0x238>)
 8001cd0:	601a      	str	r2, [r3, #0]
	q2=(kp*td)/Ts;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <actualizar_par+0x220>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <actualizar_par+0x228>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f7fe ff61 	bl	8000ba4 <__aeabi_fmul>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461c      	mov	r4, r3
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <actualizar_par+0x22c>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe ff06 	bl	8000afc <__aeabi_i2f>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f7ff f809 	bl	8000d0c <__aeabi_fdiv>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <actualizar_par+0x23c>)
 8001d00:	601a      	str	r2, [r3, #0]

}
 8001d02:	bf00      	nop
 8001d04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d08:	20000694 	.word	0x20000694
 8001d0c:	3ff33333 	.word	0x3ff33333
 8001d10:	20000680 	.word	0x20000680
 8001d14:	20000688 	.word	0x20000688
 8001d18:	200006a8 	.word	0x200006a8
 8001d1c:	200006a0 	.word	0x200006a0
 8001d20:	200006ac 	.word	0x200006ac
 8001d24:	2000068c 	.word	0x2000068c
 8001d28:	3ff00000 	.word	0x3ff00000
 8001d2c:	20000698 	.word	0x20000698
 8001d30:	20000690 	.word	0x20000690
 8001d34:	20000678 	.word	0x20000678

08001d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d3e:	f000 ff61 	bl	8002c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d42:	f000 f8b5 	bl	8001eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d46:	f000 fa47 	bl	80021d8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001d4a:	f007 fe77 	bl	8009a3c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001d4e:	f000 f9a9 	bl	80020a4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001d52:	f000 f907 	bl	8001f64 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001d56:	f000 f9f1 	bl	800213c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001d5a:	483e      	ldr	r0, [pc, #248]	; (8001e54 <main+0x11c>)
 8001d5c:	f003 fb08 	bl	8005370 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8001d60:	483d      	ldr	r0, [pc, #244]	; (8001e58 <main+0x120>)
 8001d62:	f003 fabb 	bl	80052dc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d66:	2100      	movs	r1, #0
 8001d68:	483c      	ldr	r0, [pc, #240]	; (8001e5c <main+0x124>)
 8001d6a:	f003 fbab 	bl	80054c4 <HAL_TIM_PWM_Start>
  InitResiver(GPIOA,  GPIO_PIN_10);
 8001d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d72:	483b      	ldr	r0, [pc, #236]	; (8001e60 <main+0x128>)
 8001d74:	f7ff fa94 	bl	80012a0 <InitResiver>
  protocolInit( GPIO_PIN_SET );
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff f8f9 	bl	8000f70 <protocolInit>

  revoluciones = 50;
 8001d7e:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <main+0x12c>)
 8001d80:	2232      	movs	r2, #50	; 0x32
 8001d82:	701a      	strb	r2, [r3, #0]
  tiempo_motor = 0;
 8001d84:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <main+0x130>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
  numData = 0;
 8001d8a:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <main+0x134>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
  pulsos = 0;
 8001d90:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <main+0x138>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

  // timer init CCR1
  TIM1->CCR1 = (200 * revoluciones/100) ;
 8001d96:	4b33      	ldr	r3, [pc, #204]	; (8001e64 <main+0x12c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	23c8      	movs	r3, #200	; 0xc8
 8001d9e:	fb03 f302 	mul.w	r3, r3, r2
 8001da2:	4a34      	ldr	r2, [pc, #208]	; (8001e74 <main+0x13c>)
 8001da4:	fb82 1203 	smull	r1, r2, r2, r3
 8001da8:	1152      	asrs	r2, r2, #5
 8001daa:	17db      	asrs	r3, r3, #31
 8001dac:	1ad2      	subs	r2, r2, r3
 8001dae:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <main+0x140>)
 8001db0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->ARR = 200 - 1;
 8001db2:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <main+0x140>)
 8001db4:	22c7      	movs	r2, #199	; 0xc7
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1->PSC = 18;
 8001db8:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <main+0x140>)
 8001dba:	2212      	movs	r2, #18
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28

	num_sensor = 0;
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <main+0x144>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
	num_sensor =
		(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) << 1) |
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	482e      	ldr	r0, [pc, #184]	; (8001e80 <main+0x148>)
 8001dc8:	f001 f9e6 	bl	8003198 <HAL_GPIO_ReadPin>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	b25c      	sxtb	r4, r3
		HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	482a      	ldr	r0, [pc, #168]	; (8001e80 <main+0x148>)
 8001dd6:	f001 f9df 	bl	8003198 <HAL_GPIO_ReadPin>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	b25b      	sxtb	r3, r3
		(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) << 1) |
 8001dde:	4323      	orrs	r3, r4
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	b2da      	uxtb	r2, r3
	num_sensor =
 8001de4:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <main+0x144>)
 8001de6:	701a      	strb	r2, [r3, #0]

	anterior = num_sensor;
 8001de8:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <main+0x144>)
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <main+0x14c>)
 8001dee:	701a      	strb	r2, [r3, #0]
	actual = num_sensor;
 8001df0:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <main+0x144>)
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <main+0x150>)
 8001df6:	701a      	strb	r2, [r3, #0]

	initPID_ch();
 8001df8:	f7ff fc9a 	bl	8001730 <initPID_ch>
	r1 = 0;
 8001dfc:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <main+0x154>)
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
	v1 = 0;
 8001e04:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <main+0x158>)
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0){
		  	 prueba();
	  }

*/
	  if(read){
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <main+0x15c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d004      	beq.n	8001e20 <main+0xe8>
		  reciveData();
 8001e16:	f7ff fa73 	bl	8001300 <reciveData>
		  read = 0;
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <main+0x15c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
	  }

	  if(resive){
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <main+0x160>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <main+0xfe>
		  leer_num();
 8001e28:	f7ff fbce 	bl	80015c8 <leer_num>
		  select_data();
 8001e2c:	f000 fb14 	bl	8002458 <select_data>
		  resive = GPIO_PIN_RESET;
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <main+0x160>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
	  }

	  rotate_data();
 8001e36:	f000 fa35 	bl	80022a4 <rotate_data>
	  state_motor();
 8001e3a:	f000 fbc7 	bl	80025cc <state_motor>

	  communication(
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <main+0x134>)
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <main+0x164>)
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <main+0x168>)
 8001e48:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <main+0x16c>)
 8001e4a:	4917      	ldr	r1, [pc, #92]	; (8001ea8 <main+0x170>)
 8001e4c:	4817      	ldr	r0, [pc, #92]	; (8001eac <main+0x174>)
 8001e4e:	f7ff f9bf 	bl	80011d0 <communication>
	  if(read){
 8001e52:	e7db      	b.n	8001e0c <main+0xd4>
 8001e54:	20000810 	.word	0x20000810
 8001e58:	200006c0 	.word	0x200006c0
 8001e5c:	200007c0 	.word	0x200007c0
 8001e60:	40010800 	.word	0x40010800
 8001e64:	2000080c 	.word	0x2000080c
 8001e68:	200006b8 	.word	0x200006b8
 8001e6c:	200001ac 	.word	0x200001ac
 8001e70:	20000858 	.word	0x20000858
 8001e74:	51eb851f 	.word	0x51eb851f
 8001e78:	40012c00 	.word	0x40012c00
 8001e7c:	200006bc 	.word	0x200006bc
 8001e80:	40010c00 	.word	0x40010c00
 8001e84:	2000080b 	.word	0x2000080b
 8001e88:	2000080a 	.word	0x2000080a
 8001e8c:	200006b0 	.word	0x200006b0
 8001e90:	20000674 	.word	0x20000674
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000669 	.word	0x20000669
 8001e9c:	20000001 	.word	0x20000001
 8001ea0:	20000002 	.word	0x20000002
 8001ea4:	20000788 	.word	0x20000788
 8001ea8:	2000045d 	.word	0x2000045d
 8001eac:	20000708 	.word	0x20000708

08001eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b094      	sub	sp, #80	; 0x50
 8001eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eba:	2228      	movs	r2, #40	; 0x28
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f008 fa8b 	bl	800a3da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ee4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001efc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f06:	4618      	mov	r0, r3
 8001f08:	f002 fcf8 	bl	80048fc <HAL_RCC_OscConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f12:	f000 fd47 	bl	80029a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f16:	230f      	movs	r3, #15
 8001f18:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2102      	movs	r1, #2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 ff62 	bl	8004dfc <HAL_RCC_ClockConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f3e:	f000 fd31 	bl	80029a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f42:	2310      	movs	r3, #16
 8001f44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 f8bf 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001f58:	f000 fd24 	bl	80029a4 <Error_Handler>
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3750      	adds	r7, #80	; 0x50
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b096      	sub	sp, #88	; 0x58
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	611a      	str	r2, [r3, #16]
 8001f92:	615a      	str	r2, [r3, #20]
 8001f94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	2220      	movs	r2, #32
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f008 fa1c 	bl	800a3da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fa2:	4b3e      	ldr	r3, [pc, #248]	; (800209c <MX_TIM1_Init+0x138>)
 8001fa4:	4a3e      	ldr	r2, [pc, #248]	; (80020a0 <MX_TIM1_Init+0x13c>)
 8001fa6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200;
 8001fa8:	4b3c      	ldr	r3, [pc, #240]	; (800209c <MX_TIM1_Init+0x138>)
 8001faa:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001fae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	; (800209c <MX_TIM1_Init+0x138>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001fb6:	4b39      	ldr	r3, [pc, #228]	; (800209c <MX_TIM1_Init+0x138>)
 8001fb8:	2263      	movs	r2, #99	; 0x63
 8001fba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b37      	ldr	r3, [pc, #220]	; (800209c <MX_TIM1_Init+0x138>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fc2:	4b36      	ldr	r3, [pc, #216]	; (800209c <MX_TIM1_Init+0x138>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc8:	4b34      	ldr	r3, [pc, #208]	; (800209c <MX_TIM1_Init+0x138>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fce:	4833      	ldr	r0, [pc, #204]	; (800209c <MX_TIM1_Init+0x138>)
 8001fd0:	f003 f934 	bl	800523c <HAL_TIM_Base_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001fda:	f000 fce3 	bl	80029a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fe4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fe8:	4619      	mov	r1, r3
 8001fea:	482c      	ldr	r0, [pc, #176]	; (800209c <MX_TIM1_Init+0x138>)
 8001fec:	f003 fcd2 	bl	8005994 <HAL_TIM_ConfigClockSource>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001ff6:	f000 fcd5 	bl	80029a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ffa:	4828      	ldr	r0, [pc, #160]	; (800209c <MX_TIM1_Init+0x138>)
 8001ffc:	f003 fa0a 	bl	8005414 <HAL_TIM_PWM_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002006:	f000 fccd 	bl	80029a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002012:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002016:	4619      	mov	r1, r3
 8002018:	4820      	ldr	r0, [pc, #128]	; (800209c <MX_TIM1_Init+0x138>)
 800201a:	f004 f83b 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002024:	f000 fcbe 	bl	80029a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002028:	2360      	movs	r3, #96	; 0x60
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002030:	2300      	movs	r3, #0
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002034:	2300      	movs	r3, #0
 8002036:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002048:	2200      	movs	r2, #0
 800204a:	4619      	mov	r1, r3
 800204c:	4813      	ldr	r0, [pc, #76]	; (800209c <MX_TIM1_Init+0x138>)
 800204e:	f003 fbe3 	bl	8005818 <HAL_TIM_PWM_ConfigChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002058:	f000 fca4 	bl	80029a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002074:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	4619      	mov	r1, r3
 800207e:	4807      	ldr	r0, [pc, #28]	; (800209c <MX_TIM1_Init+0x138>)
 8002080:	f004 f866 	bl	8006150 <HAL_TIMEx_ConfigBreakDeadTime>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800208a:	f000 fc8b 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800208e:	4803      	ldr	r0, [pc, #12]	; (800209c <MX_TIM1_Init+0x138>)
 8002090:	f000 fd12 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 8002094:	bf00      	nop
 8002096:	3758      	adds	r7, #88	; 0x58
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200007c0 	.word	0x200007c0
 80020a0:	40012c00 	.word	0x40012c00

080020a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020aa:	f107 0308 	add.w	r3, r7, #8
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b8:	463b      	mov	r3, r7
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020c0:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <MX_TIM2_Init+0x94>)
 80020c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 80020c8:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <MX_TIM2_Init+0x94>)
 80020ca:	2248      	movs	r2, #72	; 0x48
 80020cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <MX_TIM2_Init+0x94>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50 - 1;
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <MX_TIM2_Init+0x94>)
 80020d6:	2231      	movs	r2, #49	; 0x31
 80020d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <MX_TIM2_Init+0x94>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e0:	4b15      	ldr	r3, [pc, #84]	; (8002138 <MX_TIM2_Init+0x94>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020e6:	4814      	ldr	r0, [pc, #80]	; (8002138 <MX_TIM2_Init+0x94>)
 80020e8:	f003 f8a8 	bl	800523c <HAL_TIM_Base_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80020f2:	f000 fc57 	bl	80029a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020fc:	f107 0308 	add.w	r3, r7, #8
 8002100:	4619      	mov	r1, r3
 8002102:	480d      	ldr	r0, [pc, #52]	; (8002138 <MX_TIM2_Init+0x94>)
 8002104:	f003 fc46 	bl	8005994 <HAL_TIM_ConfigClockSource>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800210e:	f000 fc49 	bl	80029a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800211a:	463b      	mov	r3, r7
 800211c:	4619      	mov	r1, r3
 800211e:	4806      	ldr	r0, [pc, #24]	; (8002138 <MX_TIM2_Init+0x94>)
 8002120:	f003 ffb8 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800212a:	f000 fc3b 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800212e:	bf00      	nop
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000810 	.word	0x20000810

0800213c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002150:	463b      	mov	r3, r7
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <MX_TIM3_Init+0x94>)
 800215a:	4a1e      	ldr	r2, [pc, #120]	; (80021d4 <MX_TIM3_Init+0x98>)
 800215c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 800215e:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <MX_TIM3_Init+0x94>)
 8002160:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002164:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <MX_TIM3_Init+0x94>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <MX_TIM3_Init+0x94>)
 800216e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002172:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <MX_TIM3_Init+0x94>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <MX_TIM3_Init+0x94>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002180:	4813      	ldr	r0, [pc, #76]	; (80021d0 <MX_TIM3_Init+0x94>)
 8002182:	f003 f85b 	bl	800523c <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800218c:	f000 fc0a 	bl	80029a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002194:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002196:	f107 0308 	add.w	r3, r7, #8
 800219a:	4619      	mov	r1, r3
 800219c:	480c      	ldr	r0, [pc, #48]	; (80021d0 <MX_TIM3_Init+0x94>)
 800219e:	f003 fbf9 	bl	8005994 <HAL_TIM_ConfigClockSource>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80021a8:	f000 fbfc 	bl	80029a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021b4:	463b      	mov	r3, r7
 80021b6:	4619      	mov	r1, r3
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_TIM3_Init+0x94>)
 80021ba:	f003 ff6b 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80021c4:	f000 fbee 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200006c0 	.word	0x200006c0
 80021d4:	40000400 	.word	0x40000400

080021d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <MX_GPIO_Init+0xc0>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a29      	ldr	r2, [pc, #164]	; (8002298 <MX_GPIO_Init+0xc0>)
 80021f2:	f043 0320 	orr.w	r3, r3, #32
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <MX_GPIO_Init+0xc0>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <MX_GPIO_Init+0xc0>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	4a23      	ldr	r2, [pc, #140]	; (8002298 <MX_GPIO_Init+0xc0>)
 800220a:	f043 0308 	orr.w	r3, r3, #8
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <MX_GPIO_Init+0xc0>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <MX_GPIO_Init+0xc0>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <MX_GPIO_Init+0xc0>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <MX_GPIO_Init+0xc0>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002234:	2200      	movs	r2, #0
 8002236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800223a:	4818      	ldr	r0, [pc, #96]	; (800229c <MX_GPIO_Init+0xc4>)
 800223c:	f000 ffc3 	bl	80031c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002240:	2303      	movs	r3, #3
 8002242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	4619      	mov	r1, r3
 8002252:	4813      	ldr	r0, [pc, #76]	; (80022a0 <MX_GPIO_Init+0xc8>)
 8002254:	f000 fe46 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800225c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225e:	2301      	movs	r3, #1
 8002260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002262:	2301      	movs	r3, #1
 8002264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226a:	f107 0310 	add.w	r3, r7, #16
 800226e:	4619      	mov	r1, r3
 8002270:	480a      	ldr	r0, [pc, #40]	; (800229c <MX_GPIO_Init+0xc4>)
 8002272:	f000 fe37 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800227a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002280:	2302      	movs	r3, #2
 8002282:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002284:	f107 0310 	add.w	r3, r7, #16
 8002288:	4619      	mov	r1, r3
 800228a:	4804      	ldr	r0, [pc, #16]	; (800229c <MX_GPIO_Init+0xc4>)
 800228c:	f000 fe2a 	bl	8002ee4 <HAL_GPIO_Init>

}
 8002290:	bf00      	nop
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	40010800 	.word	0x40010800
 80022a0:	40010c00 	.word	0x40010c00

080022a4 <rotate_data>:

/* USER CODE BEGIN 4 */

void rotate_data(){
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

	if(numData > 4){ // longitud de los datos a enviar
 80022a8:	4b5b      	ldr	r3, [pc, #364]	; (8002418 <rotate_data+0x174>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d902      	bls.n	80022b6 <rotate_data+0x12>
		numData = 0;
 80022b0:	4b59      	ldr	r3, [pc, #356]	; (8002418 <rotate_data+0x174>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
	}

	switch(numData){
 80022b6:	4b58      	ldr	r3, [pc, #352]	; (8002418 <rotate_data+0x174>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	f200 80a8 	bhi.w	8002410 <rotate_data+0x16c>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <rotate_data+0x24>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022dd 	.word	0x080022dd
 80022cc:	08002313 	.word	0x08002313
 80022d0:	0800235b 	.word	0x0800235b
 80022d4:	0800238b 	.word	0x0800238b
 80022d8:	080023bb 	.word	0x080023bb
	case 0:

		data_for_send[0] = (uint8_t) revoluciones;
 80022dc:	4b4f      	ldr	r3, [pc, #316]	; (800241c <rotate_data+0x178>)
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	4b4f      	ldr	r3, [pc, #316]	; (8002420 <rotate_data+0x17c>)
 80022e2:	701a      	strb	r2, [r3, #0]
		data_for_send[1] = (uint8_t) move;
 80022e4:	4b4f      	ldr	r3, [pc, #316]	; (8002424 <rotate_data+0x180>)
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	4b4d      	ldr	r3, [pc, #308]	; (8002420 <rotate_data+0x17c>)
 80022ea:	705a      	strb	r2, [r3, #1]
		data_for_send[2] = (uint8_t) velocidad;
 80022ec:	4b4e      	ldr	r3, [pc, #312]	; (8002428 <rotate_data+0x184>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b4b      	ldr	r3, [pc, #300]	; (8002420 <rotate_data+0x17c>)
 80022f4:	709a      	strb	r2, [r3, #2]
		data_for_send[3] = (uint8_t) (velocidad >> 8);
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <rotate_data+0x184>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b47      	ldr	r3, [pc, #284]	; (8002420 <rotate_data+0x17c>)
 8002302:	70da      	strb	r2, [r3, #3]
		command = code_revl;
 8002304:	4b49      	ldr	r3, [pc, #292]	; (800242c <rotate_data+0x188>)
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	701a      	strb	r2, [r3, #0]
		len = 4;
 800230a:	4b49      	ldr	r3, [pc, #292]	; (8002430 <rotate_data+0x18c>)
 800230c:	2204      	movs	r2, #4
 800230e:	701a      	strb	r2, [r3, #0]

		break;
 8002310:	e07e      	b.n	8002410 <rotate_data+0x16c>
	case 1:

		data_for_send[0] = (uint8_t) pulsos;
 8002312:	4b48      	ldr	r3, [pc, #288]	; (8002434 <rotate_data+0x190>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	4b41      	ldr	r3, [pc, #260]	; (8002420 <rotate_data+0x17c>)
 800231a:	701a      	strb	r2, [r3, #0]
		data_for_send[1] = (uint8_t) (pulsos >> 8);
 800231c:	4b45      	ldr	r3, [pc, #276]	; (8002434 <rotate_data+0x190>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b3e      	ldr	r3, [pc, #248]	; (8002420 <rotate_data+0x17c>)
 8002326:	705a      	strb	r2, [r3, #1]
		data_for_send[2] = (uint8_t) (pulsos >> 16);
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <rotate_data+0x190>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	b2da      	uxtb	r2, r3
 8002330:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <rotate_data+0x17c>)
 8002332:	709a      	strb	r2, [r3, #2]
		data_for_send[3] = (uint8_t) r1_enter;
 8002334:	4b40      	ldr	r3, [pc, #256]	; (8002438 <rotate_data+0x194>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b39      	ldr	r3, [pc, #228]	; (8002420 <rotate_data+0x17c>)
 800233c:	70da      	strb	r2, [r3, #3]
		data_for_send[4] = (uint8_t) (r1_enter >> 8);
 800233e:	4b3e      	ldr	r3, [pc, #248]	; (8002438 <rotate_data+0x194>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	b29b      	uxth	r3, r3
 8002346:	b2da      	uxtb	r2, r3
 8002348:	4b35      	ldr	r3, [pc, #212]	; (8002420 <rotate_data+0x17c>)
 800234a:	711a      	strb	r2, [r3, #4]

		command = code_time;
 800234c:	4b37      	ldr	r3, [pc, #220]	; (800242c <rotate_data+0x188>)
 800234e:	2241      	movs	r2, #65	; 0x41
 8002350:	701a      	strb	r2, [r3, #0]

		len = 5;
 8002352:	4b37      	ldr	r3, [pc, #220]	; (8002430 <rotate_data+0x18c>)
 8002354:	2205      	movs	r2, #5
 8002356:	701a      	strb	r2, [r3, #0]

		break;
 8002358:	e05a      	b.n	8002410 <rotate_data+0x16c>

	case 2:

		data_for_send[0] = (uint8_t) menu;
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <rotate_data+0x198>)
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	4b30      	ldr	r3, [pc, #192]	; (8002420 <rotate_data+0x17c>)
 8002360:	701a      	strb	r2, [r3, #0]
		data_for_send[1] = (uint8_t) start;
 8002362:	4b37      	ldr	r3, [pc, #220]	; (8002440 <rotate_data+0x19c>)
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <rotate_data+0x17c>)
 8002368:	705a      	strb	r2, [r3, #1]

		data_for_send[2] = (uint8_t) res_V;
 800236a:	4b36      	ldr	r3, [pc, #216]	; (8002444 <rotate_data+0x1a0>)
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <rotate_data+0x17c>)
 8002370:	709a      	strb	r2, [r3, #2]
		data_for_send[3] = (uint8_t) res_a;
 8002372:	4b35      	ldr	r3, [pc, #212]	; (8002448 <rotate_data+0x1a4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b29      	ldr	r3, [pc, #164]	; (8002420 <rotate_data+0x17c>)
 800237a:	70da      	strb	r2, [r3, #3]

		len = 4;
 800237c:	4b2c      	ldr	r3, [pc, #176]	; (8002430 <rotate_data+0x18c>)
 800237e:	2204      	movs	r2, #4
 8002380:	701a      	strb	r2, [r3, #0]
		command = code_menu;
 8002382:	4b2a      	ldr	r3, [pc, #168]	; (800242c <rotate_data+0x188>)
 8002384:	2242      	movs	r2, #66	; 0x42
 8002386:	701a      	strb	r2, [r3, #0]

		break;
 8002388:	e042      	b.n	8002410 <rotate_data+0x16c>

	case 3:
		data_for_send[0] = (uint8_t) numero_seleccionado;
 800238a:	4b30      	ldr	r3, [pc, #192]	; (800244c <rotate_data+0x1a8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b23      	ldr	r3, [pc, #140]	; (8002420 <rotate_data+0x17c>)
 8002392:	701a      	strb	r2, [r3, #0]
		data_for_send[1] = (uint8_t) (numero_seleccionado >> 8);
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <rotate_data+0x1a8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	b2da      	uxtb	r2, r3
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <rotate_data+0x17c>)
 800239e:	705a      	strb	r2, [r3, #1]
		data_for_send[2] = (uint8_t) (numero_seleccionado >> 16);
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <rotate_data+0x1a8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <rotate_data+0x17c>)
 80023aa:	709a      	strb	r2, [r3, #2]
		command = code_tecleando;
 80023ac:	4b1f      	ldr	r3, [pc, #124]	; (800242c <rotate_data+0x188>)
 80023ae:	2243      	movs	r2, #67	; 0x43
 80023b0:	701a      	strb	r2, [r3, #0]
		len = 3;
 80023b2:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <rotate_data+0x18c>)
 80023b4:	2203      	movs	r2, #3
 80023b6:	701a      	strb	r2, [r3, #0]
		break;
 80023b8:	e02a      	b.n	8002410 <rotate_data+0x16c>

	case 4:

		if(distancia < 0)
 80023ba:	4b25      	ldr	r3, [pc, #148]	; (8002450 <rotate_data+0x1ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	da03      	bge.n	80023ca <rotate_data+0x126>
		data_for_send[3] = (uint8_t) 1;
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <rotate_data+0x17c>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	70da      	strb	r2, [r3, #3]
 80023c8:	e002      	b.n	80023d0 <rotate_data+0x12c>
		else
		data_for_send[3] = (uint8_t) 0;
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <rotate_data+0x17c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	70da      	strb	r2, [r3, #3]

		temp_dis = (uint32_t) abs(distancia);
 80023d0:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <rotate_data+0x1ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bfb8      	it	lt
 80023d8:	425b      	neglt	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <rotate_data+0x1b0>)
 80023de:	601a      	str	r2, [r3, #0]

		data_for_send[0] = (uint8_t) temp_dis;
 80023e0:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <rotate_data+0x1b0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <rotate_data+0x17c>)
 80023e8:	701a      	strb	r2, [r3, #0]
		data_for_send[1] = (uint8_t) (temp_dis >> 8);
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <rotate_data+0x1b0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <rotate_data+0x17c>)
 80023f4:	705a      	strb	r2, [r3, #1]
		data_for_send[2] = (uint8_t) (temp_dis >> 16);
 80023f6:	4b17      	ldr	r3, [pc, #92]	; (8002454 <rotate_data+0x1b0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0c1b      	lsrs	r3, r3, #16
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <rotate_data+0x17c>)
 8002400:	709a      	strb	r2, [r3, #2]

		command = code_distancia;
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <rotate_data+0x188>)
 8002404:	2244      	movs	r2, #68	; 0x44
 8002406:	701a      	strb	r2, [r3, #0]
		len = 4;
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <rotate_data+0x18c>)
 800240a:	2204      	movs	r2, #4
 800240c:	701a      	strb	r2, [r3, #0]

	}
}
 800240e:	e7ff      	b.n	8002410 <rotate_data+0x16c>
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	200001ac 	.word	0x200001ac
 800241c:	2000080c 	.word	0x2000080c
 8002420:	20000788 	.word	0x20000788
 8002424:	20000785 	.word	0x20000785
 8002428:	200001b4 	.word	0x200001b4
 800242c:	20000002 	.word	0x20000002
 8002430:	20000001 	.word	0x20000001
 8002434:	20000858 	.word	0x20000858
 8002438:	20000808 	.word	0x20000808
 800243c:	200001ad 	.word	0x200001ad
 8002440:	200001b6 	.word	0x200001b6
 8002444:	200001b7 	.word	0x200001b7
 8002448:	200001b8 	.word	0x200001b8
 800244c:	2000065c 	.word	0x2000065c
 8002450:	2000085c 	.word	0x2000085c
 8002454:	200006b4 	.word	0x200006b4

08002458 <select_data>:

void select_data(){
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0

	max_menu = 5;
 800245c:	4b4f      	ldr	r3, [pc, #316]	; (800259c <select_data+0x144>)
 800245e:	2205      	movs	r2, #5
 8002460:	701a      	strb	r2, [r3, #0]

	if(Compress[1] == 0xEB){
 8002462:	4b4f      	ldr	r3, [pc, #316]	; (80025a0 <select_data+0x148>)
 8002464:	785b      	ldrb	r3, [r3, #1]
 8002466:	2beb      	cmp	r3, #235	; 0xeb
 8002468:	d12c      	bne.n	80024c4 <select_data+0x6c>
		switch(Compress[0]){
 800246a:	4b4d      	ldr	r3, [pc, #308]	; (80025a0 <select_data+0x148>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2baf      	cmp	r3, #175	; 0xaf
 8002470:	d002      	beq.n	8002478 <select_data+0x20>
 8002472:	2bcf      	cmp	r3, #207	; 0xcf
 8002474:	d012      	beq.n	800249c <select_data+0x44>
 8002476:	e022      	b.n	80024be <select_data+0x66>

		case 0xaf: // arriba
			if((menu + 1) > max_menu){
 8002478:	4b4a      	ldr	r3, [pc, #296]	; (80025a4 <select_data+0x14c>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	4a47      	ldr	r2, [pc, #284]	; (800259c <select_data+0x144>)
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	4293      	cmp	r3, r2
 8002484:	dd03      	ble.n	800248e <select_data+0x36>
				menu = 0; // max option of the menu
 8002486:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <select_data+0x14c>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
			}else{
				menu += 1;
			}
			break;
 800248c:	e017      	b.n	80024be <select_data+0x66>
				menu += 1;
 800248e:	4b45      	ldr	r3, [pc, #276]	; (80025a4 <select_data+0x14c>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b43      	ldr	r3, [pc, #268]	; (80025a4 <select_data+0x14c>)
 8002498:	701a      	strb	r2, [r3, #0]
			break;
 800249a:	e010      	b.n	80024be <select_data+0x66>
		case 0xcf:
			if((menu - 1) < 0){
 800249c:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <select_data+0x14c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	da04      	bge.n	80024b0 <select_data+0x58>
				menu = max_menu; // max option of the menu
 80024a6:	4b3d      	ldr	r3, [pc, #244]	; (800259c <select_data+0x144>)
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <select_data+0x14c>)
 80024ac:	701a      	strb	r2, [r3, #0]
			}else{
				menu -= 1;
			}
			break;
 80024ae:	e005      	b.n	80024bc <select_data+0x64>
				menu -= 1;
 80024b0:	4b3c      	ldr	r3, [pc, #240]	; (80025a4 <select_data+0x14c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b3a      	ldr	r3, [pc, #232]	; (80025a4 <select_data+0x14c>)
 80024ba:	701a      	strb	r2, [r3, #0]
			break;
 80024bc:	bf00      	nop
		}

		Compress[0] = 0;
 80024be:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <select_data+0x148>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
	}

	if(Compress[0] == 0x68 && Compress[1] == 0xcb){
 80024c4:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <select_data+0x148>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b68      	cmp	r3, #104	; 0x68
 80024ca:	d165      	bne.n	8002598 <select_data+0x140>
 80024cc:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <select_data+0x148>)
 80024ce:	785b      	ldrb	r3, [r3, #1]
 80024d0:	2bcb      	cmp	r3, #203	; 0xcb
 80024d2:	d161      	bne.n	8002598 <select_data+0x140>
		switch(menu){
 80024d4:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <select_data+0x14c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d85d      	bhi.n	8002598 <select_data+0x140>
 80024dc:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <select_data+0x8c>)
 80024de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e2:	bf00      	nop
 80024e4:	080024fd 	.word	0x080024fd
 80024e8:	08002511 	.word	0x08002511
 80024ec:	0800251b 	.word	0x0800251b
 80024f0:	08002551 	.word	0x08002551
 80024f4:	08002567 	.word	0x08002567
 80024f8:	0800257d 	.word	0x0800257d
		case 0:
			if( numero_temp < 101 )
 80024fc:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <select_data+0x150>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b64      	cmp	r3, #100	; 0x64
 8002502:	d846      	bhi.n	8002592 <select_data+0x13a>
			revoluciones = (uint8_t) numero_temp;
 8002504:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <select_data+0x150>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b28      	ldr	r3, [pc, #160]	; (80025ac <select_data+0x154>)
 800250c:	701a      	strb	r2, [r3, #0]
			break;
 800250e:	e040      	b.n	8002592 <select_data+0x13a>
		case 1:
			pulsos = numero_temp;
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <select_data+0x150>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a26      	ldr	r2, [pc, #152]	; (80025b0 <select_data+0x158>)
 8002516:	6013      	str	r3, [r2, #0]
			break;
 8002518:	e03e      	b.n	8002598 <select_data+0x140>
		case 2:
			if( numero_temp < 2300){
 800251a:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <select_data+0x150>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8002522:	4293      	cmp	r3, r2
 8002524:	d837      	bhi.n	8002596 <select_data+0x13e>
				r1_enter = numero_temp;
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <select_data+0x150>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29a      	uxth	r2, r3
 800252c:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <select_data+0x15c>)
 800252e:	801a      	strh	r2, [r3, #0]
				r1 = (numero_temp/16);
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <select_data+0x150>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fadc 	bl	8000af4 <__aeabi_ui2f>
 800253c:	4602      	mov	r2, r0
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <select_data+0x160>)
 8002540:	601a      	str	r2, [r3, #0]
				k=r1;
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <select_data+0x160>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <select_data+0x164>)
 8002548:	6013      	str	r3, [r2, #0]
				actualizar_par();
 800254a:	f7ff fad5 	bl	8001af8 <actualizar_par>
			}
			break;
 800254e:	e022      	b.n	8002596 <select_data+0x13e>
		case 3:
			start = !start;
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <select_data+0x168>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf0c      	ite	eq
 8002558:	2301      	moveq	r3, #1
 800255a:	2300      	movne	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <select_data+0x168>)
 8002562:	701a      	strb	r2, [r3, #0]
			break;
 8002564:	e018      	b.n	8002598 <select_data+0x140>
		case 4:
			res_V = !res_V;
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <select_data+0x16c>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	bf0c      	ite	eq
 800256e:	2301      	moveq	r3, #1
 8002570:	2300      	movne	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <select_data+0x16c>)
 8002578:	701a      	strb	r2, [r3, #0]
			break;
 800257a:	e00d      	b.n	8002598 <select_data+0x140>
		case 5:
			res_a = !res_a;
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <select_data+0x170>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <select_data+0x170>)
 800258e:	601a      	str	r2, [r3, #0]
			break;
 8002590:	e002      	b.n	8002598 <select_data+0x140>
			break;
 8002592:	bf00      	nop
 8002594:	e000      	b.n	8002598 <select_data+0x140>
			break;
 8002596:	bf00      	nop

		}
	}
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000003 	.word	0x20000003
 80025a0:	20000658 	.word	0x20000658
 80025a4:	200001ad 	.word	0x200001ad
 80025a8:	20000664 	.word	0x20000664
 80025ac:	2000080c 	.word	0x2000080c
 80025b0:	20000858 	.word	0x20000858
 80025b4:	20000808 	.word	0x20000808
 80025b8:	200006b0 	.word	0x200006b0
 80025bc:	20000680 	.word	0x20000680
 80025c0:	200001b6 	.word	0x200001b6
 80025c4:	200001b7 	.word	0x200001b7
 80025c8:	200001b8 	.word	0x200001b8

080025cc <state_motor>:

void state_motor(){
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0

	num_sensor = 0;
 80025d2:	4b82      	ldr	r3, [pc, #520]	; (80027dc <state_motor+0x210>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
	num_sensor =
			(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) << 1) |
 80025d8:	2101      	movs	r1, #1
 80025da:	4881      	ldr	r0, [pc, #516]	; (80027e0 <state_motor+0x214>)
 80025dc:	f000 fddc 	bl	8003198 <HAL_GPIO_ReadPin>
 80025e0:	4603      	mov	r3, r0
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	b25c      	sxtb	r4, r3
			HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80025e6:	2102      	movs	r1, #2
 80025e8:	487d      	ldr	r0, [pc, #500]	; (80027e0 <state_motor+0x214>)
 80025ea:	f000 fdd5 	bl	8003198 <HAL_GPIO_ReadPin>
 80025ee:	4603      	mov	r3, r0
 80025f0:	b25b      	sxtb	r3, r3
			(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) << 1) |
 80025f2:	4323      	orrs	r3, r4
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	b2da      	uxtb	r2, r3
	num_sensor =
 80025f8:	4b78      	ldr	r3, [pc, #480]	; (80027dc <state_motor+0x210>)
 80025fa:	701a      	strb	r2, [r3, #0]

	switch(num_sensor){
 80025fc:	4b77      	ldr	r3, [pc, #476]	; (80027dc <state_motor+0x210>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d81b      	bhi.n	800263c <state_motor+0x70>
 8002604:	a201      	add	r2, pc, #4	; (adr r2, 800260c <state_motor+0x40>)
 8002606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260a:	bf00      	nop
 800260c:	0800261d 	.word	0x0800261d
 8002610:	08002625 	.word	0x08002625
 8002614:	0800262d 	.word	0x0800262d
 8002618:	08002635 	.word	0x08002635
	case 0:
		actual = off_off; // 2
 800261c:	4b71      	ldr	r3, [pc, #452]	; (80027e4 <state_motor+0x218>)
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
		break;
 8002622:	e00b      	b.n	800263c <state_motor+0x70>
	case 1:
		actual = off_on; // 3
 8002624:	4b6f      	ldr	r3, [pc, #444]	; (80027e4 <state_motor+0x218>)
 8002626:	2202      	movs	r2, #2
 8002628:	701a      	strb	r2, [r3, #0]
		break;
 800262a:	e007      	b.n	800263c <state_motor+0x70>
	case 2:
		actual = on_off; // 1
 800262c:	4b6d      	ldr	r3, [pc, #436]	; (80027e4 <state_motor+0x218>)
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
		break;
 8002632:	e003      	b.n	800263c <state_motor+0x70>
	case 3:
		actual = on_on; // 4
 8002634:	4b6b      	ldr	r3, [pc, #428]	; (80027e4 <state_motor+0x218>)
 8002636:	2203      	movs	r2, #3
 8002638:	701a      	strb	r2, [r3, #0]
		break;
 800263a:	bf00      	nop
	}

	if(anterior != actual){
 800263c:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <state_motor+0x21c>)
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	4b68      	ldr	r3, [pc, #416]	; (80027e4 <state_motor+0x218>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d074      	beq.n	8002732 <state_motor+0x166>

		if(pulsos > 0){
 8002648:	4b68      	ldr	r3, [pc, #416]	; (80027ec <state_motor+0x220>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <state_motor+0x8e>
			pulsos--;
 8002650:	4b66      	ldr	r3, [pc, #408]	; (80027ec <state_motor+0x220>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3b01      	subs	r3, #1
 8002656:	4a65      	ldr	r2, [pc, #404]	; (80027ec <state_motor+0x220>)
 8002658:	6013      	str	r3, [r2, #0]
		}

		delta_time = __HAL_TIM_GET_COUNTER(&htim3);
 800265a:	4b65      	ldr	r3, [pc, #404]	; (80027f0 <state_motor+0x224>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	b29a      	uxth	r2, r3
 8002662:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <state_motor+0x228>)
 8002664:	801a      	strh	r2, [r3, #0]

		if(actual == 4 || actual == 1 ){
 8002666:	4b5f      	ldr	r3, [pc, #380]	; (80027e4 <state_motor+0x218>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d003      	beq.n	8002676 <state_motor+0xaa>
 800266e:	4b5d      	ldr	r3, [pc, #372]	; (80027e4 <state_motor+0x218>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d125      	bne.n	80026c2 <state_motor+0xf6>
			detect_vel();
 8002676:	f000 f8d3 	bl	8002820 <detect_vel>
			__HAL_TIM_SET_COUNTER(&htim3,0);
 800267a:	4b5d      	ldr	r3, [pc, #372]	; (80027f0 <state_motor+0x224>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2200      	movs	r2, #0
 8002680:	625a      	str	r2, [r3, #36]	; 0x24
			if(r1 > 0){
 8002682:	4b5d      	ldr	r3, [pc, #372]	; (80027f8 <state_motor+0x22c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f04f 0100 	mov.w	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fc46 	bl	8000f1c <__aeabi_fcmpgt>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d015      	beq.n	80026c2 <state_motor+0xf6>
				PID(); // controlador
 8002696:	f7ff f9a7 	bl	80019e8 <PID>
				revoluciones = (1/u) * 100;
 800269a:	4b58      	ldr	r3, [pc, #352]	; (80027fc <state_motor+0x230>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80026a4:	f7fe fb32 	bl	8000d0c <__aeabi_fdiv>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4955      	ldr	r1, [pc, #340]	; (8002800 <state_motor+0x234>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fa79 	bl	8000ba4 <__aeabi_fmul>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fc3b 	bl	8000f30 <__aeabi_f2uiz>
 80026ba:	4603      	mov	r3, r0
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4b51      	ldr	r3, [pc, #324]	; (8002804 <state_motor+0x238>)
 80026c0:	701a      	strb	r2, [r3, #0]
			}
		}

		if((actual - anterior) == 1 || (actual - anterior) == -3 ){
 80026c2:	4b48      	ldr	r3, [pc, #288]	; (80027e4 <state_motor+0x218>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <state_motor+0x21c>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d008      	beq.n	80026e4 <state_motor+0x118>
 80026d2:	4b44      	ldr	r3, [pc, #272]	; (80027e4 <state_motor+0x218>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b43      	ldr	r3, [pc, #268]	; (80027e8 <state_motor+0x21c>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f113 0f03 	cmn.w	r3, #3
 80026e2:	d108      	bne.n	80026f6 <state_motor+0x12a>

			move = derecha;
 80026e4:	4b48      	ldr	r3, [pc, #288]	; (8002808 <state_motor+0x23c>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
			distancia += 1;
 80026ea:	4b48      	ldr	r3, [pc, #288]	; (800280c <state_motor+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	4a46      	ldr	r2, [pc, #280]	; (800280c <state_motor+0x240>)
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	e018      	b.n	8002728 <state_motor+0x15c>

		}else if( (actual - anterior) == -1 || (actual - anterior) == 3 ){
 80026f6:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <state_motor+0x218>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <state_motor+0x21c>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d007      	beq.n	8002718 <state_motor+0x14c>
 8002708:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <state_motor+0x218>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <state_motor+0x21c>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b03      	cmp	r3, #3
 8002716:	d107      	bne.n	8002728 <state_motor+0x15c>

			move = izquierda;
 8002718:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <state_motor+0x23c>)
 800271a:	2202      	movs	r2, #2
 800271c:	701a      	strb	r2, [r3, #0]
			distancia -= 1;
 800271e:	4b3b      	ldr	r3, [pc, #236]	; (800280c <state_motor+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3b01      	subs	r3, #1
 8002724:	4a39      	ldr	r2, [pc, #228]	; (800280c <state_motor+0x240>)
 8002726:	6013      	str	r3, [r2, #0]

		}

		anterior = actual;
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <state_motor+0x218>)
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <state_motor+0x21c>)
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	e030      	b.n	8002794 <state_motor+0x1c8>

	}else if( __HAL_TIM_GET_COUNTER(&htim3) > 19000 ){
 8002732:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <state_motor+0x224>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	f644 2238 	movw	r2, #19000	; 0x4a38
 800273c:	4293      	cmp	r3, r2
 800273e:	d929      	bls.n	8002794 <state_motor+0x1c8>

		move = stop;
 8002740:	4b31      	ldr	r3, [pc, #196]	; (8002808 <state_motor+0x23c>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
		velocidad = 0;
 8002746:	4b32      	ldr	r3, [pc, #200]	; (8002810 <state_motor+0x244>)
 8002748:	2200      	movs	r2, #0
 800274a:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim3,0);
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <state_motor+0x224>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2200      	movs	r2, #0
 8002752:	625a      	str	r2, [r3, #36]	; 0x24

		if(r1 > 0){
 8002754:	4b28      	ldr	r3, [pc, #160]	; (80027f8 <state_motor+0x22c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f04f 0100 	mov.w	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe fbdd 	bl	8000f1c <__aeabi_fcmpgt>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <state_motor+0x1c8>
			PID(); // controlador
 8002768:	f7ff f93e 	bl	80019e8 <PID>
			revoluciones = (1/u) * 100;
 800276c:	4b23      	ldr	r3, [pc, #140]	; (80027fc <state_motor+0x230>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4619      	mov	r1, r3
 8002772:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002776:	f7fe fac9 	bl	8000d0c <__aeabi_fdiv>
 800277a:	4603      	mov	r3, r0
 800277c:	4920      	ldr	r1, [pc, #128]	; (8002800 <state_motor+0x234>)
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fa10 	bl	8000ba4 <__aeabi_fmul>
 8002784:	4603      	mov	r3, r0
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fbd2 	bl	8000f30 <__aeabi_f2uiz>
 800278c:	4603      	mov	r3, r0
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <state_motor+0x238>)
 8002792:	701a      	strb	r2, [r3, #0]
		}

	}

	if(pulsos == 0 || !start ){
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <state_motor+0x220>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <state_motor+0x1d8>
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <state_motor+0x248>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d106      	bne.n	80027b2 <state_motor+0x1e6>
		uint16_t porcent = (200 * 50/100 );
 80027a4:	2364      	movs	r3, #100	; 0x64
 80027a6:	80bb      	strh	r3, [r7, #4]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, porcent);
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <state_motor+0x24c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	88ba      	ldrh	r2, [r7, #4]
 80027ae:	635a      	str	r2, [r3, #52]	; 0x34
	if(pulsos == 0 || !start ){
 80027b0:	e010      	b.n	80027d4 <state_motor+0x208>
	}else{
		uint16_t porcent = (200 * revoluciones/100 );
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <state_motor+0x238>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	23c8      	movs	r3, #200	; 0xc8
 80027ba:	fb03 f302 	mul.w	r3, r3, r2
 80027be:	4a17      	ldr	r2, [pc, #92]	; (800281c <state_motor+0x250>)
 80027c0:	fb82 1203 	smull	r1, r2, r2, r3
 80027c4:	1152      	asrs	r2, r2, #5
 80027c6:	17db      	asrs	r3, r3, #31
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, porcent);
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <state_motor+0x24c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	88fa      	ldrh	r2, [r7, #6]
 80027d2:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd90      	pop	{r4, r7, pc}
 80027dc:	200006bc 	.word	0x200006bc
 80027e0:	40010c00 	.word	0x40010c00
 80027e4:	2000080a 	.word	0x2000080a
 80027e8:	2000080b 	.word	0x2000080b
 80027ec:	20000858 	.word	0x20000858
 80027f0:	200006c0 	.word	0x200006c0
 80027f4:	20000004 	.word	0x20000004
 80027f8:	200006b0 	.word	0x200006b0
 80027fc:	200006a4 	.word	0x200006a4
 8002800:	42c80000 	.word	0x42c80000
 8002804:	2000080c 	.word	0x2000080c
 8002808:	20000785 	.word	0x20000785
 800280c:	2000085c 	.word	0x2000085c
 8002810:	200001b4 	.word	0x200001b4
 8002814:	200001b6 	.word	0x200001b6
 8002818:	200007c0 	.word	0x200007c0
 800281c:	51eb851f 	.word	0x51eb851f

08002820 <detect_vel>:

void detect_vel(){
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0

	if(   ((20000/delta_time) - velocidad ) < 15 &&
 8002824:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <detect_vel+0x94>)
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800282e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002832:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <detect_vel+0x98>)
 8002834:	8812      	ldrh	r2, [r2, #0]
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	2b0e      	cmp	r3, #14
 800283a:	dc38      	bgt.n	80028ae <detect_vel+0x8e>
		  ((20000/delta_time) - velocidad ) > (-15) ){
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <detect_vel+0x94>)
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002846:	fb93 f3f2 	sdiv	r3, r3, r2
 800284a:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <detect_vel+0x98>)
 800284c:	8812      	ldrh	r2, [r2, #0]
 800284e:	1a9b      	subs	r3, r3, r2
	if(   ((20000/delta_time) - velocidad ) < 15 &&
 8002850:	f113 0f0e 	cmn.w	r3, #14
 8002854:	db2b      	blt.n	80028ae <detect_vel+0x8e>

	  velocidad = (uint16_t) ((velocidad + (20000/delta_time))/2);
 8002856:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <detect_vel+0x98>)
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <detect_vel+0x94>)
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002866:	fb93 f3f1 	sdiv	r3, r3, r1
 800286a:	4413      	add	r3, r2
 800286c:	0fda      	lsrs	r2, r3, #31
 800286e:	4413      	add	r3, r2
 8002870:	105b      	asrs	r3, r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <detect_vel+0x98>)
 8002876:	801a      	strh	r2, [r3, #0]
	  v1 = ((v1 + (20000/delta_time))/2);
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <detect_vel+0x94>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002882:	fb93 f3f2 	sdiv	r3, r3, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe f938 	bl	8000afc <__aeabi_i2f>
 800288c:	4602      	mov	r2, r0
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <detect_vel+0x9c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	4610      	mov	r0, r2
 8002896:	f7fe f87d 	bl	8000994 <__addsf3>
 800289a:	4603      	mov	r3, r0
 800289c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fa33 	bl	8000d0c <__aeabi_fdiv>
 80028a6:	4603      	mov	r3, r0
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b04      	ldr	r3, [pc, #16]	; (80028bc <detect_vel+0x9c>)
 80028ac:	601a      	str	r2, [r3, #0]

	}
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000004 	.word	0x20000004
 80028b8:	200001b4 	.word	0x200001b4
 80028bc:	20000674 	.word	0x20000674

080028c0 <resiveRx>:

// agragar función a USB_DEVICE_cdc_if CON __WEAK
void resiveRx(uint8_t* Buf, uint32_t *Len ){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]

	memcpy( &dataResiveSerial, Buf, Buf[2] + 5);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3302      	adds	r3, #2
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	3305      	adds	r3, #5
 80028d2:	461a      	mov	r2, r3
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4808      	ldr	r0, [pc, #32]	; (80028f8 <resiveRx+0x38>)
 80028d8:	f007 fd74 	bl	800a3c4 <memcpy>
	lenBuffer = dataResiveSerial[2];
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <resiveRx+0x38>)
 80028de:	789b      	ldrb	r3, [r3, #2]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <resiveRx+0x3c>)
 80028e6:	601a      	str	r2, [r3, #0]
	resive_protocol = GPIO_PIN_SET;
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <resiveRx+0x40>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]

}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000708 	.word	0x20000708
 80028fc:	200007bc 	.word	0x200007bc
 8002900:	2000045d 	.word	0x2000045d

08002904 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d134      	bne.n	8002980 <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		read = 1;
 8002916:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]

		counterTime += 1;
 800291c:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002924:	6013      	str	r3, [r2, #0]

		if(counterTime > 19999){
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800292e:	4293      	cmp	r3, r2
 8002930:	d908      	bls.n	8002944 <HAL_TIM_PeriodElapsedCallback+0x40>
			waitTime += 1;
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	3301      	adds	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	4b16      	ldr	r3, [pc, #88]	; (8002994 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800293c:	801a      	strh	r2, [r3, #0]
			counterTime = 0;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
		}

		if( tiempo_motor > 0 && revoluciones != 50){
 8002944:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d015      	beq.n	8002978 <HAL_TIM_PeriodElapsedCallback+0x74>
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b32      	cmp	r3, #50	; 0x32
 8002952:	d011      	beq.n	8002978 <HAL_TIM_PeriodElapsedCallback+0x74>
			counter_motor_time += 1;
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800295c:	6013      	str	r3, [r2, #0]
			if(counter_motor_time > 19){
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b13      	cmp	r3, #19
 8002964:	d90c      	bls.n	8002980 <HAL_TIM_PeriodElapsedCallback+0x7c>
				tiempo_motor --;
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3b01      	subs	r3, #1
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800296e:	6013      	str	r3, [r2, #0]
				counter_motor_time = 0;
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
			if(counter_motor_time > 19){
 8002976:	e003      	b.n	8002980 <HAL_TIM_PeriodElapsedCallback+0x7c>
			}
		}else{
			counter_motor_time = 0;
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800297e:	e7ff      	b.n	8002980 <HAL_TIM_PeriodElapsedCallback+0x7c>
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000000 	.word	0x20000000
 8002990:	200001a8 	.word	0x200001a8
 8002994:	20000560 	.word	0x20000560
 8002998:	200006b8 	.word	0x200006b8
 800299c:	2000080c 	.word	0x2000080c
 80029a0:	200001b0 	.word	0x200001b0

080029a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029aa:	e7fe      	b.n	80029aa <Error_Handler+0x6>

080029ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_MspInit+0x5c>)
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <HAL_MspInit+0x5c>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6193      	str	r3, [r2, #24]
 80029be:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_MspInit+0x5c>)
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ca:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <HAL_MspInit+0x5c>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <HAL_MspInit+0x5c>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d4:	61d3      	str	r3, [r2, #28]
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_MspInit+0x5c>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029e2:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <HAL_MspInit+0x60>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <HAL_MspInit+0x60>)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40010000 	.word	0x40010000

08002a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a23      	ldr	r2, [pc, #140]	; (8002aac <HAL_TIM_Base_MspInit+0x9c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d10c      	bne.n	8002a3c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a22:	4b23      	ldr	r3, [pc, #140]	; (8002ab0 <HAL_TIM_Base_MspInit+0xa0>)
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <HAL_TIM_Base_MspInit+0xa0>)
 8002a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a2c:	6193      	str	r3, [r2, #24]
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_TIM_Base_MspInit+0xa0>)
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a3a:	e032      	b.n	8002aa2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d114      	bne.n	8002a70 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a46:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <HAL_TIM_Base_MspInit+0xa0>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <HAL_TIM_Base_MspInit+0xa0>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	61d3      	str	r3, [r2, #28]
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_TIM_Base_MspInit+0xa0>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2100      	movs	r1, #0
 8002a62:	201c      	movs	r0, #28
 8002a64:	f000 fa07 	bl	8002e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a68:	201c      	movs	r0, #28
 8002a6a:	f000 fa20 	bl	8002eae <HAL_NVIC_EnableIRQ>
}
 8002a6e:	e018      	b.n	8002aa2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <HAL_TIM_Base_MspInit+0xa4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d113      	bne.n	8002aa2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_TIM_Base_MspInit+0xa0>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <HAL_TIM_Base_MspInit+0xa0>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	61d3      	str	r3, [r2, #28]
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <HAL_TIM_Base_MspInit+0xa0>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	201d      	movs	r0, #29
 8002a98:	f000 f9ed 	bl	8002e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a9c:	201d      	movs	r0, #29
 8002a9e:	f000 fa06 	bl	8002eae <HAL_NVIC_EnableIRQ>
}
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40012c00 	.word	0x40012c00
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40000400 	.word	0x40000400

08002ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 0310 	add.w	r3, r7, #16
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <HAL_TIM_MspPostInit+0x5c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d118      	bne.n	8002b0a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <HAL_TIM_MspPostInit+0x60>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <HAL_TIM_MspPostInit+0x60>)
 8002ade:	f043 0304 	orr.w	r3, r3, #4
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <HAL_TIM_MspPostInit+0x60>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	2302      	movs	r3, #2
 8002afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afe:	f107 0310 	add.w	r3, r7, #16
 8002b02:	4619      	mov	r1, r3
 8002b04:	4805      	ldr	r0, [pc, #20]	; (8002b1c <HAL_TIM_MspPostInit+0x64>)
 8002b06:	f000 f9ed 	bl	8002ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b0a:	bf00      	nop
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40010800 	.word	0x40010800

08002b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <NMI_Handler+0x4>

08002b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2a:	e7fe      	b.n	8002b2a <HardFault_Handler+0x4>

08002b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <MemManage_Handler+0x4>

08002b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b36:	e7fe      	b.n	8002b36 <BusFault_Handler+0x4>

08002b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <UsageFault_Handler+0x4>

08002b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b66:	f000 f893 	bl	8002c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002b76:	f000 fc6f 	bl	8003458 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	200014f8 	.word	0x200014f8

08002b84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <TIM2_IRQHandler+0x10>)
 8002b8a:	f002 fd3d 	bl	8005608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000810 	.word	0x20000810

08002b98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b9c:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <TIM3_IRQHandler+0x10>)
 8002b9e:	f002 fd33 	bl	8005608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200006c0 	.word	0x200006c0

08002bac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002bb8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002bba:	e003      	b.n	8002bc4 <LoopCopyDataInit>

08002bbc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002bbe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002bc0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002bc2:	3104      	adds	r1, #4

08002bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002bc4:	480a      	ldr	r0, [pc, #40]	; (8002bf0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002bc8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002bca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002bcc:	d3f6      	bcc.n	8002bbc <CopyDataInit>
  ldr r2, =_sbss
 8002bce:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002bd0:	e002      	b.n	8002bd8 <LoopFillZerobss>

08002bd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002bd4:	f842 3b04 	str.w	r3, [r2], #4

08002bd8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002bda:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002bdc:	d3f9      	bcc.n	8002bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bde:	f7ff ffe5 	bl	8002bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002be2:	f007 fbcb 	bl	800a37c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002be6:	f7ff f8a7 	bl	8001d38 <main>
  bx lr
 8002bea:	4770      	bx	lr
  ldr r3, =_sidata
 8002bec:	0800a478 	.word	0x0800a478
  ldr r0, =_sdata
 8002bf0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002bf4:	20000184 	.word	0x20000184
  ldr r2, =_sbss
 8002bf8:	20000184 	.word	0x20000184
  ldr r3, = _ebss
 8002bfc:	200017e4 	.word	0x200017e4

08002c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c00:	e7fe      	b.n	8002c00 <ADC1_2_IRQHandler>
	...

08002c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_Init+0x28>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a07      	ldr	r2, [pc, #28]	; (8002c2c <HAL_Init+0x28>)
 8002c0e:	f043 0310 	orr.w	r3, r3, #16
 8002c12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c14:	2003      	movs	r0, #3
 8002c16:	f000 f923 	bl	8002e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f000 f808 	bl	8002c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c20:	f7ff fec4 	bl	80029ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40022000 	.word	0x40022000

08002c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_InitTick+0x54>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_InitTick+0x58>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f93b 	bl	8002eca <HAL_SYSTICK_Config>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00e      	b.n	8002c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b0f      	cmp	r3, #15
 8002c62:	d80a      	bhi.n	8002c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c64:	2200      	movs	r2, #0
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	f000 f903 	bl	8002e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c70:	4a06      	ldr	r2, [pc, #24]	; (8002c8c <HAL_InitTick+0x5c>)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20000008 	.word	0x20000008
 8002c88:	20000010 	.word	0x20000010
 8002c8c:	2000000c 	.word	0x2000000c

08002c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_IncTick+0x1c>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_IncTick+0x20>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4a03      	ldr	r2, [pc, #12]	; (8002cb0 <HAL_IncTick+0x20>)
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	20000010 	.word	0x20000010
 8002cb0:	20000860 	.word	0x20000860

08002cb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb8:	4b02      	ldr	r3, [pc, #8]	; (8002cc4 <HAL_GetTick+0x10>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	20000860 	.word	0x20000860

08002cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfa:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	60d3      	str	r3, [r2, #12]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <__NVIC_GetPriorityGrouping+0x18>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	f003 0307 	and.w	r3, r3, #7
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db0b      	blt.n	8002d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	f003 021f 	and.w	r2, r3, #31
 8002d44:	4906      	ldr	r1, [pc, #24]	; (8002d60 <__NVIC_EnableIRQ+0x34>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	; (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	; (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
         );
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e2c:	d301      	bcc.n	8002e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e00f      	b.n	8002e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e32:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <SysTick_Config+0x40>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3a:	210f      	movs	r1, #15
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	f7ff ff90 	bl	8002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <SysTick_Config+0x40>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <SysTick_Config+0x40>)
 8002e4c:	2207      	movs	r2, #7
 8002e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	e000e010 	.word	0xe000e010

08002e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ff2d 	bl	8002cc8 <__NVIC_SetPriorityGrouping>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e88:	f7ff ff42 	bl	8002d10 <__NVIC_GetPriorityGrouping>
 8002e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f7ff ff90 	bl	8002db8 <NVIC_EncodePriority>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff5f 	bl	8002d64 <__NVIC_SetPriority>
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff35 	bl	8002d2c <__NVIC_EnableIRQ>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ffa2 	bl	8002e1c <SysTick_Config>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b08b      	sub	sp, #44	; 0x2c
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef6:	e127      	b.n	8003148 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ef8:	2201      	movs	r2, #1
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	f040 8116 	bne.w	8003142 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b12      	cmp	r3, #18
 8002f1c:	d034      	beq.n	8002f88 <HAL_GPIO_Init+0xa4>
 8002f1e:	2b12      	cmp	r3, #18
 8002f20:	d80d      	bhi.n	8002f3e <HAL_GPIO_Init+0x5a>
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d02b      	beq.n	8002f7e <HAL_GPIO_Init+0x9a>
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d804      	bhi.n	8002f34 <HAL_GPIO_Init+0x50>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d031      	beq.n	8002f92 <HAL_GPIO_Init+0xae>
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d01c      	beq.n	8002f6c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f32:	e048      	b.n	8002fc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d043      	beq.n	8002fc0 <HAL_GPIO_Init+0xdc>
 8002f38:	2b11      	cmp	r3, #17
 8002f3a:	d01b      	beq.n	8002f74 <HAL_GPIO_Init+0x90>
          break;
 8002f3c:	e043      	b.n	8002fc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f3e:	4a89      	ldr	r2, [pc, #548]	; (8003164 <HAL_GPIO_Init+0x280>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d026      	beq.n	8002f92 <HAL_GPIO_Init+0xae>
 8002f44:	4a87      	ldr	r2, [pc, #540]	; (8003164 <HAL_GPIO_Init+0x280>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d806      	bhi.n	8002f58 <HAL_GPIO_Init+0x74>
 8002f4a:	4a87      	ldr	r2, [pc, #540]	; (8003168 <HAL_GPIO_Init+0x284>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d020      	beq.n	8002f92 <HAL_GPIO_Init+0xae>
 8002f50:	4a86      	ldr	r2, [pc, #536]	; (800316c <HAL_GPIO_Init+0x288>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01d      	beq.n	8002f92 <HAL_GPIO_Init+0xae>
          break;
 8002f56:	e036      	b.n	8002fc6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f58:	4a85      	ldr	r2, [pc, #532]	; (8003170 <HAL_GPIO_Init+0x28c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d019      	beq.n	8002f92 <HAL_GPIO_Init+0xae>
 8002f5e:	4a85      	ldr	r2, [pc, #532]	; (8003174 <HAL_GPIO_Init+0x290>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d016      	beq.n	8002f92 <HAL_GPIO_Init+0xae>
 8002f64:	4a84      	ldr	r2, [pc, #528]	; (8003178 <HAL_GPIO_Init+0x294>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_GPIO_Init+0xae>
          break;
 8002f6a:	e02c      	b.n	8002fc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	623b      	str	r3, [r7, #32]
          break;
 8002f72:	e028      	b.n	8002fc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	623b      	str	r3, [r7, #32]
          break;
 8002f7c:	e023      	b.n	8002fc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	3308      	adds	r3, #8
 8002f84:	623b      	str	r3, [r7, #32]
          break;
 8002f86:	e01e      	b.n	8002fc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	623b      	str	r3, [r7, #32]
          break;
 8002f90:	e019      	b.n	8002fc6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	623b      	str	r3, [r7, #32]
          break;
 8002f9e:	e012      	b.n	8002fc6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d105      	bne.n	8002fb4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fa8:	2308      	movs	r3, #8
 8002faa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	611a      	str	r2, [r3, #16]
          break;
 8002fb2:	e008      	b.n	8002fc6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	615a      	str	r2, [r3, #20]
          break;
 8002fbe:	e002      	b.n	8002fc6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	623b      	str	r3, [r7, #32]
          break;
 8002fc4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2bff      	cmp	r3, #255	; 0xff
 8002fca:	d801      	bhi.n	8002fd0 <HAL_GPIO_Init+0xec>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	e001      	b.n	8002fd4 <HAL_GPIO_Init+0xf0>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2bff      	cmp	r3, #255	; 0xff
 8002fda:	d802      	bhi.n	8002fe2 <HAL_GPIO_Init+0xfe>
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	e002      	b.n	8002fe8 <HAL_GPIO_Init+0x104>
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	3b08      	subs	r3, #8
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	210f      	movs	r1, #15
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	6a39      	ldr	r1, [r7, #32]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	431a      	orrs	r2, r3
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8096 	beq.w	8003142 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003016:	4b59      	ldr	r3, [pc, #356]	; (800317c <HAL_GPIO_Init+0x298>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	4a58      	ldr	r2, [pc, #352]	; (800317c <HAL_GPIO_Init+0x298>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6193      	str	r3, [r2, #24]
 8003022:	4b56      	ldr	r3, [pc, #344]	; (800317c <HAL_GPIO_Init+0x298>)
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800302e:	4a54      	ldr	r2, [pc, #336]	; (8003180 <HAL_GPIO_Init+0x29c>)
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	089b      	lsrs	r3, r3, #2
 8003034:	3302      	adds	r3, #2
 8003036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	220f      	movs	r2, #15
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4013      	ands	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4b      	ldr	r2, [pc, #300]	; (8003184 <HAL_GPIO_Init+0x2a0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d013      	beq.n	8003082 <HAL_GPIO_Init+0x19e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a4a      	ldr	r2, [pc, #296]	; (8003188 <HAL_GPIO_Init+0x2a4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00d      	beq.n	800307e <HAL_GPIO_Init+0x19a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a49      	ldr	r2, [pc, #292]	; (800318c <HAL_GPIO_Init+0x2a8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <HAL_GPIO_Init+0x196>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a48      	ldr	r2, [pc, #288]	; (8003190 <HAL_GPIO_Init+0x2ac>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_GPIO_Init+0x192>
 8003072:	2303      	movs	r3, #3
 8003074:	e006      	b.n	8003084 <HAL_GPIO_Init+0x1a0>
 8003076:	2304      	movs	r3, #4
 8003078:	e004      	b.n	8003084 <HAL_GPIO_Init+0x1a0>
 800307a:	2302      	movs	r3, #2
 800307c:	e002      	b.n	8003084 <HAL_GPIO_Init+0x1a0>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_GPIO_Init+0x1a0>
 8003082:	2300      	movs	r3, #0
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	f002 0203 	and.w	r2, r2, #3
 800308a:	0092      	lsls	r2, r2, #2
 800308c:	4093      	lsls	r3, r2
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003094:	493a      	ldr	r1, [pc, #232]	; (8003180 <HAL_GPIO_Init+0x29c>)
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	089b      	lsrs	r3, r3, #2
 800309a:	3302      	adds	r3, #2
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d006      	beq.n	80030bc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030ae:	4b39      	ldr	r3, [pc, #228]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4938      	ldr	r1, [pc, #224]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
 80030ba:	e006      	b.n	80030ca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030bc:	4b35      	ldr	r3, [pc, #212]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	4933      	ldr	r1, [pc, #204]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030d6:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	492e      	ldr	r1, [pc, #184]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
 80030e2:	e006      	b.n	80030f2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030e4:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	4929      	ldr	r1, [pc, #164]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d006      	beq.n	800310c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030fe:	4b25      	ldr	r3, [pc, #148]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	4924      	ldr	r1, [pc, #144]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
 800310a:	e006      	b.n	800311a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800310c:	4b21      	ldr	r3, [pc, #132]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	43db      	mvns	r3, r3
 8003114:	491f      	ldr	r1, [pc, #124]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 8003116:	4013      	ands	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d006      	beq.n	8003134 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003126:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	491a      	ldr	r1, [pc, #104]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	60cb      	str	r3, [r1, #12]
 8003132:	e006      	b.n	8003142 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003134:	4b17      	ldr	r3, [pc, #92]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	43db      	mvns	r3, r3
 800313c:	4915      	ldr	r1, [pc, #84]	; (8003194 <HAL_GPIO_Init+0x2b0>)
 800313e:	4013      	ands	r3, r2
 8003140:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	3301      	adds	r3, #1
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	fa22 f303 	lsr.w	r3, r2, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	f47f aed0 	bne.w	8002ef8 <HAL_GPIO_Init+0x14>
  }
}
 8003158:	bf00      	nop
 800315a:	372c      	adds	r7, #44	; 0x2c
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	10210000 	.word	0x10210000
 8003168:	10110000 	.word	0x10110000
 800316c:	10120000 	.word	0x10120000
 8003170:	10310000 	.word	0x10310000
 8003174:	10320000 	.word	0x10320000
 8003178:	10220000 	.word	0x10220000
 800317c:	40021000 	.word	0x40021000
 8003180:	40010000 	.word	0x40010000
 8003184:	40010800 	.word	0x40010800
 8003188:	40010c00 	.word	0x40010c00
 800318c:	40011000 	.word	0x40011000
 8003190:	40011400 	.word	0x40011400
 8003194:	40010400 	.word	0x40010400

08003198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	887b      	ldrh	r3, [r7, #2]
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	e001      	b.n	80031ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	460b      	mov	r3, r1
 80031d0:	807b      	strh	r3, [r7, #2]
 80031d2:	4613      	mov	r3, r2
 80031d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031d6:	787b      	ldrb	r3, [r7, #1]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031dc:	887a      	ldrh	r2, [r7, #2]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031e2:	e003      	b.n	80031ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031e4:	887b      	ldrh	r3, [r7, #2]
 80031e6:	041a      	lsls	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	611a      	str	r2, [r3, #16]
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f8:	b08b      	sub	sp, #44	; 0x2c
 80031fa:	af06      	add	r7, sp, #24
 80031fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0fd      	b.n	8003404 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f006 fe03 	bl	8009e28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2203      	movs	r2, #3
 8003226:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f003 f817 	bl	8006262 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	687e      	ldr	r6, [r7, #4]
 800323c:	466d      	mov	r5, sp
 800323e:	f106 0410 	add.w	r4, r6, #16
 8003242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	602b      	str	r3, [r5, #0]
 800324a:	1d33      	adds	r3, r6, #4
 800324c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800324e:	6838      	ldr	r0, [r7, #0]
 8003250:	f002 ffe1 	bl	8006216 <USB_CoreInit>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0ce      	b.n	8003404 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f003 f812 	bl	8006296 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003272:	2300      	movs	r3, #0
 8003274:	73fb      	strb	r3, [r7, #15]
 8003276:	e04c      	b.n	8003312 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	440b      	add	r3, r1
 8003288:	3301      	adds	r3, #1
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	440b      	add	r3, r1
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	b298      	uxth	r0, r3
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	3336      	adds	r3, #54	; 0x36
 80032b6:	4602      	mov	r2, r0
 80032b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	3303      	adds	r3, #3
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	3338      	adds	r3, #56	; 0x38
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	333c      	adds	r3, #60	; 0x3c
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	440b      	add	r3, r1
 8003306:	3340      	adds	r3, #64	; 0x40
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	3301      	adds	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	429a      	cmp	r2, r3
 800331a:	d3ad      	bcc.n	8003278 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e044      	b.n	80033ac <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	440b      	add	r3, r1
 8003330:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	440b      	add	r3, r1
 8003346:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800334a:	7bfa      	ldrb	r2, [r7, #15]
 800334c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	440b      	add	r3, r1
 800335c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	440b      	add	r3, r1
 8003388:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	440b      	add	r3, r1
 800339e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	3301      	adds	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d3b5      	bcc.n	8003322 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	687e      	ldr	r6, [r7, #4]
 80033be:	466d      	mov	r5, sp
 80033c0:	f106 0410 	add.w	r4, r6, #16
 80033c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	602b      	str	r3, [r5, #0]
 80033cc:	1d33      	adds	r3, r6, #4
 80033ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033d0:	6838      	ldr	r0, [r7, #0]
 80033d2:	f002 ff6c 	bl	80062ae <USB_DevInit>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e00d      	b.n	8003404 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f004 ff07 	bl	8008210 <USB_DevDisconnect>

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800340c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_PCD_Start+0x16>
 800341e:	2302      	movs	r3, #2
 8003420:	e016      	b.n	8003450 <HAL_PCD_Start+0x44>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f002 ff01 	bl	8006236 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003434:	2101      	movs	r1, #1
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f006 ff69 	bl	800a30e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f004 fedb 	bl	80081fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f004 fedd 	bl	8008224 <USB_ReadInterrupts>
 800346a:	4603      	mov	r3, r0
 800346c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003474:	d102      	bne.n	800347c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fb61 	bl	8003b3e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f004 fecf 	bl	8008224 <USB_ReadInterrupts>
 8003486:	4603      	mov	r3, r0
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003490:	d112      	bne.n	80034b8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800349a:	b29a      	uxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a4:	b292      	uxth	r2, r2
 80034a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f006 fd37 	bl	8009f1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80034b0:	2100      	movs	r1, #0
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f925 	bl	8003702 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f004 feb1 	bl	8008224 <USB_ReadInterrupts>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034cc:	d10b      	bne.n	80034e6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034e0:	b292      	uxth	r2, r2
 80034e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f004 fe9a 	bl	8008224 <USB_ReadInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034fa:	d10b      	bne.n	8003514 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003504:	b29a      	uxth	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800350e:	b292      	uxth	r2, r2
 8003510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f004 fe83 	bl	8008224 <USB_ReadInterrupts>
 800351e:	4603      	mov	r3, r0
 8003520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003528:	d126      	bne.n	8003578 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003532:	b29a      	uxth	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0204 	bic.w	r2, r2, #4
 800353c:	b292      	uxth	r2, r2
 800353e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800354a:	b29a      	uxth	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0208 	bic.w	r2, r2, #8
 8003554:	b292      	uxth	r2, r2
 8003556:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f006 fd18 	bl	8009f90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003572:	b292      	uxth	r2, r2
 8003574:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f004 fe51 	bl	8008224 <USB_ReadInterrupts>
 8003582:	4603      	mov	r3, r0
 8003584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358c:	f040 8084 	bne.w	8003698 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003590:	2300      	movs	r3, #0
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e011      	b.n	80035ba <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	7ffb      	ldrb	r3, [r7, #31]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	441a      	add	r2, r3
 80035a2:	7ffb      	ldrb	r3, [r7, #31]
 80035a4:	8812      	ldrh	r2, [r2, #0]
 80035a6:	b292      	uxth	r2, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	f107 0120 	add.w	r1, r7, #32
 80035ae:	440b      	add	r3, r1
 80035b0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80035b4:	7ffb      	ldrb	r3, [r7, #31]
 80035b6:	3301      	adds	r3, #1
 80035b8:	77fb      	strb	r3, [r7, #31]
 80035ba:	7ffb      	ldrb	r3, [r7, #31]
 80035bc:	2b07      	cmp	r3, #7
 80035be:	d9ea      	bls.n	8003596 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	b292      	uxth	r2, r2
 80035d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0201 	bic.w	r2, r2, #1
 80035ea:	b292      	uxth	r2, r2
 80035ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80035f0:	bf00      	nop
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f6      	beq.n	80035f2 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800360c:	b29a      	uxth	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003616:	b292      	uxth	r2, r2
 8003618:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e010      	b.n	8003644 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003622:	7ffb      	ldrb	r3, [r7, #31]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	4611      	mov	r1, r2
 800362a:	7ffa      	ldrb	r2, [r7, #31]
 800362c:	0092      	lsls	r2, r2, #2
 800362e:	440a      	add	r2, r1
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	f107 0120 	add.w	r1, r7, #32
 8003636:	440b      	add	r3, r1
 8003638:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800363c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800363e:	7ffb      	ldrb	r3, [r7, #31]
 8003640:	3301      	adds	r3, #1
 8003642:	77fb      	strb	r3, [r7, #31]
 8003644:	7ffb      	ldrb	r3, [r7, #31]
 8003646:	2b07      	cmp	r3, #7
 8003648:	d9eb      	bls.n	8003622 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003652:	b29a      	uxth	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0208 	orr.w	r2, r2, #8
 800365c:	b292      	uxth	r2, r2
 800365e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003674:	b292      	uxth	r2, r2
 8003676:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003682:	b29a      	uxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0204 	orr.w	r2, r2, #4
 800368c:	b292      	uxth	r2, r2
 800368e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f006 fc62 	bl	8009f5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f004 fdc1 	bl	8008224 <USB_ReadInterrupts>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ac:	d10e      	bne.n	80036cc <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036c0:	b292      	uxth	r2, r2
 80036c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f006 fc1b 	bl	8009f02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f004 fda7 	bl	8008224 <USB_ReadInterrupts>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e0:	d10b      	bne.n	80036fa <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f4:	b292      	uxth	r2, r2
 80036f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80036fa:	bf00      	nop
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_PCD_SetAddress+0x1a>
 8003718:	2302      	movs	r3, #2
 800371a:	e013      	b.n	8003744 <HAL_PCD_SetAddress+0x42>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f004 fd4e 	bl	80081d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	4608      	mov	r0, r1
 8003756:	4611      	mov	r1, r2
 8003758:	461a      	mov	r2, r3
 800375a:	4603      	mov	r3, r0
 800375c:	70fb      	strb	r3, [r7, #3]
 800375e:	460b      	mov	r3, r1
 8003760:	803b      	strh	r3, [r7, #0]
 8003762:	4613      	mov	r3, r2
 8003764:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800376a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800376e:	2b00      	cmp	r3, #0
 8003770:	da0e      	bge.n	8003790 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	705a      	strb	r2, [r3, #1]
 800378e:	e00e      	b.n	80037ae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	f003 0207 	and.w	r2, r3, #7
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037ba:	883a      	ldrh	r2, [r7, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	78ba      	ldrb	r2, [r7, #2]
 80037c4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	785b      	ldrb	r3, [r3, #1]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037d8:	78bb      	ldrb	r3, [r7, #2]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d102      	bne.n	80037e4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_PCD_EP_Open+0xa6>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e00e      	b.n	8003810 <HAL_PCD_EP_Open+0xc4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68f9      	ldr	r1, [r7, #12]
 8003800:	4618      	mov	r0, r3
 8003802:	f002 fd75 	bl	80062f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800380e:	7afb      	ldrb	r3, [r7, #11]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003828:	2b00      	cmp	r3, #0
 800382a:	da0e      	bge.n	800384a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	705a      	strb	r2, [r3, #1]
 8003848:	e00e      	b.n	8003868 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	f003 0207 	and.w	r2, r3, #7
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	b2da      	uxtb	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_PCD_EP_Close+0x6a>
 800387e:	2302      	movs	r3, #2
 8003880:	e00e      	b.n	80038a0 <HAL_PCD_EP_Close+0x88>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68f9      	ldr	r1, [r7, #12]
 8003890:	4618      	mov	r0, r3
 8003892:	f003 f897 	bl	80069c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	460b      	mov	r3, r1
 80038b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b8:	7afb      	ldrb	r3, [r7, #11]
 80038ba:	f003 0207 	and.w	r2, r3, #7
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4413      	add	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2200      	movs	r2, #0
 80038e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2200      	movs	r2, #0
 80038e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e8:	7afb      	ldrb	r3, [r7, #11]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038f4:	7afb      	ldrb	r3, [r7, #11]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6979      	ldr	r1, [r7, #20]
 8003904:	4618      	mov	r0, r3
 8003906:	f003 fa49 	bl	8006d9c <USB_EPStartXfer>
 800390a:	e005      	b.n	8003918 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6979      	ldr	r1, [r7, #20]
 8003912:	4618      	mov	r0, r3
 8003914:	f003 fa42 	bl	8006d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	f003 0207 	and.w	r2, r3, #7
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	440b      	add	r3, r1
 8003940:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003944:	681b      	ldr	r3, [r3, #0]
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr

08003950 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	460b      	mov	r3, r1
 800395e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003960:	7afb      	ldrb	r3, [r7, #11]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2200      	movs	r2, #0
 8003994:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2201      	movs	r2, #1
 800399a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800399c:	7afb      	ldrb	r3, [r7, #11]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039a8:	7afb      	ldrb	r3, [r7, #11]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6979      	ldr	r1, [r7, #20]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f003 f9ef 	bl	8006d9c <USB_EPStartXfer>
 80039be:	e005      	b.n	80039cc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6979      	ldr	r1, [r7, #20]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f003 f9e8 	bl	8006d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	460b      	mov	r3, r1
 80039e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	f003 0207 	and.w	r2, r3, #7
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d901      	bls.n	80039f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e04c      	b.n	8003a8e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	da0e      	bge.n	8003a1a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4413      	add	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	705a      	strb	r2, [r3, #1]
 8003a18:	e00c      	b.n	8003a34 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_PCD_EP_SetStall+0x7e>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e01c      	b.n	8003a8e <HAL_PCD_EP_SetStall+0xb8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68f9      	ldr	r1, [r7, #12]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f004 faba 	bl	8007fdc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d108      	bne.n	8003a84 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f004 fbdf 	bl	8008242 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	f003 020f 	and.w	r2, r3, #15
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d901      	bls.n	8003ab4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e040      	b.n	8003b36 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	da0e      	bge.n	8003ada <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	4413      	add	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	705a      	strb	r2, [r3, #1]
 8003ad8:	e00e      	b.n	8003af8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 0207 	and.w	r2, r3, #7
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_PCD_EP_ClrStall+0x82>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e00e      	b.n	8003b36 <HAL_PCD_EP_ClrStall+0xa0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68f9      	ldr	r1, [r7, #12]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f004 faa8 	bl	800807c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b08e      	sub	sp, #56	; 0x38
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b46:	e2df      	b.n	8004108 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b50:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003b5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f040 8158 	bne.w	8003e18 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d152      	bne.n	8003c18 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	81fb      	strh	r3, [r7, #14]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	89fb      	ldrh	r3, [r7, #14]
 8003b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3328      	adds	r3, #40	; 0x28
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	441a      	add	r2, r3
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f006 f978 	bl	8009ece <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 828e 	beq.w	8004108 <PCD_EP_ISR_Handler+0x5ca>
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f040 8289 	bne.w	8004108 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b292      	uxth	r2, r2
 8003c0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c16:	e277      	b.n	8004108 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d034      	beq.n	8003c9c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4413      	add	r3, r2
 8003c46:	3306      	adds	r3, #6
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f004 fb35 	bl	80082e0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c82:	4013      	ands	r3, r2
 8003c84:	823b      	strh	r3, [r7, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	8a3a      	ldrh	r2, [r7, #16]
 8003c8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c90:	b292      	uxth	r2, r2
 8003c92:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f006 f8ed 	bl	8009e74 <HAL_PCD_SetupStageCallback>
 8003c9a:	e235      	b.n	8004108 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c9c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f280 8231 	bge.w	8004108 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	83bb      	strh	r3, [r7, #28]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	8bba      	ldrh	r2, [r7, #28]
 8003cbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cc0:	b292      	uxth	r2, r2
 8003cc2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3306      	adds	r3, #6
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d019      	beq.n	8003d2c <PCD_EP_ISR_Handler+0x1ee>
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d015      	beq.n	8003d2c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	6959      	ldr	r1, [r3, #20]
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	f004 fae5 	bl	80082e0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	441a      	add	r2, r3
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d24:	2100      	movs	r1, #0
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f006 f8b6 	bl	8009e98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	4413      	add	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d112      	bne.n	8003d7a <PCD_EP_ISR_Handler+0x23c>
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	801a      	strh	r2, [r3, #0]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	801a      	strh	r2, [r3, #0]
 8003d78:	e02f      	b.n	8003dda <PCD_EP_ISR_Handler+0x29c>
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8003d80:	d813      	bhi.n	8003daa <PCD_EP_ISR_Handler+0x26c>
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <PCD_EP_ISR_Handler+0x25e>
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	3301      	adds	r3, #1
 8003d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	029b      	lsls	r3, r3, #10
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	801a      	strh	r2, [r3, #0]
 8003da8:	e017      	b.n	8003dda <PCD_EP_ISR_Handler+0x29c>
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	633b      	str	r3, [r7, #48]	; 0x30
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <PCD_EP_ISR_Handler+0x286>
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	029b      	lsls	r3, r3, #10
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	827b      	strh	r3, [r7, #18]
 8003dec:	8a7b      	ldrh	r3, [r7, #18]
 8003dee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003df2:	827b      	strh	r3, [r7, #18]
 8003df4:	8a7b      	ldrh	r3, [r7, #18]
 8003df6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003dfa:	827b      	strh	r3, [r7, #18]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	8a7b      	ldrh	r3, [r7, #18]
 8003e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	8013      	strh	r3, [r2, #0]
 8003e16:	e177      	b.n	8004108 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e2a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f280 80ea 	bge.w	8004008 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	853b      	strh	r3, [r7, #40]	; 0x28
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e62:	b292      	uxth	r2, r2
 8003e64:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003e66:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	7b1b      	ldrb	r3, [r3, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d122      	bne.n	8003eca <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	3306      	adds	r3, #6
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eac:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003eae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8087 	beq.w	8003fc4 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	6959      	ldr	r1, [r3, #20]
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	88da      	ldrh	r2, [r3, #6]
 8003ec2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ec4:	f004 fa0c 	bl	80082e0 <USB_ReadPMA>
 8003ec8:	e07c      	b.n	8003fc4 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	78db      	ldrb	r3, [r3, #3]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d108      	bne.n	8003ee4 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003ed2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f923 	bl	8004124 <HAL_PCD_EP_DB_Receive>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003ee2:	e06f      	b.n	8003fc4 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	847b      	strh	r3, [r7, #34]	; 0x22
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	441a      	add	r2, r3
 8003f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d021      	beq.n	8003f82 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	3302      	adds	r3, #2
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f66:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003f68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d02a      	beq.n	8003fc4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	6959      	ldr	r1, [r3, #20]
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	891a      	ldrh	r2, [r3, #8]
 8003f7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f7c:	f004 f9b0 	bl	80082e0 <USB_ReadPMA>
 8003f80:	e020      	b.n	8003fc4 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	3306      	adds	r3, #6
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003faa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003fac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	6959      	ldr	r1, [r3, #20]
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	895a      	ldrh	r2, [r3, #10]
 8003fbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fc0:	f004 f98e 	bl	80082e0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fca:	441a      	add	r2, r3
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fd6:	441a      	add	r2, r3
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <PCD_EP_ISR_Handler+0x4b0>
 8003fe4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d206      	bcs.n	8003ffc <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f005 ff4f 	bl	8009e98 <HAL_PCD_DataOutStageCallback>
 8003ffa:	e005      	b.n	8004008 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004002:	4618      	mov	r0, r3
 8004004:	f002 feca 	bl	8006d9c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004008:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d07a      	beq.n	8004108 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004012:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4413      	add	r3, r2
 8004024:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800403c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004040:	843b      	strh	r3, [r7, #32]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	441a      	add	r2, r3
 8004050:	8c3b      	ldrh	r3, [r7, #32]
 8004052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800405a:	b29b      	uxth	r3, r3
 800405c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	78db      	ldrb	r3, [r3, #3]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d108      	bne.n	8004078 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800406a:	2b02      	cmp	r3, #2
 800406c:	d146      	bne.n	80040fc <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800406e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d141      	bne.n	80040fc <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004080:	b29b      	uxth	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	3302      	adds	r3, #2
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	8bfb      	ldrh	r3, [r7, #30]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d906      	bls.n	80040ba <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	8bfb      	ldrh	r3, [r7, #30]
 80040b2:	1ad2      	subs	r2, r2, r3
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	619a      	str	r2, [r3, #24]
 80040b8:	e002      	b.n	80040c0 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	4619      	mov	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f005 fefd 	bl	8009ece <HAL_PCD_DataInStageCallback>
 80040d4:	e018      	b.n	8004108 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	695a      	ldr	r2, [r3, #20]
 80040da:	8bfb      	ldrh	r3, [r7, #30]
 80040dc:	441a      	add	r2, r3
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	8bfb      	ldrh	r3, [r7, #30]
 80040e8:	441a      	add	r2, r3
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040f4:	4618      	mov	r0, r3
 80040f6:	f002 fe51 	bl	8006d9c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80040fa:	e005      	b.n	8004108 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80040fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040fe:	461a      	mov	r2, r3
 8004100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f91b 	bl	800433e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004110:	b29b      	uxth	r3, r3
 8004112:	b21b      	sxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	f6ff ad17 	blt.w	8003b48 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3738      	adds	r7, #56	; 0x38
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	4613      	mov	r3, r2
 8004130:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d07e      	beq.n	800423a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004144:	b29b      	uxth	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4413      	add	r3, r2
 8004150:	3302      	adds	r3, #2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004164:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	8b7b      	ldrh	r3, [r7, #26]
 800416c:	429a      	cmp	r2, r3
 800416e:	d306      	bcc.n	800417e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	699a      	ldr	r2, [r3, #24]
 8004174:	8b7b      	ldrh	r3, [r7, #26]
 8004176:	1ad2      	subs	r2, r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	619a      	str	r2, [r3, #24]
 800417c:	e002      	b.n	8004184 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2200      	movs	r2, #0
 8004182:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d123      	bne.n	80041d4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	b29b      	uxth	r3, r3
 800419e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a6:	833b      	strh	r3, [r7, #24]
 80041a8:	8b3b      	ldrh	r3, [r7, #24]
 80041aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041ae:	833b      	strh	r3, [r7, #24]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	461a      	mov	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	441a      	add	r2, r3
 80041be:	8b3b      	ldrh	r3, [r7, #24]
 80041c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041d4:	88fb      	ldrh	r3, [r7, #6]
 80041d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01f      	beq.n	800421e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f8:	82fb      	strh	r3, [r7, #22]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	441a      	add	r2, r3
 8004208:	8afb      	ldrh	r3, [r7, #22]
 800420a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800420e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004216:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800421a:	b29b      	uxth	r3, r3
 800421c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800421e:	8b7b      	ldrh	r3, [r7, #26]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8087 	beq.w	8004334 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6959      	ldr	r1, [r3, #20]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	891a      	ldrh	r2, [r3, #8]
 8004232:	8b7b      	ldrh	r3, [r7, #26]
 8004234:	f004 f854 	bl	80082e0 <USB_ReadPMA>
 8004238:	e07c      	b.n	8004334 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004242:	b29b      	uxth	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	3306      	adds	r3, #6
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004262:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	8b7b      	ldrh	r3, [r7, #26]
 800426a:	429a      	cmp	r2, r3
 800426c:	d306      	bcc.n	800427c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	8b7b      	ldrh	r3, [r7, #26]
 8004274:	1ad2      	subs	r2, r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	619a      	str	r2, [r3, #24]
 800427a:	e002      	b.n	8004282 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2200      	movs	r2, #0
 8004280:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d123      	bne.n	80042d2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	b29b      	uxth	r3, r3
 800429c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a4:	83fb      	strh	r3, [r7, #30]
 80042a6:	8bfb      	ldrh	r3, [r7, #30]
 80042a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042ac:	83fb      	strh	r3, [r7, #30]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	441a      	add	r2, r3
 80042bc:	8bfb      	ldrh	r3, [r7, #30]
 80042be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d11f      	bne.n	800431c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	83bb      	strh	r3, [r7, #28]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	441a      	add	r2, r3
 8004306:	8bbb      	ldrh	r3, [r7, #28]
 8004308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800430c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004314:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004318:	b29b      	uxth	r3, r3
 800431a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800431c:	8b7b      	ldrh	r3, [r7, #26]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6959      	ldr	r1, [r3, #20]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	895a      	ldrh	r2, [r3, #10]
 800432e:	8b7b      	ldrh	r3, [r7, #26]
 8004330:	f003 ffd6 	bl	80082e0 <USB_ReadPMA>
    }
  }

  return count;
 8004334:	8b7b      	ldrh	r3, [r7, #26]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b092      	sub	sp, #72	; 0x48
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	4613      	mov	r3, r2
 800434a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8132 	beq.w	80045bc <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004360:	b29b      	uxth	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	3302      	adds	r3, #2
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004380:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004388:	429a      	cmp	r2, r3
 800438a:	d906      	bls.n	800439a <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	619a      	str	r2, [r3, #24]
 8004398:	e002      	b.n	80043a0 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d12c      	bne.n	8004402 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	4619      	mov	r1, r3
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f005 fd8d 	bl	8009ece <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 822f 	beq.w	800481e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	827b      	strh	r3, [r7, #18]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	441a      	add	r2, r3
 80043ea:	8a7b      	ldrh	r3, [r7, #18]
 80043ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	8013      	strh	r3, [r2, #0]
 8004400:	e20d      	b.n	800481e <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01f      	beq.n	800444c <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004448:	b29b      	uxth	r3, r3
 800444a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004452:	2b01      	cmp	r3, #1
 8004454:	f040 81e3 	bne.w	800481e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800445e:	441a      	add	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800446a:	441a      	add	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	6a1a      	ldr	r2, [r3, #32]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	429a      	cmp	r2, r3
 800447a:	d309      	bcc.n	8004490 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6a1a      	ldr	r2, [r3, #32]
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	1ad2      	subs	r2, r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	621a      	str	r2, [r3, #32]
 800448e:	e014      	b.n	80044ba <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8004498:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800449a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80044a4:	e009      	b.n	80044ba <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2200      	movs	r2, #0
 80044b8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d155      	bne.n	800456e <HAL_PCD_EP_DB_Transmit+0x230>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	4413      	add	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	011a      	lsls	r2, r3, #4
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	4413      	add	r3, r2
 80044e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d112      	bne.n	8004516 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	801a      	strh	r2, [r3, #0]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800450e:	b29a      	uxth	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	801a      	strh	r2, [r3, #0]
 8004514:	e047      	b.n	80045a6 <HAL_PCD_EP_DB_Transmit+0x268>
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	2b3e      	cmp	r3, #62	; 0x3e
 800451a:	d811      	bhi.n	8004540 <HAL_PCD_EP_DB_Transmit+0x202>
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_PCD_EP_DB_Transmit+0x1f4>
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	3301      	adds	r3, #1
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	b29b      	uxth	r3, r3
 8004536:	029b      	lsls	r3, r3, #10
 8004538:	b29a      	uxth	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	801a      	strh	r2, [r3, #0]
 800453e:	e032      	b.n	80045a6 <HAL_PCD_EP_DB_Transmit+0x268>
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004548:	f003 031f 	and.w	r3, r3, #31
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <HAL_PCD_EP_DB_Transmit+0x218>
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	3b01      	subs	r3, #1
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	b29b      	uxth	r3, r3
 800455a:	029b      	lsls	r3, r3, #10
 800455c:	b29b      	uxth	r3, r3
 800455e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004566:	b29a      	uxth	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	801a      	strh	r2, [r3, #0]
 800456c:	e01b      	b.n	80045a6 <HAL_PCD_EP_DB_Transmit+0x268>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	785b      	ldrb	r3, [r3, #1]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d117      	bne.n	80045a6 <HAL_PCD_EP_DB_Transmit+0x268>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	623b      	str	r3, [r7, #32]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004584:	b29b      	uxth	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	4413      	add	r3, r2
 800458c:	623b      	str	r3, [r7, #32]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	011a      	lsls	r2, r3, #4
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	4413      	add	r3, r2
 8004598:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	6959      	ldr	r1, [r3, #20]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	891a      	ldrh	r2, [r3, #8]
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f003 fe4f 	bl	8008258 <USB_WritePMA>
 80045ba:	e130      	b.n	800481e <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4413      	add	r3, r2
 80045d0:	3306      	adds	r3, #6
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d306      	bcc.n	80045fe <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	699a      	ldr	r2, [r3, #24]
 80045f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80045f6:	1ad2      	subs	r2, r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	619a      	str	r2, [r3, #24]
 80045fc:	e002      	b.n	8004604 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2200      	movs	r2, #0
 8004602:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d12c      	bne.n	8004666 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	4619      	mov	r1, r3
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f005 fc5b 	bl	8009ece <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800461e:	2b00      	cmp	r3, #0
 8004620:	f040 80fd 	bne.w	800481e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	441a      	add	r2, r3
 800464e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800465c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004660:	b29b      	uxth	r3, r3
 8004662:	8013      	strh	r3, [r2, #0]
 8004664:	e0db      	b.n	800481e <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d11f      	bne.n	80046b0 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800469c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	f040 80b1 	bne.w	800481e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046c2:	441a      	add	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046ce:	441a      	add	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	6a1a      	ldr	r2, [r3, #32]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d309      	bcc.n	80046f4 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6a1a      	ldr	r2, [r3, #32]
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	1ad2      	subs	r2, r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	621a      	str	r2, [r3, #32]
 80046f2:	e014      	b.n	800471e <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d106      	bne.n	800470a <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80046fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046fe:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004708:	e009      	b.n	800471e <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2200      	movs	r2, #0
 8004714:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	637b      	str	r3, [r7, #52]	; 0x34
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d155      	bne.n	80047d8 <HAL_PCD_EP_DB_Transmit+0x49a>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	647b      	str	r3, [r7, #68]	; 0x44
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800473a:	b29b      	uxth	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004740:	4413      	add	r3, r2
 8004742:	647b      	str	r3, [r7, #68]	; 0x44
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	011a      	lsls	r2, r3, #4
 800474a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800474c:	4413      	add	r3, r2
 800474e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004752:	643b      	str	r3, [r7, #64]	; 0x40
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	2b00      	cmp	r3, #0
 8004758:	d112      	bne.n	8004780 <HAL_PCD_EP_DB_Transmit+0x442>
 800475a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004764:	b29a      	uxth	r2, r3
 8004766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004768:	801a      	strh	r2, [r3, #0]
 800476a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004778:	b29a      	uxth	r2, r3
 800477a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477c:	801a      	strh	r2, [r3, #0]
 800477e:	e044      	b.n	800480a <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004782:	2b3e      	cmp	r3, #62	; 0x3e
 8004784:	d811      	bhi.n	80047aa <HAL_PCD_EP_DB_Transmit+0x46c>
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800478c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_PCD_EP_DB_Transmit+0x45e>
 8004796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004798:	3301      	adds	r3, #1
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800479c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479e:	b29b      	uxth	r3, r3
 80047a0:	029b      	lsls	r3, r3, #10
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a6:	801a      	strh	r2, [r3, #0]
 80047a8:	e02f      	b.n	800480a <HAL_PCD_EP_DB_Transmit+0x4cc>
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <HAL_PCD_EP_DB_Transmit+0x482>
 80047ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047bc:	3b01      	subs	r3, #1
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	029b      	lsls	r3, r3, #10
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d4:	801a      	strh	r2, [r3, #0]
 80047d6:	e018      	b.n	800480a <HAL_PCD_EP_DB_Transmit+0x4cc>
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d114      	bne.n	800480a <HAL_PCD_EP_DB_Transmit+0x4cc>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ee:	4413      	add	r3, r2
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	011a      	lsls	r2, r3, #4
 80047f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fa:	4413      	add	r3, r2
 80047fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004800:	633b      	str	r3, [r7, #48]	; 0x30
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	b29a      	uxth	r2, r3
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	6959      	ldr	r1, [r3, #20]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	895a      	ldrh	r2, [r3, #10]
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	b29b      	uxth	r3, r3
 800481a:	f003 fd1d 	bl	8008258 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004838:	823b      	strh	r3, [r7, #16]
 800483a:	8a3b      	ldrh	r3, [r7, #16]
 800483c:	f083 0310 	eor.w	r3, r3, #16
 8004840:	823b      	strh	r3, [r7, #16]
 8004842:	8a3b      	ldrh	r3, [r7, #16]
 8004844:	f083 0320 	eor.w	r3, r3, #32
 8004848:	823b      	strh	r3, [r7, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	8a3b      	ldrh	r3, [r7, #16]
 800485a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486a:	b29b      	uxth	r3, r3
 800486c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3748      	adds	r7, #72	; 0x48
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	817b      	strh	r3, [r7, #10]
 8004886:	4613      	mov	r3, r2
 8004888:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800488a:	897b      	ldrh	r3, [r7, #10]
 800488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00b      	beq.n	80048ae <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004896:	897b      	ldrh	r3, [r7, #10]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4413      	add	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	e009      	b.n	80048c2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048ae:	897a      	ldrh	r2, [r7, #10]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80048c2:	893b      	ldrh	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d107      	bne.n	80048d8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2200      	movs	r2, #0
 80048cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	80da      	strh	r2, [r3, #6]
 80048d6:	e00b      	b.n	80048f0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2201      	movs	r2, #1
 80048dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	0c1b      	lsrs	r3, r3, #16
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e26c      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 8087 	beq.w	8004a2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800491c:	4b92      	ldr	r3, [pc, #584]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b04      	cmp	r3, #4
 8004926:	d00c      	beq.n	8004942 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004928:	4b8f      	ldr	r3, [pc, #572]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 030c 	and.w	r3, r3, #12
 8004930:	2b08      	cmp	r3, #8
 8004932:	d112      	bne.n	800495a <HAL_RCC_OscConfig+0x5e>
 8004934:	4b8c      	ldr	r3, [pc, #560]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004940:	d10b      	bne.n	800495a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004942:	4b89      	ldr	r3, [pc, #548]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d06c      	beq.n	8004a28 <HAL_RCC_OscConfig+0x12c>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d168      	bne.n	8004a28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e246      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004962:	d106      	bne.n	8004972 <HAL_RCC_OscConfig+0x76>
 8004964:	4b80      	ldr	r3, [pc, #512]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a7f      	ldr	r2, [pc, #508]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 800496a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	e02e      	b.n	80049d0 <HAL_RCC_OscConfig+0xd4>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10c      	bne.n	8004994 <HAL_RCC_OscConfig+0x98>
 800497a:	4b7b      	ldr	r3, [pc, #492]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a7a      	ldr	r2, [pc, #488]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	4b78      	ldr	r3, [pc, #480]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a77      	ldr	r2, [pc, #476]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 800498c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e01d      	b.n	80049d0 <HAL_RCC_OscConfig+0xd4>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800499c:	d10c      	bne.n	80049b8 <HAL_RCC_OscConfig+0xbc>
 800499e:	4b72      	ldr	r3, [pc, #456]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a71      	ldr	r2, [pc, #452]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	4b6f      	ldr	r3, [pc, #444]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a6e      	ldr	r2, [pc, #440]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 80049b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	e00b      	b.n	80049d0 <HAL_RCC_OscConfig+0xd4>
 80049b8:	4b6b      	ldr	r3, [pc, #428]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a6a      	ldr	r2, [pc, #424]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 80049be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	4b68      	ldr	r3, [pc, #416]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a67      	ldr	r2, [pc, #412]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 80049ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d013      	beq.n	8004a00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d8:	f7fe f96c 	bl	8002cb4 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049e0:	f7fe f968 	bl	8002cb4 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b64      	cmp	r3, #100	; 0x64
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e1fa      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	4b5d      	ldr	r3, [pc, #372]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0xe4>
 80049fe:	e014      	b.n	8004a2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a00:	f7fe f958 	bl	8002cb4 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a08:	f7fe f954 	bl	8002cb4 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b64      	cmp	r3, #100	; 0x64
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e1e6      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a1a:	4b53      	ldr	r3, [pc, #332]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x10c>
 8004a26:	e000      	b.n	8004a2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d063      	beq.n	8004afe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a36:	4b4c      	ldr	r3, [pc, #304]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00b      	beq.n	8004a5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a42:	4b49      	ldr	r3, [pc, #292]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d11c      	bne.n	8004a88 <HAL_RCC_OscConfig+0x18c>
 8004a4e:	4b46      	ldr	r3, [pc, #280]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d116      	bne.n	8004a88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5a:	4b43      	ldr	r3, [pc, #268]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <HAL_RCC_OscConfig+0x176>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d001      	beq.n	8004a72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e1ba      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a72:	4b3d      	ldr	r3, [pc, #244]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4939      	ldr	r1, [pc, #228]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a86:	e03a      	b.n	8004afe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d020      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a90:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <HAL_RCC_OscConfig+0x270>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a96:	f7fe f90d 	bl	8002cb4 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a9e:	f7fe f909 	bl	8002cb4 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e19b      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab0:	4b2d      	ldr	r3, [pc, #180]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004abc:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	4927      	ldr	r1, [pc, #156]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	600b      	str	r3, [r1, #0]
 8004ad0:	e015      	b.n	8004afe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad2:	4b26      	ldr	r3, [pc, #152]	; (8004b6c <HAL_RCC_OscConfig+0x270>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad8:	f7fe f8ec 	bl	8002cb4 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae0:	f7fe f8e8 	bl	8002cb4 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e17a      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af2:	4b1d      	ldr	r3, [pc, #116]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d03a      	beq.n	8004b80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d019      	beq.n	8004b46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b12:	4b17      	ldr	r3, [pc, #92]	; (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b18:	f7fe f8cc 	bl	8002cb4 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b20:	f7fe f8c8 	bl	8002cb4 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e15a      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b32:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f000 faa8 	bl	8005094 <RCC_Delay>
 8004b44:	e01c      	b.n	8004b80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b46:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4c:	f7fe f8b2 	bl	8002cb4 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b52:	e00f      	b.n	8004b74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b54:	f7fe f8ae 	bl	8002cb4 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d908      	bls.n	8004b74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e140      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
 8004b66:	bf00      	nop
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	42420000 	.word	0x42420000
 8004b70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b74:	4b9e      	ldr	r3, [pc, #632]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e9      	bne.n	8004b54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80a6 	beq.w	8004cda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b92:	4b97      	ldr	r3, [pc, #604]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10d      	bne.n	8004bba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9e:	4b94      	ldr	r3, [pc, #592]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	4a93      	ldr	r2, [pc, #588]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	61d3      	str	r3, [r2, #28]
 8004baa:	4b91      	ldr	r3, [pc, #580]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bba:	4b8e      	ldr	r3, [pc, #568]	; (8004df4 <HAL_RCC_OscConfig+0x4f8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d118      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bc6:	4b8b      	ldr	r3, [pc, #556]	; (8004df4 <HAL_RCC_OscConfig+0x4f8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a8a      	ldr	r2, [pc, #552]	; (8004df4 <HAL_RCC_OscConfig+0x4f8>)
 8004bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd2:	f7fe f86f 	bl	8002cb4 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bda:	f7fe f86b 	bl	8002cb4 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b64      	cmp	r3, #100	; 0x64
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0fd      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bec:	4b81      	ldr	r3, [pc, #516]	; (8004df4 <HAL_RCC_OscConfig+0x4f8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f0      	beq.n	8004bda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCC_OscConfig+0x312>
 8004c00:	4b7b      	ldr	r3, [pc, #492]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	4a7a      	ldr	r2, [pc, #488]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6213      	str	r3, [r2, #32]
 8004c0c:	e02d      	b.n	8004c6a <HAL_RCC_OscConfig+0x36e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x334>
 8004c16:	4b76      	ldr	r3, [pc, #472]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	4a75      	ldr	r2, [pc, #468]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	6213      	str	r3, [r2, #32]
 8004c22:	4b73      	ldr	r3, [pc, #460]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	4a72      	ldr	r2, [pc, #456]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c28:	f023 0304 	bic.w	r3, r3, #4
 8004c2c:	6213      	str	r3, [r2, #32]
 8004c2e:	e01c      	b.n	8004c6a <HAL_RCC_OscConfig+0x36e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b05      	cmp	r3, #5
 8004c36:	d10c      	bne.n	8004c52 <HAL_RCC_OscConfig+0x356>
 8004c38:	4b6d      	ldr	r3, [pc, #436]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	4a6c      	ldr	r2, [pc, #432]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c3e:	f043 0304 	orr.w	r3, r3, #4
 8004c42:	6213      	str	r3, [r2, #32]
 8004c44:	4b6a      	ldr	r3, [pc, #424]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	4a69      	ldr	r2, [pc, #420]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	6213      	str	r3, [r2, #32]
 8004c50:	e00b      	b.n	8004c6a <HAL_RCC_OscConfig+0x36e>
 8004c52:	4b67      	ldr	r3, [pc, #412]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	4a66      	ldr	r2, [pc, #408]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	6213      	str	r3, [r2, #32]
 8004c5e:	4b64      	ldr	r3, [pc, #400]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	4a63      	ldr	r2, [pc, #396]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c64:	f023 0304 	bic.w	r3, r3, #4
 8004c68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d015      	beq.n	8004c9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c72:	f7fe f81f 	bl	8002cb4 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c78:	e00a      	b.n	8004c90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7a:	f7fe f81b 	bl	8002cb4 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e0ab      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c90:	4b57      	ldr	r3, [pc, #348]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0ee      	beq.n	8004c7a <HAL_RCC_OscConfig+0x37e>
 8004c9c:	e014      	b.n	8004cc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9e:	f7fe f809 	bl	8002cb4 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca4:	e00a      	b.n	8004cbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7fe f805 	bl	8002cb4 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e095      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cbc:	4b4c      	ldr	r3, [pc, #304]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1ee      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d105      	bne.n	8004cda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cce:	4b48      	ldr	r3, [pc, #288]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	4a47      	ldr	r2, [pc, #284]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 8081 	beq.w	8004de6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ce4:	4b42      	ldr	r3, [pc, #264]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 030c 	and.w	r3, r3, #12
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d061      	beq.n	8004db4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d146      	bne.n	8004d86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf8:	4b3f      	ldr	r3, [pc, #252]	; (8004df8 <HAL_RCC_OscConfig+0x4fc>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfe:	f7fd ffd9 	bl	8002cb4 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d06:	f7fd ffd5 	bl	8002cb4 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e067      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d18:	4b35      	ldr	r3, [pc, #212]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f0      	bne.n	8004d06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2c:	d108      	bne.n	8004d40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d2e:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	492d      	ldr	r1, [pc, #180]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d40:	4b2b      	ldr	r3, [pc, #172]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a19      	ldr	r1, [r3, #32]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	430b      	orrs	r3, r1
 8004d52:	4927      	ldr	r1, [pc, #156]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d58:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <HAL_RCC_OscConfig+0x4fc>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5e:	f7fd ffa9 	bl	8002cb4 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d66:	f7fd ffa5 	bl	8002cb4 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e037      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d78:	4b1d      	ldr	r3, [pc, #116]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x46a>
 8004d84:	e02f      	b.n	8004de6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d86:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <HAL_RCC_OscConfig+0x4fc>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8c:	f7fd ff92 	bl	8002cb4 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fd ff8e 	bl	8002cb4 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e020      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004da6:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x498>
 8004db2:	e018      	b.n	8004de6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e013      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <HAL_RCC_OscConfig+0x4f4>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d001      	beq.n	8004de6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40007000 	.word	0x40007000
 8004df8:	42420060 	.word	0x42420060

08004dfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0d0      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e10:	4b6a      	ldr	r3, [pc, #424]	; (8004fbc <HAL_RCC_ClockConfig+0x1c0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d910      	bls.n	8004e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1e:	4b67      	ldr	r3, [pc, #412]	; (8004fbc <HAL_RCC_ClockConfig+0x1c0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f023 0207 	bic.w	r2, r3, #7
 8004e26:	4965      	ldr	r1, [pc, #404]	; (8004fbc <HAL_RCC_ClockConfig+0x1c0>)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	4b63      	ldr	r3, [pc, #396]	; (8004fbc <HAL_RCC_ClockConfig+0x1c0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e0b8      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d020      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e58:	4b59      	ldr	r3, [pc, #356]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4a58      	ldr	r2, [pc, #352]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e70:	4b53      	ldr	r3, [pc, #332]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	4a52      	ldr	r2, [pc, #328]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e7c:	4b50      	ldr	r3, [pc, #320]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	494d      	ldr	r1, [pc, #308]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d040      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d107      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea2:	4b47      	ldr	r3, [pc, #284]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d115      	bne.n	8004eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e07f      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d107      	bne.n	8004eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eba:	4b41      	ldr	r3, [pc, #260]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d109      	bne.n	8004eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e073      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eca:	4b3d      	ldr	r3, [pc, #244]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e06b      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eda:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f023 0203 	bic.w	r2, r3, #3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	4936      	ldr	r1, [pc, #216]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eec:	f7fd fee2 	bl	8002cb4 <HAL_GetTick>
 8004ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef4:	f7fd fede 	bl	8002cb4 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e053      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0a:	4b2d      	ldr	r3, [pc, #180]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f003 020c 	and.w	r2, r3, #12
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d1eb      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f1c:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <HAL_RCC_ClockConfig+0x1c0>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d210      	bcs.n	8004f4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2a:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <HAL_RCC_ClockConfig+0x1c0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f023 0207 	bic.w	r2, r3, #7
 8004f32:	4922      	ldr	r1, [pc, #136]	; (8004fbc <HAL_RCC_ClockConfig+0x1c0>)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3a:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <HAL_RCC_ClockConfig+0x1c0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d001      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e032      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f58:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4916      	ldr	r1, [pc, #88]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f76:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	490e      	ldr	r1, [pc, #56]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f8a:	f000 f821 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8004f8e:	4601      	mov	r1, r0
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	091b      	lsrs	r3, r3, #4
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f9c:	5cd3      	ldrb	r3, [r2, r3]
 8004f9e:	fa21 f303 	lsr.w	r3, r1, r3
 8004fa2:	4a09      	ldr	r2, [pc, #36]	; (8004fc8 <HAL_RCC_ClockConfig+0x1cc>)
 8004fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fa6:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <HAL_RCC_ClockConfig+0x1d0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fd fe40 	bl	8002c30 <HAL_InitTick>

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40022000 	.word	0x40022000
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	0800a460 	.word	0x0800a460
 8004fc8:	20000008 	.word	0x20000008
 8004fcc:	2000000c 	.word	0x2000000c

08004fd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd0:	b490      	push	{r4, r7}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004fd6:	4b2a      	ldr	r3, [pc, #168]	; (8005080 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004fd8:	1d3c      	adds	r4, r7, #4
 8004fda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004fe0:	4b28      	ldr	r3, [pc, #160]	; (8005084 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61fb      	str	r3, [r7, #28]
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ffa:	4b23      	ldr	r3, [pc, #140]	; (8005088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b04      	cmp	r3, #4
 8005008:	d002      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x40>
 800500a:	2b08      	cmp	r3, #8
 800500c:	d003      	beq.n	8005016 <HAL_RCC_GetSysClockFreq+0x46>
 800500e:	e02d      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005010:	4b1e      	ldr	r3, [pc, #120]	; (800508c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005012:	623b      	str	r3, [r7, #32]
      break;
 8005014:	e02d      	b.n	8005072 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	0c9b      	lsrs	r3, r3, #18
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005022:	4413      	add	r3, r2
 8005024:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005028:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d013      	beq.n	800505c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005034:	4b14      	ldr	r3, [pc, #80]	; (8005088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	0c5b      	lsrs	r3, r3, #17
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005042:	4413      	add	r3, r2
 8005044:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005048:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	4a0f      	ldr	r2, [pc, #60]	; (800508c <HAL_RCC_GetSysClockFreq+0xbc>)
 800504e:	fb02 f203 	mul.w	r2, r2, r3
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	fbb2 f3f3 	udiv	r3, r2, r3
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
 800505a:	e004      	b.n	8005066 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4a0c      	ldr	r2, [pc, #48]	; (8005090 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005060:	fb02 f303 	mul.w	r3, r2, r3
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	623b      	str	r3, [r7, #32]
      break;
 800506a:	e002      	b.n	8005072 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800506c:	4b07      	ldr	r3, [pc, #28]	; (800508c <HAL_RCC_GetSysClockFreq+0xbc>)
 800506e:	623b      	str	r3, [r7, #32]
      break;
 8005070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005072:	6a3b      	ldr	r3, [r7, #32]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3728      	adds	r7, #40	; 0x28
 8005078:	46bd      	mov	sp, r7
 800507a:	bc90      	pop	{r4, r7}
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	0800a404 	.word	0x0800a404
 8005084:	0800a414 	.word	0x0800a414
 8005088:	40021000 	.word	0x40021000
 800508c:	007a1200 	.word	0x007a1200
 8005090:	003d0900 	.word	0x003d0900

08005094 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <RCC_Delay+0x34>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <RCC_Delay+0x38>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	0a5b      	lsrs	r3, r3, #9
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050b0:	bf00      	nop
  }
  while (Delay --);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1e5a      	subs	r2, r3, #1
 80050b6:	60fa      	str	r2, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f9      	bne.n	80050b0 <RCC_Delay+0x1c>
}
 80050bc:	bf00      	nop
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20000008 	.word	0x20000008
 80050cc:	10624dd3 	.word	0x10624dd3

080050d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d07d      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80050ec:	2300      	movs	r3, #0
 80050ee:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f0:	4b4f      	ldr	r3, [pc, #316]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10d      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fc:	4b4c      	ldr	r3, [pc, #304]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	4a4b      	ldr	r2, [pc, #300]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005106:	61d3      	str	r3, [r2, #28]
 8005108:	4b49      	ldr	r3, [pc, #292]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005114:	2301      	movs	r3, #1
 8005116:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005118:	4b46      	ldr	r3, [pc, #280]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005120:	2b00      	cmp	r3, #0
 8005122:	d118      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005124:	4b43      	ldr	r3, [pc, #268]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a42      	ldr	r2, [pc, #264]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800512a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005130:	f7fd fdc0 	bl	8002cb4 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005136:	e008      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005138:	f7fd fdbc 	bl	8002cb4 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	; 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e06d      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514a:	4b3a      	ldr	r3, [pc, #232]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005156:	4b36      	ldr	r3, [pc, #216]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d02e      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	429a      	cmp	r2, r3
 8005172:	d027      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005174:	4b2e      	ldr	r3, [pc, #184]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800517e:	4b2e      	ldr	r3, [pc, #184]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005184:	4b2c      	ldr	r3, [pc, #176]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800518a:	4a29      	ldr	r2, [pc, #164]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d014      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519a:	f7fd fd8b 	bl	8002cb4 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a0:	e00a      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a2:	f7fd fd87 	bl	8002cb4 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e036      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b8:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0ee      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051c4:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4917      	ldr	r1, [pc, #92]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d105      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051dc:	4b14      	ldr	r3, [pc, #80]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	4a13      	ldr	r2, [pc, #76]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051f4:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	490b      	ldr	r1, [pc, #44]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005202:	4313      	orrs	r3, r2
 8005204:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005212:	4b07      	ldr	r3, [pc, #28]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	4904      	ldr	r1, [pc, #16]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005220:	4313      	orrs	r3, r2
 8005222:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000
 8005234:	40007000 	.word	0x40007000
 8005238:	42420440 	.word	0x42420440

0800523c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e041      	b.n	80052d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fd fbd4 	bl	8002a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3304      	adds	r3, #4
 8005278:	4619      	mov	r1, r3
 800527a:	4610      	mov	r0, r2
 800527c:	f000 fc66 	bl	8005b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d001      	beq.n	80052f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e032      	b.n	800535a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a18      	ldr	r2, [pc, #96]	; (8005364 <HAL_TIM_Base_Start+0x88>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00e      	beq.n	8005324 <HAL_TIM_Base_Start+0x48>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530e:	d009      	beq.n	8005324 <HAL_TIM_Base_Start+0x48>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a14      	ldr	r2, [pc, #80]	; (8005368 <HAL_TIM_Base_Start+0x8c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_TIM_Base_Start+0x48>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a13      	ldr	r2, [pc, #76]	; (800536c <HAL_TIM_Base_Start+0x90>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d111      	bne.n	8005348 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b06      	cmp	r3, #6
 8005334:	d010      	beq.n	8005358 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005346:	e007      	b.n	8005358 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800

08005370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	d001      	beq.n	8005388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e03a      	b.n	80053fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a18      	ldr	r2, [pc, #96]	; (8005408 <HAL_TIM_Base_Start_IT+0x98>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00e      	beq.n	80053c8 <HAL_TIM_Base_Start_IT+0x58>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b2:	d009      	beq.n	80053c8 <HAL_TIM_Base_Start_IT+0x58>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a14      	ldr	r2, [pc, #80]	; (800540c <HAL_TIM_Base_Start_IT+0x9c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <HAL_TIM_Base_Start_IT+0x58>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a13      	ldr	r2, [pc, #76]	; (8005410 <HAL_TIM_Base_Start_IT+0xa0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d111      	bne.n	80053ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b06      	cmp	r3, #6
 80053d8:	d010      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0201 	orr.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ea:	e007      	b.n	80053fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr
 8005408:	40012c00 	.word	0x40012c00
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800

08005414 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e041      	b.n	80054aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f839 	bl	80054b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f000 fb7a 	bl	8005b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_TIM_PWM_Start+0x24>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e022      	b.n	800552e <HAL_TIM_PWM_Start+0x6a>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d109      	bne.n	8005502 <HAL_TIM_PWM_Start+0x3e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	bf14      	ite	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	2300      	moveq	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	e015      	b.n	800552e <HAL_TIM_PWM_Start+0x6a>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d109      	bne.n	800551c <HAL_TIM_PWM_Start+0x58>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e008      	b.n	800552e <HAL_TIM_PWM_Start+0x6a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e05e      	b.n	80055f4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <HAL_TIM_PWM_Start+0x82>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005544:	e013      	b.n	800556e <HAL_TIM_PWM_Start+0xaa>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b04      	cmp	r3, #4
 800554a:	d104      	bne.n	8005556 <HAL_TIM_PWM_Start+0x92>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005554:	e00b      	b.n	800556e <HAL_TIM_PWM_Start+0xaa>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d104      	bne.n	8005566 <HAL_TIM_PWM_Start+0xa2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005564:	e003      	b.n	800556e <HAL_TIM_PWM_Start+0xaa>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2201      	movs	r2, #1
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fd68 	bl	800604c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1e      	ldr	r2, [pc, #120]	; (80055fc <HAL_TIM_PWM_Start+0x138>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d107      	bne.n	8005596 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a18      	ldr	r2, [pc, #96]	; (80055fc <HAL_TIM_PWM_Start+0x138>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00e      	beq.n	80055be <HAL_TIM_PWM_Start+0xfa>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a8:	d009      	beq.n	80055be <HAL_TIM_PWM_Start+0xfa>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a14      	ldr	r2, [pc, #80]	; (8005600 <HAL_TIM_PWM_Start+0x13c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_TIM_PWM_Start+0xfa>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a12      	ldr	r2, [pc, #72]	; (8005604 <HAL_TIM_PWM_Start+0x140>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d111      	bne.n	80055e2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b06      	cmp	r3, #6
 80055ce:	d010      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e0:	e007      	b.n	80055f2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0201 	orr.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40000400 	.word	0x40000400
 8005604:	40000800 	.word	0x40000800

08005608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b02      	cmp	r3, #2
 800561c:	d122      	bne.n	8005664 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b02      	cmp	r3, #2
 800562a:	d11b      	bne.n	8005664 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0202 	mvn.w	r2, #2
 8005634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fa62 	bl	8005b14 <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fa55 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fa64 	bl	8005b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b04      	cmp	r3, #4
 8005670:	d122      	bne.n	80056b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b04      	cmp	r3, #4
 800567e:	d11b      	bne.n	80056b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0204 	mvn.w	r2, #4
 8005688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2202      	movs	r2, #2
 800568e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fa38 	bl	8005b14 <HAL_TIM_IC_CaptureCallback>
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fa2b 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fa3a 	bl	8005b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d122      	bne.n	800570c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d11b      	bne.n	800570c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0208 	mvn.w	r2, #8
 80056dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2204      	movs	r2, #4
 80056e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa0e 	bl	8005b14 <HAL_TIM_IC_CaptureCallback>
 80056f8:	e005      	b.n	8005706 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa01 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fa10 	bl	8005b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b10      	cmp	r3, #16
 8005718:	d122      	bne.n	8005760 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b10      	cmp	r3, #16
 8005726:	d11b      	bne.n	8005760 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0210 	mvn.w	r2, #16
 8005730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2208      	movs	r2, #8
 8005736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f9e4 	bl	8005b14 <HAL_TIM_IC_CaptureCallback>
 800574c:	e005      	b.n	800575a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f9d7 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f9e6 	bl	8005b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b01      	cmp	r3, #1
 800576c:	d10e      	bne.n	800578c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b01      	cmp	r3, #1
 800577a:	d107      	bne.n	800578c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0201 	mvn.w	r2, #1
 8005784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fd f8bc 	bl	8002904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005796:	2b80      	cmp	r3, #128	; 0x80
 8005798:	d10e      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a4:	2b80      	cmp	r3, #128	; 0x80
 80057a6:	d107      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fd26 	bl	8006204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c2:	2b40      	cmp	r3, #64	; 0x40
 80057c4:	d10e      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d107      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9aa 	bl	8005b38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d10e      	bne.n	8005810 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d107      	bne.n	8005810 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0220 	mvn.w	r2, #32
 8005808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fcf1 	bl	80061f2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800582e:	2302      	movs	r3, #2
 8005830:	e0ac      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b0c      	cmp	r3, #12
 800583e:	f200 809f 	bhi.w	8005980 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005842:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	0800587d 	.word	0x0800587d
 800584c:	08005981 	.word	0x08005981
 8005850:	08005981 	.word	0x08005981
 8005854:	08005981 	.word	0x08005981
 8005858:	080058bd 	.word	0x080058bd
 800585c:	08005981 	.word	0x08005981
 8005860:	08005981 	.word	0x08005981
 8005864:	08005981 	.word	0x08005981
 8005868:	080058ff 	.word	0x080058ff
 800586c:	08005981 	.word	0x08005981
 8005870:	08005981 	.word	0x08005981
 8005874:	08005981 	.word	0x08005981
 8005878:	0800593f 	.word	0x0800593f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 f9c4 	bl	8005c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0208 	orr.w	r2, r2, #8
 8005896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0204 	bic.w	r2, r2, #4
 80058a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6999      	ldr	r1, [r3, #24]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	619a      	str	r2, [r3, #24]
      break;
 80058ba:	e062      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fa0a 	bl	8005cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6999      	ldr	r1, [r3, #24]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	021a      	lsls	r2, r3, #8
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	619a      	str	r2, [r3, #24]
      break;
 80058fc:	e041      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68b9      	ldr	r1, [r7, #8]
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fa53 	bl	8005db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0208 	orr.w	r2, r2, #8
 8005918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0204 	bic.w	r2, r2, #4
 8005928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69d9      	ldr	r1, [r3, #28]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	61da      	str	r2, [r3, #28]
      break;
 800593c:	e021      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fa9d 	bl	8005e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69d9      	ldr	r1, [r3, #28]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	021a      	lsls	r2, r3, #8
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	61da      	str	r2, [r3, #28]
      break;
 800597e:	e000      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_TIM_ConfigClockSource+0x18>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e0a6      	b.n	8005afa <HAL_TIM_ConfigClockSource+0x166>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b40      	cmp	r3, #64	; 0x40
 80059e2:	d067      	beq.n	8005ab4 <HAL_TIM_ConfigClockSource+0x120>
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d80b      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x6c>
 80059e8:	2b10      	cmp	r3, #16
 80059ea:	d073      	beq.n	8005ad4 <HAL_TIM_ConfigClockSource+0x140>
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d802      	bhi.n	80059f6 <HAL_TIM_ConfigClockSource+0x62>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d06f      	beq.n	8005ad4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80059f4:	e078      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d06c      	beq.n	8005ad4 <HAL_TIM_ConfigClockSource+0x140>
 80059fa:	2b30      	cmp	r3, #48	; 0x30
 80059fc:	d06a      	beq.n	8005ad4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80059fe:	e073      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a00:	2b70      	cmp	r3, #112	; 0x70
 8005a02:	d00d      	beq.n	8005a20 <HAL_TIM_ConfigClockSource+0x8c>
 8005a04:	2b70      	cmp	r3, #112	; 0x70
 8005a06:	d804      	bhi.n	8005a12 <HAL_TIM_ConfigClockSource+0x7e>
 8005a08:	2b50      	cmp	r3, #80	; 0x50
 8005a0a:	d033      	beq.n	8005a74 <HAL_TIM_ConfigClockSource+0xe0>
 8005a0c:	2b60      	cmp	r3, #96	; 0x60
 8005a0e:	d041      	beq.n	8005a94 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005a10:	e06a      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a16:	d066      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0x152>
 8005a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a1c:	d017      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005a1e:	e063      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	6899      	ldr	r1, [r3, #8]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f000 faed 	bl	800600e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a42:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	609a      	str	r2, [r3, #8]
      break;
 8005a4c:	e04c      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6899      	ldr	r1, [r3, #8]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f000 fad6 	bl	800600e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a70:	609a      	str	r2, [r3, #8]
      break;
 8005a72:	e039      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	6859      	ldr	r1, [r3, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	461a      	mov	r2, r3
 8005a82:	f000 fa4d 	bl	8005f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2150      	movs	r1, #80	; 0x50
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 faa4 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 8005a92:	e029      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	6859      	ldr	r1, [r3, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f000 fa6b 	bl	8005f7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2160      	movs	r1, #96	; 0x60
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fa94 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 8005ab2:	e019      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	6859      	ldr	r1, [r3, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f000 fa2d 	bl	8005f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2140      	movs	r1, #64	; 0x40
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fa84 	bl	8005fda <TIM_ITRx_SetConfig>
      break;
 8005ad2:	e009      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f000 fa7b 	bl	8005fda <TIM_ITRx_SetConfig>
        break;
 8005ae4:	e000      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005ae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr

08005b14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bc80      	pop	{r7}
 8005b48:	4770      	bx	lr
	...

08005b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a29      	ldr	r2, [pc, #164]	; (8005c04 <TIM_Base_SetConfig+0xb8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00b      	beq.n	8005b7c <TIM_Base_SetConfig+0x30>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6a:	d007      	beq.n	8005b7c <TIM_Base_SetConfig+0x30>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a26      	ldr	r2, [pc, #152]	; (8005c08 <TIM_Base_SetConfig+0xbc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_Base_SetConfig+0x30>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a25      	ldr	r2, [pc, #148]	; (8005c0c <TIM_Base_SetConfig+0xc0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d108      	bne.n	8005b8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a1c      	ldr	r2, [pc, #112]	; (8005c04 <TIM_Base_SetConfig+0xb8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00b      	beq.n	8005bae <TIM_Base_SetConfig+0x62>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9c:	d007      	beq.n	8005bae <TIM_Base_SetConfig+0x62>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <TIM_Base_SetConfig+0xbc>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d003      	beq.n	8005bae <TIM_Base_SetConfig+0x62>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <TIM_Base_SetConfig+0xc0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d108      	bne.n	8005bc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a07      	ldr	r2, [pc, #28]	; (8005c04 <TIM_Base_SetConfig+0xb8>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d103      	bne.n	8005bf4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	615a      	str	r2, [r3, #20]
}
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800

08005c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f023 0201 	bic.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0303 	bic.w	r3, r3, #3
 8005c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f023 0302 	bic.w	r3, r3, #2
 8005c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <TIM_OC1_SetConfig+0xc8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d10c      	bne.n	8005c86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f023 0308 	bic.w	r3, r3, #8
 8005c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f023 0304 	bic.w	r3, r3, #4
 8005c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a13      	ldr	r2, [pc, #76]	; (8005cd8 <TIM_OC1_SetConfig+0xc8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d111      	bne.n	8005cb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	621a      	str	r2, [r3, #32]
}
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40012c00 	.word	0x40012c00

08005cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f023 0210 	bic.w	r2, r3, #16
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0320 	bic.w	r3, r3, #32
 8005d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a1d      	ldr	r2, [pc, #116]	; (8005dac <TIM_OC2_SetConfig+0xd0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d10d      	bne.n	8005d58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a14      	ldr	r2, [pc, #80]	; (8005dac <TIM_OC2_SetConfig+0xd0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d113      	bne.n	8005d88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr
 8005dac:	40012c00 	.word	0x40012c00

08005db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	021b      	lsls	r3, r3, #8
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a1d      	ldr	r2, [pc, #116]	; (8005e80 <TIM_OC3_SetConfig+0xd0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d10d      	bne.n	8005e2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	021b      	lsls	r3, r3, #8
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a14      	ldr	r2, [pc, #80]	; (8005e80 <TIM_OC3_SetConfig+0xd0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d113      	bne.n	8005e5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	621a      	str	r2, [r3, #32]
}
 8005e74:	bf00      	nop
 8005e76:	371c      	adds	r7, #28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40012c00 	.word	0x40012c00

08005e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	031b      	lsls	r3, r3, #12
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a0f      	ldr	r2, [pc, #60]	; (8005f1c <TIM_OC4_SetConfig+0x98>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d109      	bne.n	8005ef8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	019b      	lsls	r3, r3, #6
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr
 8005f1c:	40012c00 	.word	0x40012c00

08005f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f023 0201 	bic.w	r2, r3, #1
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f023 030a 	bic.w	r3, r3, #10
 8005f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	621a      	str	r2, [r3, #32]
}
 8005f72:	bf00      	nop
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr

08005f7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	f023 0210 	bic.w	r2, r3, #16
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	031b      	lsls	r3, r3, #12
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	621a      	str	r2, [r3, #32]
}
 8005fd0:	bf00      	nop
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr

08005fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f043 0307 	orr.w	r3, r3, #7
 8005ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	609a      	str	r2, [r3, #8]
}
 8006004:	bf00      	nop
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	bc80      	pop	{r7}
 800600c:	4770      	bx	lr

0800600e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800600e:	b480      	push	{r7}
 8006010:	b087      	sub	sp, #28
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
 800601a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006028:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	021a      	lsls	r2, r3, #8
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	431a      	orrs	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4313      	orrs	r3, r2
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	609a      	str	r2, [r3, #8]
}
 8006042:	bf00      	nop
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	bc80      	pop	{r7}
 800604a:	4770      	bx	lr

0800604c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	2201      	movs	r2, #1
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a1a      	ldr	r2, [r3, #32]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	43db      	mvns	r3, r3
 800606e:	401a      	ands	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a1a      	ldr	r2, [r3, #32]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	fa01 f303 	lsl.w	r3, r1, r3
 8006084:	431a      	orrs	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	621a      	str	r2, [r3, #32]
}
 800608a:	bf00      	nop
 800608c:	371c      	adds	r7, #28
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr

08006094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e046      	b.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a16      	ldr	r2, [pc, #88]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00e      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f8:	d009      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a12      	ldr	r2, [pc, #72]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a10      	ldr	r2, [pc, #64]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d10c      	bne.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4313      	orrs	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr
 8006144:	40012c00 	.word	0x40012c00
 8006148:	40000400 	.word	0x40000400
 800614c:	40000800 	.word	0x40000800

08006150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006168:	2302      	movs	r3, #2
 800616a:	e03d      	b.n	80061e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr

080061f2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr

08006216 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006216:	b084      	sub	sp, #16
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	f107 0014 	add.w	r0, r7, #20
 8006224:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	b004      	add	sp, #16
 8006234:	4770      	bx	lr

08006236 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006236:	b480      	push	{r7}
 8006238:	b085      	sub	sp, #20
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006246:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800624a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	b29a      	uxth	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr

08006262 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800626a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800626e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	b29b      	uxth	r3, r3
 800627c:	43db      	mvns	r3, r3
 800627e:	b29b      	uxth	r3, r3
 8006280:	4013      	ands	r3, r2
 8006282:	b29a      	uxth	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr

080062ae <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80062ae:	b084      	sub	sp, #16
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	f107 0014 	add.w	r0, r7, #20
 80062bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bc80      	pop	{r7}
 80062ea:	b004      	add	sp, #16
 80062ec:	4770      	bx	lr
	...

080062f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b09b      	sub	sp, #108	; 0x6c
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	78db      	ldrb	r3, [r3, #3]
 800631e:	2b03      	cmp	r3, #3
 8006320:	d81f      	bhi.n	8006362 <USB_ActivateEndpoint+0x72>
 8006322:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <USB_ActivateEndpoint+0x38>)
 8006324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006328:	08006339 	.word	0x08006339
 800632c:	08006355 	.word	0x08006355
 8006330:	0800636b 	.word	0x0800636b
 8006334:	08006347 	.word	0x08006347
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006338:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800633c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006340:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006344:	e012      	b.n	800636c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006346:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800634a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800634e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006352:	e00b      	b.n	800636c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006354:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800635c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006360:	e004      	b.n	800636c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006368:	e000      	b.n	800636c <USB_ActivateEndpoint+0x7c>
      break;
 800636a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	441a      	add	r2, r3
 8006376:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800637a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638a:	b29b      	uxth	r3, r3
 800638c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	441a      	add	r2, r3
 80063bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80063c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	7b1b      	ldrb	r3, [r3, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f040 8149 	bne.w	8006670 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	785b      	ldrb	r3, [r3, #1]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 8084 	beq.w	80064f0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	461a      	mov	r2, r3
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	4413      	add	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	011a      	lsls	r2, r3, #4
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	88db      	ldrh	r3, [r3, #6]
 8006410:	085b      	lsrs	r3, r3, #1
 8006412:	b29b      	uxth	r3, r3
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	81fb      	strh	r3, [r7, #14]
 800642a:	89fb      	ldrh	r3, [r7, #14]
 800642c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01b      	beq.n	800646c <USB_ActivateEndpoint+0x17c>
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800644a:	81bb      	strh	r3, [r7, #12]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	441a      	add	r2, r3
 8006456:	89bb      	ldrh	r3, [r7, #12]
 8006458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006464:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006468:	b29b      	uxth	r3, r3
 800646a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	78db      	ldrb	r3, [r3, #3]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d020      	beq.n	80064b6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800648a:	813b      	strh	r3, [r7, #8]
 800648c:	893b      	ldrh	r3, [r7, #8]
 800648e:	f083 0320 	eor.w	r3, r3, #32
 8006492:	813b      	strh	r3, [r7, #8]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	441a      	add	r2, r3
 800649e:	893b      	ldrh	r3, [r7, #8]
 80064a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	8013      	strh	r3, [r2, #0]
 80064b4:	e27f      	b.n	80069b6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064cc:	817b      	strh	r3, [r7, #10]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	441a      	add	r2, r3
 80064d8:	897b      	ldrh	r3, [r7, #10]
 80064da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	8013      	strh	r3, [r2, #0]
 80064ee:	e262      	b.n	80069b6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	4413      	add	r3, r2
 8006502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	011a      	lsls	r2, r3, #4
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	4413      	add	r3, r2
 800650e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	88db      	ldrh	r3, [r3, #6]
 8006518:	085b      	lsrs	r3, r3, #1
 800651a:	b29b      	uxth	r3, r3
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652e:	b29b      	uxth	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	4413      	add	r3, r2
 8006536:	627b      	str	r3, [r7, #36]	; 0x24
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	011a      	lsls	r2, r3, #4
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	4413      	add	r3, r2
 8006542:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006546:	623b      	str	r3, [r7, #32]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d112      	bne.n	8006576 <USB_ActivateEndpoint+0x286>
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800655a:	b29a      	uxth	r2, r3
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	801a      	strh	r2, [r3, #0]
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800656e:	b29a      	uxth	r2, r3
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	801a      	strh	r2, [r3, #0]
 8006574:	e02f      	b.n	80065d6 <USB_ActivateEndpoint+0x2e6>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b3e      	cmp	r3, #62	; 0x3e
 800657c:	d813      	bhi.n	80065a6 <USB_ActivateEndpoint+0x2b6>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	085b      	lsrs	r3, r3, #1
 8006584:	663b      	str	r3, [r7, #96]	; 0x60
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <USB_ActivateEndpoint+0x2a8>
 8006592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006594:	3301      	adds	r3, #1
 8006596:	663b      	str	r3, [r7, #96]	; 0x60
 8006598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800659a:	b29b      	uxth	r3, r3
 800659c:	029b      	lsls	r3, r3, #10
 800659e:	b29a      	uxth	r2, r3
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	e017      	b.n	80065d6 <USB_ActivateEndpoint+0x2e6>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	663b      	str	r3, [r7, #96]	; 0x60
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <USB_ActivateEndpoint+0x2d0>
 80065ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065bc:	3b01      	subs	r3, #1
 80065be:	663b      	str	r3, [r7, #96]	; 0x60
 80065c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	029b      	lsls	r3, r3, #10
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	83fb      	strh	r3, [r7, #30]
 80065e4:	8bfb      	ldrh	r3, [r7, #30]
 80065e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01b      	beq.n	8006626 <USB_ActivateEndpoint+0x336>
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006604:	83bb      	strh	r3, [r7, #28]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	441a      	add	r2, r3
 8006610:	8bbb      	ldrh	r3, [r7, #28]
 8006612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800661a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800661e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006622:	b29b      	uxth	r3, r3
 8006624:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663c:	837b      	strh	r3, [r7, #26]
 800663e:	8b7b      	ldrh	r3, [r7, #26]
 8006640:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006644:	837b      	strh	r3, [r7, #26]
 8006646:	8b7b      	ldrh	r3, [r7, #26]
 8006648:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800664c:	837b      	strh	r3, [r7, #26]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	441a      	add	r2, r3
 8006658:	8b7b      	ldrh	r3, [r7, #26]
 800665a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800665e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800666a:	b29b      	uxth	r3, r3
 800666c:	8013      	strh	r3, [r2, #0]
 800666e:	e1a2      	b.n	80069b6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006686:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066bc:	4413      	add	r3, r2
 80066be:	65bb      	str	r3, [r7, #88]	; 0x58
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	011a      	lsls	r2, r3, #4
 80066c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ce:	657b      	str	r3, [r7, #84]	; 0x54
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	891b      	ldrh	r3, [r3, #8]
 80066d4:	085b      	lsrs	r3, r3, #1
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	653b      	str	r3, [r7, #80]	; 0x50
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f0:	4413      	add	r3, r2
 80066f2:	653b      	str	r3, [r7, #80]	; 0x50
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	011a      	lsls	r2, r3, #4
 80066fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	895b      	ldrh	r3, [r3, #10]
 8006708:	085b      	lsrs	r3, r3, #1
 800670a:	b29b      	uxth	r3, r3
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006712:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	785b      	ldrb	r3, [r3, #1]
 8006718:	2b00      	cmp	r3, #0
 800671a:	f040 8091 	bne.w	8006840 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800672c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800672e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01b      	beq.n	800676e <USB_ActivateEndpoint+0x47e>
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	441a      	add	r2, r3
 8006758:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800675a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676a:	b29b      	uxth	r3, r3
 800676c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	873b      	strh	r3, [r7, #56]	; 0x38
 800677c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006782:	2b00      	cmp	r3, #0
 8006784:	d01b      	beq.n	80067be <USB_ActivateEndpoint+0x4ce>
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29b      	uxth	r3, r3
 8006794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	441a      	add	r2, r3
 80067a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80067aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80067d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80067d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80067de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80067e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	441a      	add	r2, r3
 80067f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80067f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006802:	b29b      	uxth	r3, r3
 8006804:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800681c:	867b      	strh	r3, [r7, #50]	; 0x32
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	441a      	add	r2, r3
 8006828:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800682a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683a:	b29b      	uxth	r3, r3
 800683c:	8013      	strh	r3, [r2, #0]
 800683e:	e0ba      	b.n	80069b6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006850:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01d      	beq.n	8006898 <USB_ActivateEndpoint+0x5a8>
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006872:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	441a      	add	r2, r3
 8006880:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006894:	b29b      	uxth	r3, r3
 8006896:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80068a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80068ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01d      	beq.n	80068f0 <USB_ActivateEndpoint+0x600>
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	441a      	add	r2, r3
 80068d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80068dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	78db      	ldrb	r3, [r3, #3]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d024      	beq.n	8006942 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800690a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800690e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006912:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006916:	f083 0320 	eor.w	r3, r3, #32
 800691a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	441a      	add	r2, r3
 8006928:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800692c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693c:	b29b      	uxth	r3, r3
 800693e:	8013      	strh	r3, [r2, #0]
 8006940:	e01d      	b.n	800697e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	881b      	ldrh	r3, [r3, #0]
 800694e:	b29b      	uxth	r3, r3
 8006950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006958:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	441a      	add	r2, r3
 8006966:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800696a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800696e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697a:	b29b      	uxth	r3, r3
 800697c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006994:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	441a      	add	r2, r3
 80069a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80069a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80069b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	376c      	adds	r7, #108	; 0x6c
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr

080069c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b08d      	sub	sp, #52	; 0x34
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	7b1b      	ldrb	r3, [r3, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f040 808e 	bne.w	8006af4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	785b      	ldrb	r3, [r3, #1]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d044      	beq.n	8006a6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	81bb      	strh	r3, [r7, #12]
 80069ee:	89bb      	ldrh	r3, [r7, #12]
 80069f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01b      	beq.n	8006a30 <USB_DeactivateEndpoint+0x6c>
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0e:	817b      	strh	r3, [r7, #10]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	897b      	ldrh	r3, [r7, #10]
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a46:	813b      	strh	r3, [r7, #8]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	441a      	add	r2, r3
 8006a52:	893b      	ldrh	r3, [r7, #8]
 8006a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	8013      	strh	r3, [r2, #0]
 8006a68:	e192      	b.n	8006d90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	827b      	strh	r3, [r7, #18]
 8006a78:	8a7b      	ldrh	r3, [r7, #18]
 8006a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d01b      	beq.n	8006aba <USB_DeactivateEndpoint+0xf6>
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a98:	823b      	strh	r3, [r7, #16]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	441a      	add	r2, r3
 8006aa4:	8a3b      	ldrh	r3, [r7, #16]
 8006aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad0:	81fb      	strh	r3, [r7, #14]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	441a      	add	r2, r3
 8006adc:	89fb      	ldrh	r3, [r7, #14]
 8006ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	8013      	strh	r3, [r2, #0]
 8006af2:	e14d      	b.n	8006d90 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	785b      	ldrb	r3, [r3, #1]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f040 80a5 	bne.w	8006c48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	843b      	strh	r3, [r7, #32]
 8006b0c:	8c3b      	ldrh	r3, [r7, #32]
 8006b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01b      	beq.n	8006b4e <USB_DeactivateEndpoint+0x18a>
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2c:	83fb      	strh	r3, [r7, #30]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	441a      	add	r2, r3
 8006b38:	8bfb      	ldrh	r3, [r7, #30]
 8006b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	83bb      	strh	r3, [r7, #28]
 8006b5c:	8bbb      	ldrh	r3, [r7, #28]
 8006b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01b      	beq.n	8006b9e <USB_DeactivateEndpoint+0x1da>
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7c:	837b      	strh	r3, [r7, #26]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	8b7b      	ldrh	r3, [r7, #26]
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb4:	833b      	strh	r3, [r7, #24]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	441a      	add	r2, r3
 8006bc0:	8b3b      	ldrh	r3, [r7, #24]
 8006bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bec:	82fb      	strh	r3, [r7, #22]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	441a      	add	r2, r3
 8006bf8:	8afb      	ldrh	r3, [r7, #22]
 8006bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c24:	82bb      	strh	r3, [r7, #20]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	441a      	add	r2, r3
 8006c30:	8abb      	ldrh	r3, [r7, #20]
 8006c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	8013      	strh	r3, [r2, #0]
 8006c46:	e0a3      	b.n	8006d90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006c56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01b      	beq.n	8006c98 <USB_DeactivateEndpoint+0x2d4>
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c76:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	441a      	add	r2, r3
 8006c82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ca6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01b      	beq.n	8006ce8 <USB_DeactivateEndpoint+0x324>
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc6:	853b      	strh	r3, [r7, #40]	; 0x28
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	441a      	add	r2, r3
 8006cd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	441a      	add	r2, r3
 8006d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	441a      	add	r2, r3
 8006d7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3734      	adds	r7, #52	; 0x34
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b0c4      	sub	sp, #272	; 0x110
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	1d3b      	adds	r3, r7, #4
 8006da4:	6018      	str	r0, [r3, #0]
 8006da6:	463b      	mov	r3, r7
 8006da8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006daa:	463b      	mov	r3, r7
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	f040 8557 	bne.w	8007864 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006db6:	463b      	mov	r3, r7
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d905      	bls.n	8006dd2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006dd0:	e004      	b.n	8006ddc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006ddc:	463b      	mov	r3, r7
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	7b1b      	ldrb	r3, [r3, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d12c      	bne.n	8006e40 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006de6:	463b      	mov	r3, r7
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6959      	ldr	r1, [r3, #20]
 8006dec:	463b      	mov	r3, r7
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	88da      	ldrh	r2, [r3, #6]
 8006df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	1d38      	adds	r0, r7, #4
 8006dfa:	6800      	ldr	r0, [r0, #0]
 8006dfc:	f001 fa2c 	bl	8008258 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e00:	1d3b      	adds	r3, r7, #4
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	1d3b      	adds	r3, r7, #4
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	4413      	add	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
 8006e18:	463b      	mov	r3, r7
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	011a      	lsls	r2, r3, #4
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	4413      	add	r3, r2
 8006e24:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006e28:	f107 0310 	add.w	r3, r7, #16
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	f107 0310 	add.w	r3, r7, #16
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	801a      	strh	r2, [r3, #0]
 8006e3c:	f000 bcdd 	b.w	80077fa <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e40:	463b      	mov	r3, r7
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	78db      	ldrb	r3, [r3, #3]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	f040 8347 	bne.w	80074da <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006e4c:	463b      	mov	r3, r7
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6a1a      	ldr	r2, [r3, #32]
 8006e52:	463b      	mov	r3, r7
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	f240 82eb 	bls.w	8007434 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006e5e:	1d3b      	adds	r3, r7, #4
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	463b      	mov	r3, r7
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e78:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006e7c:	1d3b      	adds	r3, r7, #4
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	463b      	mov	r3, r7
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	441a      	add	r2, r3
 8006e8a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6a1a      	ldr	r2, [r3, #32]
 8006ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eac:	1ad2      	subs	r2, r2, r3
 8006eae:	463b      	mov	r3, r7
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006eb4:	1d3b      	adds	r3, r7, #4
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	463b      	mov	r3, r7
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 8159 	beq.w	8007182 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ed0:	1d3b      	adds	r3, r7, #4
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed6:	463b      	mov	r3, r7
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d164      	bne.n	8006faa <USB_EPStartXfer+0x20e>
 8006ee0:	1d3b      	adds	r3, r7, #4
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef4:	4413      	add	r3, r2
 8006ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ef8:	463b      	mov	r3, r7
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	011a      	lsls	r2, r3, #4
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	4413      	add	r3, r2
 8006f04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d112      	bne.n	8006f38 <USB_EPStartXfer+0x19c>
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	801a      	strh	r2, [r3, #0]
 8006f36:	e054      	b.n	8006fe2 <USB_EPStartXfer+0x246>
 8006f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f3c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f3e:	d817      	bhi.n	8006f70 <USB_EPStartXfer+0x1d4>
 8006f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f44:	085b      	lsrs	r3, r3, #1
 8006f46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <USB_EPStartXfer+0x1c4>
 8006f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	029b      	lsls	r3, r3, #10
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	e038      	b.n	8006fe2 <USB_EPStartXfer+0x246>
 8006f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f74:	095b      	lsrs	r3, r3, #5
 8006f76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d104      	bne.n	8006f90 <USB_EPStartXfer+0x1f4>
 8006f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	029b      	lsls	r3, r3, #10
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	e01b      	b.n	8006fe2 <USB_EPStartXfer+0x246>
 8006faa:	463b      	mov	r3, r7
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d116      	bne.n	8006fe2 <USB_EPStartXfer+0x246>
 8006fb4:	1d3b      	adds	r3, r7, #4
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc2:	4413      	add	r3, r2
 8006fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	011a      	lsls	r2, r3, #4
 8006fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8006fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	895b      	ldrh	r3, [r3, #10]
 8006fe8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fec:	463b      	mov	r3, r7
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6959      	ldr	r1, [r3, #20]
 8006ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006ffc:	1d38      	adds	r0, r7, #4
 8006ffe:	6800      	ldr	r0, [r0, #0]
 8007000:	f001 f92a 	bl	8008258 <USB_WritePMA>
            ep->xfer_buff += len;
 8007004:	463b      	mov	r3, r7
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695a      	ldr	r2, [r3, #20]
 800700a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800700e:	441a      	add	r2, r3
 8007010:	463b      	mov	r3, r7
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007016:	463b      	mov	r3, r7
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6a1a      	ldr	r2, [r3, #32]
 800701c:	463b      	mov	r3, r7
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	429a      	cmp	r2, r3
 8007024:	d909      	bls.n	800703a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8007026:	463b      	mov	r3, r7
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6a1a      	ldr	r2, [r3, #32]
 800702c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007030:	1ad2      	subs	r2, r2, r3
 8007032:	463b      	mov	r3, r7
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	621a      	str	r2, [r3, #32]
 8007038:	e008      	b.n	800704c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800703a:	463b      	mov	r3, r7
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007044:	463b      	mov	r3, r7
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2200      	movs	r2, #0
 800704a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800704c:	463b      	mov	r3, r7
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	785b      	ldrb	r3, [r3, #1]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d164      	bne.n	8007120 <USB_EPStartXfer+0x384>
 8007056:	1d3b      	adds	r3, r7, #4
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	1d3b      	adds	r3, r7, #4
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007064:	b29b      	uxth	r3, r3
 8007066:	461a      	mov	r2, r3
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	4413      	add	r3, r2
 800706c:	61fb      	str	r3, [r7, #28]
 800706e:	463b      	mov	r3, r7
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	011a      	lsls	r2, r3, #4
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	4413      	add	r3, r2
 800707a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800707e:	61bb      	str	r3, [r7, #24]
 8007080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007084:	2b00      	cmp	r3, #0
 8007086:	d112      	bne.n	80070ae <USB_EPStartXfer+0x312>
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007092:	b29a      	uxth	r2, r3
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	801a      	strh	r2, [r3, #0]
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	801a      	strh	r2, [r3, #0]
 80070ac:	e057      	b.n	800715e <USB_EPStartXfer+0x3c2>
 80070ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070b2:	2b3e      	cmp	r3, #62	; 0x3e
 80070b4:	d817      	bhi.n	80070e6 <USB_EPStartXfer+0x34a>
 80070b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d004      	beq.n	80070d6 <USB_EPStartXfer+0x33a>
 80070cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070d0:	3301      	adds	r3, #1
 80070d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070da:	b29b      	uxth	r3, r3
 80070dc:	029b      	lsls	r3, r3, #10
 80070de:	b29a      	uxth	r2, r3
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	801a      	strh	r2, [r3, #0]
 80070e4:	e03b      	b.n	800715e <USB_EPStartXfer+0x3c2>
 80070e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070f4:	f003 031f 	and.w	r3, r3, #31
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <USB_EPStartXfer+0x36a>
 80070fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007100:	3b01      	subs	r3, #1
 8007102:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007106:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800710a:	b29b      	uxth	r3, r3
 800710c:	029b      	lsls	r3, r3, #10
 800710e:	b29b      	uxth	r3, r3
 8007110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007118:	b29a      	uxth	r2, r3
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	801a      	strh	r2, [r3, #0]
 800711e:	e01e      	b.n	800715e <USB_EPStartXfer+0x3c2>
 8007120:	463b      	mov	r3, r7
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	785b      	ldrb	r3, [r3, #1]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d119      	bne.n	800715e <USB_EPStartXfer+0x3c2>
 800712a:	1d3b      	adds	r3, r7, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	627b      	str	r3, [r7, #36]	; 0x24
 8007130:	1d3b      	adds	r3, r7, #4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007138:	b29b      	uxth	r3, r3
 800713a:	461a      	mov	r2, r3
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	4413      	add	r3, r2
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
 8007142:	463b      	mov	r3, r7
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	011a      	lsls	r2, r3, #4
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	4413      	add	r3, r2
 800714e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007152:	623b      	str	r3, [r7, #32]
 8007154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007158:	b29a      	uxth	r2, r3
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800715e:	463b      	mov	r3, r7
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	891b      	ldrh	r3, [r3, #8]
 8007164:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007168:	463b      	mov	r3, r7
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6959      	ldr	r1, [r3, #20]
 800716e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007172:	b29b      	uxth	r3, r3
 8007174:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007178:	1d38      	adds	r0, r7, #4
 800717a:	6800      	ldr	r0, [r0, #0]
 800717c:	f001 f86c 	bl	8008258 <USB_WritePMA>
 8007180:	e33b      	b.n	80077fa <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007182:	463b      	mov	r3, r7
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	785b      	ldrb	r3, [r3, #1]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d164      	bne.n	8007256 <USB_EPStartXfer+0x4ba>
 800718c:	1d3b      	adds	r3, r7, #4
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007192:	1d3b      	adds	r3, r7, #4
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800719a:	b29b      	uxth	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a0:	4413      	add	r3, r2
 80071a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071a4:	463b      	mov	r3, r7
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	011a      	lsls	r2, r3, #4
 80071ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ae:	4413      	add	r3, r2
 80071b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d112      	bne.n	80071e4 <USB_EPStartXfer+0x448>
 80071be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071cc:	801a      	strh	r2, [r3, #0]
 80071ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071dc:	b29a      	uxth	r2, r3
 80071de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	e057      	b.n	8007294 <USB_EPStartXfer+0x4f8>
 80071e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071e8:	2b3e      	cmp	r3, #62	; 0x3e
 80071ea:	d817      	bhi.n	800721c <USB_EPStartXfer+0x480>
 80071ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071f0:	085b      	lsrs	r3, r3, #1
 80071f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d004      	beq.n	800720c <USB_EPStartXfer+0x470>
 8007202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007206:	3301      	adds	r3, #1
 8007208:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800720c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007210:	b29b      	uxth	r3, r3
 8007212:	029b      	lsls	r3, r3, #10
 8007214:	b29a      	uxth	r2, r3
 8007216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007218:	801a      	strh	r2, [r3, #0]
 800721a:	e03b      	b.n	8007294 <USB_EPStartXfer+0x4f8>
 800721c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007220:	095b      	lsrs	r3, r3, #5
 8007222:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800722a:	f003 031f 	and.w	r3, r3, #31
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <USB_EPStartXfer+0x4a0>
 8007232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007236:	3b01      	subs	r3, #1
 8007238:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800723c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007240:	b29b      	uxth	r3, r3
 8007242:	029b      	lsls	r3, r3, #10
 8007244:	b29b      	uxth	r3, r3
 8007246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724e:	b29a      	uxth	r2, r3
 8007250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007252:	801a      	strh	r2, [r3, #0]
 8007254:	e01e      	b.n	8007294 <USB_EPStartXfer+0x4f8>
 8007256:	463b      	mov	r3, r7
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	785b      	ldrb	r3, [r3, #1]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d119      	bne.n	8007294 <USB_EPStartXfer+0x4f8>
 8007260:	1d3b      	adds	r3, r7, #4
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	657b      	str	r3, [r7, #84]	; 0x54
 8007266:	1d3b      	adds	r3, r7, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726e:	b29b      	uxth	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007274:	4413      	add	r3, r2
 8007276:	657b      	str	r3, [r7, #84]	; 0x54
 8007278:	463b      	mov	r3, r7
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	011a      	lsls	r2, r3, #4
 8007280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007282:	4413      	add	r3, r2
 8007284:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007288:	653b      	str	r3, [r7, #80]	; 0x50
 800728a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800728e:	b29a      	uxth	r2, r3
 8007290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007292:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007294:	463b      	mov	r3, r7
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	891b      	ldrh	r3, [r3, #8]
 800729a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800729e:	463b      	mov	r3, r7
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6959      	ldr	r1, [r3, #20]
 80072a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80072ae:	1d38      	adds	r0, r7, #4
 80072b0:	6800      	ldr	r0, [r0, #0]
 80072b2:	f000 ffd1 	bl	8008258 <USB_WritePMA>
            ep->xfer_buff += len;
 80072b6:	463b      	mov	r3, r7
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695a      	ldr	r2, [r3, #20]
 80072bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072c0:	441a      	add	r2, r3
 80072c2:	463b      	mov	r3, r7
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072c8:	463b      	mov	r3, r7
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6a1a      	ldr	r2, [r3, #32]
 80072ce:	463b      	mov	r3, r7
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d909      	bls.n	80072ec <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80072d8:	463b      	mov	r3, r7
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6a1a      	ldr	r2, [r3, #32]
 80072de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	463b      	mov	r3, r7
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	621a      	str	r2, [r3, #32]
 80072ea:	e008      	b.n	80072fe <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80072ec:	463b      	mov	r3, r7
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80072f6:	463b      	mov	r3, r7
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072fe:	1d3b      	adds	r3, r7, #4
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	647b      	str	r3, [r7, #68]	; 0x44
 8007304:	463b      	mov	r3, r7
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	785b      	ldrb	r3, [r3, #1]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d164      	bne.n	80073d8 <USB_EPStartXfer+0x63c>
 800730e:	1d3b      	adds	r3, r7, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007314:	1d3b      	adds	r3, r7, #4
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731c:	b29b      	uxth	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007322:	4413      	add	r3, r2
 8007324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007326:	463b      	mov	r3, r7
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	011a      	lsls	r2, r3, #4
 800732e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007330:	4413      	add	r3, r2
 8007332:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007336:	63bb      	str	r3, [r7, #56]	; 0x38
 8007338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d112      	bne.n	8007366 <USB_EPStartXfer+0x5ca>
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b29b      	uxth	r3, r3
 8007346:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800734a:	b29a      	uxth	r2, r3
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800735a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800735e:	b29a      	uxth	r2, r3
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	801a      	strh	r2, [r3, #0]
 8007364:	e054      	b.n	8007410 <USB_EPStartXfer+0x674>
 8007366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800736a:	2b3e      	cmp	r3, #62	; 0x3e
 800736c:	d817      	bhi.n	800739e <USB_EPStartXfer+0x602>
 800736e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007372:	085b      	lsrs	r3, r3, #1
 8007374:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <USB_EPStartXfer+0x5f2>
 8007384:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007388:	3301      	adds	r3, #1
 800738a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800738e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007392:	b29b      	uxth	r3, r3
 8007394:	029b      	lsls	r3, r3, #10
 8007396:	b29a      	uxth	r2, r3
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	801a      	strh	r2, [r3, #0]
 800739c:	e038      	b.n	8007410 <USB_EPStartXfer+0x674>
 800739e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <USB_EPStartXfer+0x622>
 80073b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073b8:	3b01      	subs	r3, #1
 80073ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	029b      	lsls	r3, r3, #10
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	e01b      	b.n	8007410 <USB_EPStartXfer+0x674>
 80073d8:	463b      	mov	r3, r7
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	785b      	ldrb	r3, [r3, #1]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d116      	bne.n	8007410 <USB_EPStartXfer+0x674>
 80073e2:	1d3b      	adds	r3, r7, #4
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073f0:	4413      	add	r3, r2
 80073f2:	647b      	str	r3, [r7, #68]	; 0x44
 80073f4:	463b      	mov	r3, r7
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	011a      	lsls	r2, r3, #4
 80073fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fe:	4413      	add	r3, r2
 8007400:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007404:	643b      	str	r3, [r7, #64]	; 0x40
 8007406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800740a:	b29a      	uxth	r2, r3
 800740c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800740e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007410:	463b      	mov	r3, r7
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	895b      	ldrh	r3, [r3, #10]
 8007416:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800741a:	463b      	mov	r3, r7
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6959      	ldr	r1, [r3, #20]
 8007420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007424:	b29b      	uxth	r3, r3
 8007426:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800742a:	1d38      	adds	r0, r7, #4
 800742c:	6800      	ldr	r0, [r0, #0]
 800742e:	f000 ff13 	bl	8008258 <USB_WritePMA>
 8007432:	e1e2      	b.n	80077fa <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007434:	463b      	mov	r3, r7
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800743e:	1d3b      	adds	r3, r7, #4
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	463b      	mov	r3, r7
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	b29b      	uxth	r3, r3
 8007450:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007458:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800745c:	1d3b      	adds	r3, r7, #4
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	463b      	mov	r3, r7
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	441a      	add	r2, r3
 800746a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800746e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800747a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800747e:	b29b      	uxth	r3, r3
 8007480:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007482:	1d3b      	adds	r3, r7, #4
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	663b      	str	r3, [r7, #96]	; 0x60
 8007488:	1d3b      	adds	r3, r7, #4
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007490:	b29b      	uxth	r3, r3
 8007492:	461a      	mov	r2, r3
 8007494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007496:	4413      	add	r3, r2
 8007498:	663b      	str	r3, [r7, #96]	; 0x60
 800749a:	463b      	mov	r3, r7
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	011a      	lsls	r2, r3, #4
 80074a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074a4:	4413      	add	r3, r2
 80074a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074b6:	463b      	mov	r3, r7
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	891b      	ldrh	r3, [r3, #8]
 80074bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074c0:	463b      	mov	r3, r7
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6959      	ldr	r1, [r3, #20]
 80074c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80074d0:	1d38      	adds	r0, r7, #4
 80074d2:	6800      	ldr	r0, [r0, #0]
 80074d4:	f000 fec0 	bl	8008258 <USB_WritePMA>
 80074d8:	e18f      	b.n	80077fa <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80074da:	1d3b      	adds	r3, r7, #4
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	463b      	mov	r3, r7
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 808f 	beq.w	8007614 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074f6:	1d3b      	adds	r3, r7, #4
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80074fc:	463b      	mov	r3, r7
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d164      	bne.n	80075d0 <USB_EPStartXfer+0x834>
 8007506:	1d3b      	adds	r3, r7, #4
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	673b      	str	r3, [r7, #112]	; 0x70
 800750c:	1d3b      	adds	r3, r7, #4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007514:	b29b      	uxth	r3, r3
 8007516:	461a      	mov	r2, r3
 8007518:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800751a:	4413      	add	r3, r2
 800751c:	673b      	str	r3, [r7, #112]	; 0x70
 800751e:	463b      	mov	r3, r7
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	011a      	lsls	r2, r3, #4
 8007526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007528:	4413      	add	r3, r2
 800752a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800752e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d112      	bne.n	800755e <USB_EPStartXfer+0x7c2>
 8007538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007542:	b29a      	uxth	r2, r3
 8007544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007556:	b29a      	uxth	r2, r3
 8007558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	e054      	b.n	8007608 <USB_EPStartXfer+0x86c>
 800755e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007562:	2b3e      	cmp	r3, #62	; 0x3e
 8007564:	d817      	bhi.n	8007596 <USB_EPStartXfer+0x7fa>
 8007566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800756a:	085b      	lsrs	r3, r3, #1
 800756c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <USB_EPStartXfer+0x7ea>
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	3301      	adds	r3, #1
 8007582:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758a:	b29b      	uxth	r3, r3
 800758c:	029b      	lsls	r3, r3, #10
 800758e:	b29a      	uxth	r2, r3
 8007590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007592:	801a      	strh	r2, [r3, #0]
 8007594:	e038      	b.n	8007608 <USB_EPStartXfer+0x86c>
 8007596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800759a:	095b      	lsrs	r3, r3, #5
 800759c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075a4:	f003 031f 	and.w	r3, r3, #31
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d104      	bne.n	80075b6 <USB_EPStartXfer+0x81a>
 80075ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b0:	3b01      	subs	r3, #1
 80075b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	029b      	lsls	r3, r3, #10
 80075be:	b29b      	uxth	r3, r3
 80075c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075cc:	801a      	strh	r2, [r3, #0]
 80075ce:	e01b      	b.n	8007608 <USB_EPStartXfer+0x86c>
 80075d0:	463b      	mov	r3, r7
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	785b      	ldrb	r3, [r3, #1]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d116      	bne.n	8007608 <USB_EPStartXfer+0x86c>
 80075da:	1d3b      	adds	r3, r7, #4
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075e8:	4413      	add	r3, r2
 80075ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80075ec:	463b      	mov	r3, r7
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	011a      	lsls	r2, r3, #4
 80075f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075f6:	4413      	add	r3, r2
 80075f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075fc:	677b      	str	r3, [r7, #116]	; 0x74
 80075fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007602:	b29a      	uxth	r2, r3
 8007604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007606:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007608:	463b      	mov	r3, r7
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	895b      	ldrh	r3, [r3, #10]
 800760e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8007612:	e097      	b.n	8007744 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007614:	463b      	mov	r3, r7
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d168      	bne.n	80076f0 <USB_EPStartXfer+0x954>
 800761e:	1d3b      	adds	r3, r7, #4
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007626:	1d3b      	adds	r3, r7, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762e:	b29b      	uxth	r3, r3
 8007630:	461a      	mov	r2, r3
 8007632:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007636:	4413      	add	r3, r2
 8007638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800763c:	463b      	mov	r3, r7
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	011a      	lsls	r2, r3, #4
 8007644:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007648:	4413      	add	r3, r2
 800764a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800764e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d112      	bne.n	800767e <USB_EPStartXfer+0x8e2>
 8007658:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007662:	b29a      	uxth	r2, r3
 8007664:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007666:	801a      	strh	r2, [r3, #0]
 8007668:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007676:	b29a      	uxth	r2, r3
 8007678:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800767a:	801a      	strh	r2, [r3, #0]
 800767c:	e05d      	b.n	800773a <USB_EPStartXfer+0x99e>
 800767e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007682:	2b3e      	cmp	r3, #62	; 0x3e
 8007684:	d817      	bhi.n	80076b6 <USB_EPStartXfer+0x91a>
 8007686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800768a:	085b      	lsrs	r3, r3, #1
 800768c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d004      	beq.n	80076a6 <USB_EPStartXfer+0x90a>
 800769c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076a0:	3301      	adds	r3, #1
 80076a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	029b      	lsls	r3, r3, #10
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	e041      	b.n	800773a <USB_EPStartXfer+0x99e>
 80076b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076c4:	f003 031f 	and.w	r3, r3, #31
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d104      	bne.n	80076d6 <USB_EPStartXfer+0x93a>
 80076cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076d0:	3b01      	subs	r3, #1
 80076d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076da:	b29b      	uxth	r3, r3
 80076dc:	029b      	lsls	r3, r3, #10
 80076de:	b29b      	uxth	r3, r3
 80076e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e024      	b.n	800773a <USB_EPStartXfer+0x99e>
 80076f0:	463b      	mov	r3, r7
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	785b      	ldrb	r3, [r3, #1]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d11f      	bne.n	800773a <USB_EPStartXfer+0x99e>
 80076fa:	1d3b      	adds	r3, r7, #4
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007702:	1d3b      	adds	r3, r7, #4
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800770a:	b29b      	uxth	r3, r3
 800770c:	461a      	mov	r2, r3
 800770e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007712:	4413      	add	r3, r2
 8007714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007718:	463b      	mov	r3, r7
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	011a      	lsls	r2, r3, #4
 8007720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007724:	4413      	add	r3, r2
 8007726:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800772a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800772e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007732:	b29a      	uxth	r2, r3
 8007734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007738:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800773a:	463b      	mov	r3, r7
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	891b      	ldrh	r3, [r3, #8]
 8007740:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007744:	463b      	mov	r3, r7
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6959      	ldr	r1, [r3, #20]
 800774a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800774e:	b29b      	uxth	r3, r3
 8007750:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007754:	1d38      	adds	r0, r7, #4
 8007756:	6800      	ldr	r0, [r0, #0]
 8007758:	f000 fd7e 	bl	8008258 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800775c:	463b      	mov	r3, r7
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d122      	bne.n	80077ac <USB_EPStartXfer+0xa10>
 8007766:	1d3b      	adds	r3, r7, #4
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	463b      	mov	r3, r7
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007780:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007784:	1d3b      	adds	r3, r7, #4
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	463b      	mov	r3, r7
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	441a      	add	r2, r3
 8007792:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800779a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800779e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	8013      	strh	r3, [r2, #0]
 80077aa:	e026      	b.n	80077fa <USB_EPStartXfer+0xa5e>
 80077ac:	463b      	mov	r3, r7
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	785b      	ldrb	r3, [r3, #1]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d121      	bne.n	80077fa <USB_EPStartXfer+0xa5e>
 80077b6:	1d3b      	adds	r3, r7, #4
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	463b      	mov	r3, r7
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	463b      	mov	r3, r7
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	441a      	add	r2, r3
 80077e2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80077e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80077fa:	1d3b      	adds	r3, r7, #4
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	463b      	mov	r3, r7
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	f107 020e 	add.w	r2, r7, #14
 8007810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007818:	8013      	strh	r3, [r2, #0]
 800781a:	f107 030e 	add.w	r3, r7, #14
 800781e:	f107 020e 	add.w	r2, r7, #14
 8007822:	8812      	ldrh	r2, [r2, #0]
 8007824:	f082 0210 	eor.w	r2, r2, #16
 8007828:	801a      	strh	r2, [r3, #0]
 800782a:	f107 030e 	add.w	r3, r7, #14
 800782e:	f107 020e 	add.w	r2, r7, #14
 8007832:	8812      	ldrh	r2, [r2, #0]
 8007834:	f082 0220 	eor.w	r2, r2, #32
 8007838:	801a      	strh	r2, [r3, #0]
 800783a:	1d3b      	adds	r3, r7, #4
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	463b      	mov	r3, r7
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	441a      	add	r2, r3
 8007848:	f107 030e 	add.w	r3, r7, #14
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800785a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800785e:	b29b      	uxth	r3, r3
 8007860:	8013      	strh	r3, [r2, #0]
 8007862:	e3b5      	b.n	8007fd0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007864:	463b      	mov	r3, r7
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	7b1b      	ldrb	r3, [r3, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f040 8090 	bne.w	8007990 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007870:	463b      	mov	r3, r7
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699a      	ldr	r2, [r3, #24]
 8007876:	463b      	mov	r3, r7
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	429a      	cmp	r2, r3
 800787e:	d90e      	bls.n	800789e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8007880:	463b      	mov	r3, r7
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800788a:	463b      	mov	r3, r7
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	699a      	ldr	r2, [r3, #24]
 8007890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007894:	1ad2      	subs	r2, r2, r3
 8007896:	463b      	mov	r3, r7
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	619a      	str	r2, [r3, #24]
 800789c:	e008      	b.n	80078b0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800789e:	463b      	mov	r3, r7
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80078a8:	463b      	mov	r3, r7
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2200      	movs	r2, #0
 80078ae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80078b0:	1d3b      	adds	r3, r7, #4
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078b8:	1d3b      	adds	r3, r7, #4
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078c8:	4413      	add	r3, r2
 80078ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078ce:	463b      	mov	r3, r7
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	011a      	lsls	r2, r3, #4
 80078d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078da:	4413      	add	r3, r2
 80078dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d116      	bne.n	800791a <USB_EPStartXfer+0xb7e>
 80078ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078fe:	801a      	strh	r2, [r3, #0]
 8007900:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800790c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007910:	b29a      	uxth	r2, r3
 8007912:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007916:	801a      	strh	r2, [r3, #0]
 8007918:	e32c      	b.n	8007f74 <USB_EPStartXfer+0x11d8>
 800791a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800791e:	2b3e      	cmp	r3, #62	; 0x3e
 8007920:	d818      	bhi.n	8007954 <USB_EPStartXfer+0xbb8>
 8007922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007926:	085b      	lsrs	r3, r3, #1
 8007928:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800792c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	d004      	beq.n	8007942 <USB_EPStartXfer+0xba6>
 8007938:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800793c:	3301      	adds	r3, #1
 800793e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007942:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007946:	b29b      	uxth	r3, r3
 8007948:	029b      	lsls	r3, r3, #10
 800794a:	b29a      	uxth	r2, r3
 800794c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007950:	801a      	strh	r2, [r3, #0]
 8007952:	e30f      	b.n	8007f74 <USB_EPStartXfer+0x11d8>
 8007954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007958:	095b      	lsrs	r3, r3, #5
 800795a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800795e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	2b00      	cmp	r3, #0
 8007968:	d104      	bne.n	8007974 <USB_EPStartXfer+0xbd8>
 800796a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800796e:	3b01      	subs	r3, #1
 8007970:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007974:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007978:	b29b      	uxth	r3, r3
 800797a:	029b      	lsls	r3, r3, #10
 800797c:	b29b      	uxth	r3, r3
 800797e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007986:	b29a      	uxth	r2, r3
 8007988:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800798c:	801a      	strh	r2, [r3, #0]
 800798e:	e2f1      	b.n	8007f74 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007990:	463b      	mov	r3, r7
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	78db      	ldrb	r3, [r3, #3]
 8007996:	2b02      	cmp	r3, #2
 8007998:	f040 818f 	bne.w	8007cba <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800799c:	463b      	mov	r3, r7
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d175      	bne.n	8007a92 <USB_EPStartXfer+0xcf6>
 80079a6:	1d3b      	adds	r3, r7, #4
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079ae:	1d3b      	adds	r3, r7, #4
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	461a      	mov	r2, r3
 80079ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80079be:	4413      	add	r3, r2
 80079c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079c4:	463b      	mov	r3, r7
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	011a      	lsls	r2, r3, #4
 80079cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80079d0:	4413      	add	r3, r2
 80079d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079da:	463b      	mov	r3, r7
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d116      	bne.n	8007a12 <USB_EPStartXfer+0xc76>
 80079e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079f6:	801a      	strh	r2, [r3, #0]
 80079f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	e065      	b.n	8007ade <USB_EPStartXfer+0xd42>
 8007a12:	463b      	mov	r3, r7
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	2b3e      	cmp	r3, #62	; 0x3e
 8007a1a:	d81a      	bhi.n	8007a52 <USB_EPStartXfer+0xcb6>
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	085b      	lsrs	r3, r3, #1
 8007a24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a28:	463b      	mov	r3, r7
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d004      	beq.n	8007a40 <USB_EPStartXfer+0xca4>
 8007a36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	029b      	lsls	r3, r3, #10
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a4e:	801a      	strh	r2, [r3, #0]
 8007a50:	e045      	b.n	8007ade <USB_EPStartXfer+0xd42>
 8007a52:	463b      	mov	r3, r7
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	095b      	lsrs	r3, r3, #5
 8007a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a5e:	463b      	mov	r3, r7
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d104      	bne.n	8007a76 <USB_EPStartXfer+0xcda>
 8007a6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a70:	3b01      	subs	r3, #1
 8007a72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	029b      	lsls	r3, r3, #10
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a8e:	801a      	strh	r2, [r3, #0]
 8007a90:	e025      	b.n	8007ade <USB_EPStartXfer+0xd42>
 8007a92:	463b      	mov	r3, r7
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d120      	bne.n	8007ade <USB_EPStartXfer+0xd42>
 8007a9c:	1d3b      	adds	r3, r7, #4
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aa4:	1d3b      	adds	r3, r7, #4
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aba:	463b      	mov	r3, r7
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	011a      	lsls	r2, r3, #4
 8007ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ad0:	463b      	mov	r3, r7
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007adc:	801a      	strh	r2, [r3, #0]
 8007ade:	1d3b      	adds	r3, r7, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d175      	bne.n	8007bdc <USB_EPStartXfer+0xe40>
 8007af0:	1d3b      	adds	r3, r7, #4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007af8:	1d3b      	adds	r3, r7, #4
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	461a      	mov	r2, r3
 8007b04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b08:	4413      	add	r3, r2
 8007b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b0e:	463b      	mov	r3, r7
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	011a      	lsls	r2, r3, #4
 8007b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b24:	463b      	mov	r3, r7
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d116      	bne.n	8007b5c <USB_EPStartXfer+0xdc0>
 8007b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b40:	801a      	strh	r2, [r3, #0]
 8007b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b58:	801a      	strh	r2, [r3, #0]
 8007b5a:	e061      	b.n	8007c20 <USB_EPStartXfer+0xe84>
 8007b5c:	463b      	mov	r3, r7
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	2b3e      	cmp	r3, #62	; 0x3e
 8007b64:	d81a      	bhi.n	8007b9c <USB_EPStartXfer+0xe00>
 8007b66:	463b      	mov	r3, r7
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	085b      	lsrs	r3, r3, #1
 8007b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b72:	463b      	mov	r3, r7
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <USB_EPStartXfer+0xdee>
 8007b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b84:	3301      	adds	r3, #1
 8007b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	029b      	lsls	r3, r3, #10
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b98:	801a      	strh	r2, [r3, #0]
 8007b9a:	e041      	b.n	8007c20 <USB_EPStartXfer+0xe84>
 8007b9c:	463b      	mov	r3, r7
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ba8:	463b      	mov	r3, r7
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 031f 	and.w	r3, r3, #31
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <USB_EPStartXfer+0xe24>
 8007bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	029b      	lsls	r3, r3, #10
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bd8:	801a      	strh	r2, [r3, #0]
 8007bda:	e021      	b.n	8007c20 <USB_EPStartXfer+0xe84>
 8007bdc:	463b      	mov	r3, r7
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	785b      	ldrb	r3, [r3, #1]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d11c      	bne.n	8007c20 <USB_EPStartXfer+0xe84>
 8007be6:	1d3b      	adds	r3, r7, #4
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	011a      	lsls	r2, r3, #4
 8007c04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c08:	4413      	add	r3, r2
 8007c0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c12:	463b      	mov	r3, r7
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c1e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007c20:	463b      	mov	r3, r7
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 81a4 	beq.w	8007f74 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007c2c:	1d3b      	adds	r3, r7, #4
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	463b      	mov	r3, r7
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c40:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <USB_EPStartXfer+0xebc>
 8007c4c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10d      	bne.n	8007c74 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c58:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f040 8187 	bne.w	8007f74 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c66:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f040 8180 	bne.w	8007f74 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007c74:	1d3b      	adds	r3, r7, #4
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	463b      	mov	r3, r7
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007c92:	1d3b      	adds	r3, r7, #4
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	463b      	mov	r3, r7
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	441a      	add	r2, r3
 8007ca0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	8013      	strh	r3, [r2, #0]
 8007cb8:	e15c      	b.n	8007f74 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007cba:	463b      	mov	r3, r7
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	78db      	ldrb	r3, [r3, #3]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	f040 8155 	bne.w	8007f70 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	699a      	ldr	r2, [r3, #24]
 8007ccc:	463b      	mov	r3, r7
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d90e      	bls.n	8007cf4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	699a      	ldr	r2, [r3, #24]
 8007ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cea:	1ad2      	subs	r2, r2, r3
 8007cec:	463b      	mov	r3, r7
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	619a      	str	r2, [r3, #24]
 8007cf2:	e008      	b.n	8007d06 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8007cfe:	463b      	mov	r3, r7
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007d06:	463b      	mov	r3, r7
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	785b      	ldrb	r3, [r3, #1]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d16f      	bne.n	8007df0 <USB_EPStartXfer+0x1054>
 8007d10:	1d3b      	adds	r3, r7, #4
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d18:	1d3b      	adds	r3, r7, #4
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	461a      	mov	r2, r3
 8007d24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d28:	4413      	add	r3, r2
 8007d2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d2e:	463b      	mov	r3, r7
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	011a      	lsls	r2, r3, #4
 8007d36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d116      	bne.n	8007d7a <USB_EPStartXfer+0xfde>
 8007d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d5e:	801a      	strh	r2, [r3, #0]
 8007d60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	e05f      	b.n	8007e3a <USB_EPStartXfer+0x109e>
 8007d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d80:	d818      	bhi.n	8007db4 <USB_EPStartXfer+0x1018>
 8007d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d86:	085b      	lsrs	r3, r3, #1
 8007d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <USB_EPStartXfer+0x1006>
 8007d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	029b      	lsls	r3, r3, #10
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	e042      	b.n	8007e3a <USB_EPStartXfer+0x109e>
 8007db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007db8:	095b      	lsrs	r3, r3, #5
 8007dba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dc2:	f003 031f 	and.w	r3, r3, #31
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <USB_EPStartXfer+0x1038>
 8007dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	029b      	lsls	r3, r3, #10
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007dec:	801a      	strh	r2, [r3, #0]
 8007dee:	e024      	b.n	8007e3a <USB_EPStartXfer+0x109e>
 8007df0:	463b      	mov	r3, r7
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	785b      	ldrb	r3, [r3, #1]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d11f      	bne.n	8007e3a <USB_EPStartXfer+0x109e>
 8007dfa:	1d3b      	adds	r3, r7, #4
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e02:	1d3b      	adds	r3, r7, #4
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e12:	4413      	add	r3, r2
 8007e14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e18:	463b      	mov	r3, r7
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	011a      	lsls	r2, r3, #4
 8007e20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e24:	4413      	add	r3, r2
 8007e26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e38:	801a      	strh	r2, [r3, #0]
 8007e3a:	1d3b      	adds	r3, r7, #4
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e42:	463b      	mov	r3, r7
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d16f      	bne.n	8007f2c <USB_EPStartXfer+0x1190>
 8007e4c:	1d3b      	adds	r3, r7, #4
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e54:	1d3b      	adds	r3, r7, #4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e64:	4413      	add	r3, r2
 8007e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e6a:	463b      	mov	r3, r7
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	011a      	lsls	r2, r3, #4
 8007e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e76:	4413      	add	r3, r2
 8007e78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d116      	bne.n	8007eb6 <USB_EPStartXfer+0x111a>
 8007e88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e9a:	801a      	strh	r2, [r3, #0]
 8007e9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007eb2:	801a      	strh	r2, [r3, #0]
 8007eb4:	e05e      	b.n	8007f74 <USB_EPStartXfer+0x11d8>
 8007eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eba:	2b3e      	cmp	r3, #62	; 0x3e
 8007ebc:	d818      	bhi.n	8007ef0 <USB_EPStartXfer+0x1154>
 8007ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ec2:	085b      	lsrs	r3, r3, #1
 8007ec4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d004      	beq.n	8007ede <USB_EPStartXfer+0x1142>
 8007ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed8:	3301      	adds	r3, #1
 8007eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	029b      	lsls	r3, r3, #10
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007eec:	801a      	strh	r2, [r3, #0]
 8007eee:	e041      	b.n	8007f74 <USB_EPStartXfer+0x11d8>
 8007ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ef4:	095b      	lsrs	r3, r3, #5
 8007ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007efe:	f003 031f 	and.w	r3, r3, #31
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d104      	bne.n	8007f10 <USB_EPStartXfer+0x1174>
 8007f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	029b      	lsls	r3, r3, #10
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f28:	801a      	strh	r2, [r3, #0]
 8007f2a:	e023      	b.n	8007f74 <USB_EPStartXfer+0x11d8>
 8007f2c:	463b      	mov	r3, r7
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	785b      	ldrb	r3, [r3, #1]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d11e      	bne.n	8007f74 <USB_EPStartXfer+0x11d8>
 8007f36:	1d3b      	adds	r3, r7, #4
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	461a      	mov	r2, r3
 8007f42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f46:	4413      	add	r3, r2
 8007f48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f4c:	463b      	mov	r3, r7
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	011a      	lsls	r2, r3, #4
 8007f54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f58:	4413      	add	r3, r2
 8007f5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f6c:	801a      	strh	r2, [r3, #0]
 8007f6e:	e001      	b.n	8007f74 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e02e      	b.n	8007fd2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f74:	1d3b      	adds	r3, r7, #4
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	463b      	mov	r3, r7
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007f92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007f96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f9a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007f9e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007fa2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007fa6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007faa:	1d3b      	adds	r3, r7, #4
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	463b      	mov	r3, r7
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	441a      	add	r2, r3
 8007fb8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	785b      	ldrb	r3, [r3, #1]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d020      	beq.n	8008030 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008004:	81bb      	strh	r3, [r7, #12]
 8008006:	89bb      	ldrh	r3, [r7, #12]
 8008008:	f083 0310 	eor.w	r3, r3, #16
 800800c:	81bb      	strh	r3, [r7, #12]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	441a      	add	r2, r3
 8008018:	89bb      	ldrh	r3, [r7, #12]
 800801a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800801e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802a:	b29b      	uxth	r3, r3
 800802c:	8013      	strh	r3, [r2, #0]
 800802e:	e01f      	b.n	8008070 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008046:	81fb      	strh	r3, [r7, #14]
 8008048:	89fb      	ldrh	r3, [r7, #14]
 800804a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800804e:	81fb      	strh	r3, [r7, #14]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	441a      	add	r2, r3
 800805a:	89fb      	ldrh	r3, [r7, #14]
 800805c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806c:	b29b      	uxth	r3, r3
 800806e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	bc80      	pop	{r7}
 800807a:	4770      	bx	lr

0800807c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	7b1b      	ldrb	r3, [r3, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	f040 809d 	bne.w	80081ca <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	785b      	ldrb	r3, [r3, #1]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d04c      	beq.n	8008132 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	823b      	strh	r3, [r7, #16]
 80080a6:	8a3b      	ldrh	r3, [r7, #16]
 80080a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01b      	beq.n	80080e8 <USB_EPClearStall+0x6c>
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c6:	81fb      	strh	r3, [r7, #14]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	441a      	add	r2, r3
 80080d2:	89fb      	ldrh	r3, [r7, #14]
 80080d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	78db      	ldrb	r3, [r3, #3]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d06c      	beq.n	80081ca <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008106:	81bb      	strh	r3, [r7, #12]
 8008108:	89bb      	ldrh	r3, [r7, #12]
 800810a:	f083 0320 	eor.w	r3, r3, #32
 800810e:	81bb      	strh	r3, [r7, #12]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	441a      	add	r2, r3
 800811a:	89bb      	ldrh	r3, [r7, #12]
 800811c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812c:	b29b      	uxth	r3, r3
 800812e:	8013      	strh	r3, [r2, #0]
 8008130:	e04b      	b.n	80081ca <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	82fb      	strh	r3, [r7, #22]
 8008140:	8afb      	ldrh	r3, [r7, #22]
 8008142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d01b      	beq.n	8008182 <USB_EPClearStall+0x106>
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	b29b      	uxth	r3, r3
 8008158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800815c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008160:	82bb      	strh	r3, [r7, #20]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	441a      	add	r2, r3
 800816c:	8abb      	ldrh	r3, [r7, #20]
 800816e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008176:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800817a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817e:	b29b      	uxth	r3, r3
 8008180:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008198:	827b      	strh	r3, [r7, #18]
 800819a:	8a7b      	ldrh	r3, [r7, #18]
 800819c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081a0:	827b      	strh	r3, [r7, #18]
 80081a2:	8a7b      	ldrh	r3, [r7, #18]
 80081a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081a8:	827b      	strh	r3, [r7, #18]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	441a      	add	r2, r3
 80081b4:	8a7b      	ldrh	r3, [r7, #18]
 80081b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	371c      	adds	r7, #28
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bc80      	pop	{r7}
 80081d4:	4770      	bx	lr

080081d6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	460b      	mov	r3, r1
 80081e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80081e2:	78fb      	ldrb	r3, [r7, #3]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d103      	bne.n	80081f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2280      	movs	r2, #128	; 0x80
 80081ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bc80      	pop	{r7}
 80081fa:	4770      	bx	lr

080081fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	bc80      	pop	{r7}
 800820e:	4770      	bx	lr

08008210 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	bc80      	pop	{r7}
 8008222:	4770      	bx	lr

08008224 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008232:	b29b      	uxth	r3, r3
 8008234:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008236:	68fb      	ldr	r3, [r7, #12]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	bc80      	pop	{r7}
 8008240:	4770      	bx	lr

08008242 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	bc80      	pop	{r7}
 8008256:	4770      	bx	lr

08008258 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008258:	b480      	push	{r7}
 800825a:	b08d      	sub	sp, #52	; 0x34
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	4611      	mov	r1, r2
 8008264:	461a      	mov	r2, r3
 8008266:	460b      	mov	r3, r1
 8008268:	80fb      	strh	r3, [r7, #6]
 800826a:	4613      	mov	r3, r2
 800826c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800826e:	88bb      	ldrh	r3, [r7, #4]
 8008270:	3301      	adds	r3, #1
 8008272:	085b      	lsrs	r3, r3, #1
 8008274:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800827e:	88fb      	ldrh	r3, [r7, #6]
 8008280:	005a      	lsls	r2, r3, #1
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800828a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008290:	e01e      	b.n	80082d0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	3301      	adds	r3, #1
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	021b      	lsls	r3, r3, #8
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80082b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ba:	3302      	adds	r3, #2
 80082bc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	3302      	adds	r3, #2
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	3301      	adds	r3, #1
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	3b01      	subs	r3, #1
 80082ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1dd      	bne.n	8008292 <USB_WritePMA+0x3a>
  }
}
 80082d6:	bf00      	nop
 80082d8:	3734      	adds	r7, #52	; 0x34
 80082da:	46bd      	mov	sp, r7
 80082dc:	bc80      	pop	{r7}
 80082de:	4770      	bx	lr

080082e0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b08b      	sub	sp, #44	; 0x2c
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	4611      	mov	r1, r2
 80082ec:	461a      	mov	r2, r3
 80082ee:	460b      	mov	r3, r1
 80082f0:	80fb      	strh	r3, [r7, #6]
 80082f2:	4613      	mov	r3, r2
 80082f4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80082f6:	88bb      	ldrh	r3, [r7, #4]
 80082f8:	085b      	lsrs	r3, r3, #1
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008306:	88fb      	ldrh	r3, [r7, #6]
 8008308:	005a      	lsls	r2, r3, #1
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	4413      	add	r3, r2
 800830e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008312:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
 8008318:	e01b      	b.n	8008352 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	b29b      	uxth	r3, r3
 8008320:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	3302      	adds	r3, #2
 8008326:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	b2da      	uxtb	r2, r3
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	3301      	adds	r3, #1
 8008334:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	0a1b      	lsrs	r3, r3, #8
 800833a:	b2da      	uxtb	r2, r3
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	3301      	adds	r3, #1
 8008344:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	3302      	adds	r3, #2
 800834a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	3b01      	subs	r3, #1
 8008350:	627b      	str	r3, [r7, #36]	; 0x24
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e0      	bne.n	800831a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008358:	88bb      	ldrh	r3, [r7, #4]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	b29b      	uxth	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	d007      	beq.n	8008374 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	b2da      	uxtb	r2, r3
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	701a      	strb	r2, [r3, #0]
  }
}
 8008374:	bf00      	nop
 8008376:	372c      	adds	r7, #44	; 0x2c
 8008378:	46bd      	mov	sp, r7
 800837a:	bc80      	pop	{r7}
 800837c:	4770      	bx	lr

0800837e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	460b      	mov	r3, r1
 8008388:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800838a:	2300      	movs	r3, #0
 800838c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	7c1b      	ldrb	r3, [r3, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d115      	bne.n	80083c2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800839a:	2202      	movs	r2, #2
 800839c:	2181      	movs	r1, #129	; 0x81
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 fe79 	bl	800a096 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80083aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083ae:	2202      	movs	r2, #2
 80083b0:	2101      	movs	r1, #1
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 fe6f 	bl	800a096 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80083c0:	e012      	b.n	80083e8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80083c2:	2340      	movs	r3, #64	; 0x40
 80083c4:	2202      	movs	r2, #2
 80083c6:	2181      	movs	r1, #129	; 0x81
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f001 fe64 	bl	800a096 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80083d4:	2340      	movs	r3, #64	; 0x40
 80083d6:	2202      	movs	r2, #2
 80083d8:	2101      	movs	r1, #1
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 fe5b 	bl	800a096 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083e8:	2308      	movs	r3, #8
 80083ea:	2203      	movs	r2, #3
 80083ec:	2182      	movs	r1, #130	; 0x82
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 fe51 	bl	800a096 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80083fa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80083fe:	f001 ff71 	bl	800a2e4 <USBD_static_malloc>
 8008402:	4602      	mov	r2, r0
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008410:	2b00      	cmp	r3, #0
 8008412:	d102      	bne.n	800841a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008414:	2301      	movs	r3, #1
 8008416:	73fb      	strb	r3, [r7, #15]
 8008418:	e026      	b.n	8008468 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008420:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2200      	movs	r2, #0
 8008430:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	7c1b      	ldrb	r3, [r3, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d109      	bne.n	8008458 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800844a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800844e:	2101      	movs	r1, #1
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 ff11 	bl	800a278 <USBD_LL_PrepareReceive>
 8008456:	e007      	b.n	8008468 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800845e:	2340      	movs	r3, #64	; 0x40
 8008460:	2101      	movs	r1, #1
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f001 ff08 	bl	800a278 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008468:	7bfb      	ldrb	r3, [r7, #15]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	460b      	mov	r3, r1
 800847c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008482:	2181      	movs	r1, #129	; 0x81
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 fe2c 	bl	800a0e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008490:	2101      	movs	r1, #1
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 fe25 	bl	800a0e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80084a0:	2182      	movs	r1, #130	; 0x82
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 fe1d 	bl	800a0e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00e      	beq.n	80084d6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 ff17 	bl	800a2fc <USBD_static_free>
    pdev->pClassData = NULL;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008506:	2b00      	cmp	r3, #0
 8008508:	d039      	beq.n	800857e <USBD_CDC_Setup+0x9e>
 800850a:	2b20      	cmp	r3, #32
 800850c:	d17c      	bne.n	8008608 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	88db      	ldrh	r3, [r3, #6]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d029      	beq.n	800856a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	b25b      	sxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	da11      	bge.n	8008544 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800852c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	88d2      	ldrh	r2, [r2, #6]
 8008532:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008534:	6939      	ldr	r1, [r7, #16]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	88db      	ldrh	r3, [r3, #6]
 800853a:	461a      	mov	r2, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f001 f9f9 	bl	8009934 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008542:	e068      	b.n	8008616 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	785a      	ldrb	r2, [r3, #1]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	88db      	ldrh	r3, [r3, #6]
 8008552:	b2da      	uxtb	r2, r3
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800855a:	6939      	ldr	r1, [r7, #16]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	88db      	ldrh	r3, [r3, #6]
 8008560:	461a      	mov	r2, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f001 fa14 	bl	8009990 <USBD_CtlPrepareRx>
      break;
 8008568:	e055      	b.n	8008616 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	7850      	ldrb	r0, [r2, #1]
 8008576:	2200      	movs	r2, #0
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	4798      	blx	r3
      break;
 800857c:	e04b      	b.n	8008616 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	785b      	ldrb	r3, [r3, #1]
 8008582:	2b0a      	cmp	r3, #10
 8008584:	d017      	beq.n	80085b6 <USBD_CDC_Setup+0xd6>
 8008586:	2b0b      	cmp	r3, #11
 8008588:	d029      	beq.n	80085de <USBD_CDC_Setup+0xfe>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d133      	bne.n	80085f6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008594:	2b03      	cmp	r3, #3
 8008596:	d107      	bne.n	80085a8 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008598:	f107 030c 	add.w	r3, r7, #12
 800859c:	2202      	movs	r2, #2
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 f9c7 	bl	8009934 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085a6:	e02e      	b.n	8008606 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f001 f958 	bl	8009860 <USBD_CtlError>
            ret = USBD_FAIL;
 80085b0:	2302      	movs	r3, #2
 80085b2:	75fb      	strb	r3, [r7, #23]
          break;
 80085b4:	e027      	b.n	8008606 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d107      	bne.n	80085d0 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80085c0:	f107 030f 	add.w	r3, r7, #15
 80085c4:	2201      	movs	r2, #1
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 f9b3 	bl	8009934 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085ce:	e01a      	b.n	8008606 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 f944 	bl	8009860 <USBD_CtlError>
            ret = USBD_FAIL;
 80085d8:	2302      	movs	r3, #2
 80085da:	75fb      	strb	r3, [r7, #23]
          break;
 80085dc:	e013      	b.n	8008606 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d00d      	beq.n	8008604 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f001 f938 	bl	8009860 <USBD_CtlError>
            ret = USBD_FAIL;
 80085f0:	2302      	movs	r3, #2
 80085f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80085f4:	e006      	b.n	8008604 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 f931 	bl	8009860 <USBD_CtlError>
          ret = USBD_FAIL;
 80085fe:	2302      	movs	r3, #2
 8008600:	75fb      	strb	r3, [r7, #23]
          break;
 8008602:	e000      	b.n	8008606 <USBD_CDC_Setup+0x126>
          break;
 8008604:	bf00      	nop
      }
      break;
 8008606:	e006      	b.n	8008616 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f001 f928 	bl	8009860 <USBD_CtlError>
      ret = USBD_FAIL;
 8008610:	2302      	movs	r3, #2
 8008612:	75fb      	strb	r3, [r7, #23]
      break;
 8008614:	bf00      	nop
  }

  return ret;
 8008616:	7dfb      	ldrb	r3, [r7, #23]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008632:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800863a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008642:	2b00      	cmp	r3, #0
 8008644:	d03a      	beq.n	80086bc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008646:	78fa      	ldrb	r2, [r7, #3]
 8008648:	6879      	ldr	r1, [r7, #4]
 800864a:	4613      	mov	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	440b      	add	r3, r1
 8008654:	331c      	adds	r3, #28
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d029      	beq.n	80086b0 <USBD_CDC_DataIn+0x90>
 800865c:	78fa      	ldrb	r2, [r7, #3]
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	4613      	mov	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	440b      	add	r3, r1
 800866a:	331c      	adds	r3, #28
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	78f9      	ldrb	r1, [r7, #3]
 8008670:	68b8      	ldr	r0, [r7, #8]
 8008672:	460b      	mov	r3, r1
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	440b      	add	r3, r1
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	4403      	add	r3, r0
 800867c:	3338      	adds	r3, #56	; 0x38
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	fbb2 f1f3 	udiv	r1, r2, r3
 8008684:	fb03 f301 	mul.w	r3, r3, r1
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d110      	bne.n	80086b0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800868e:	78fa      	ldrb	r2, [r7, #3]
 8008690:	6879      	ldr	r1, [r7, #4]
 8008692:	4613      	mov	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	440b      	add	r3, r1
 800869c:	331c      	adds	r3, #28
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80086a2:	78f9      	ldrb	r1, [r7, #3]
 80086a4:	2300      	movs	r3, #0
 80086a6:	2200      	movs	r2, #0
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 fdc2 	bl	800a232 <USBD_LL_Transmit>
 80086ae:	e003      	b.n	80086b8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	e000      	b.n	80086be <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80086bc:	2302      	movs	r3, #2
  }
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80086da:	78fb      	ldrb	r3, [r7, #3]
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f001 fded 	bl	800a2be <USBD_LL_GetRxDataSize>
 80086e4:	4602      	mov	r2, r0
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00d      	beq.n	8008712 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800870a:	4611      	mov	r1, r2
 800870c:	4798      	blx	r3

    return USBD_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	e000      	b.n	8008714 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008712:	2302      	movs	r3, #2
  }
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800872a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008732:	2b00      	cmp	r3, #0
 8008734:	d015      	beq.n	8008762 <USBD_CDC_EP0_RxReady+0x46>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800873c:	2bff      	cmp	r3, #255	; 0xff
 800873e:	d010      	beq.n	8008762 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800874e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008756:	b292      	uxth	r2, r2
 8008758:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	22ff      	movs	r2, #255	; 0xff
 800875e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2243      	movs	r2, #67	; 0x43
 8008778:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800877a:	4b03      	ldr	r3, [pc, #12]	; (8008788 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	bc80      	pop	{r7}
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	2000009c 	.word	0x2000009c

0800878c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2243      	movs	r2, #67	; 0x43
 8008798:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800879a:	4b03      	ldr	r3, [pc, #12]	; (80087a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bc80      	pop	{r7}
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	20000058 	.word	0x20000058

080087ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2243      	movs	r2, #67	; 0x43
 80087b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80087ba:	4b03      	ldr	r3, [pc, #12]	; (80087c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80087bc:	4618      	mov	r0, r3
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc80      	pop	{r7}
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	200000e0 	.word	0x200000e0

080087cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	220a      	movs	r2, #10
 80087d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80087da:	4b03      	ldr	r3, [pc, #12]	; (80087e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bc80      	pop	{r7}
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	20000014 	.word	0x20000014

080087ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80087f6:	2302      	movs	r3, #2
 80087f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800880c:	7bfb      	ldrb	r3, [r7, #15]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	bc80      	pop	{r7}
 8008816:	4770      	bx	lr

08008818 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	4613      	mov	r3, r2
 8008824:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008836:	88fa      	ldrh	r2, [r7, #6]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	bc80      	pop	{r7}
 8008848:	4770      	bx	lr

0800884a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800884a:	b480      	push	{r7}
 800884c:	b085      	sub	sp, #20
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr

08008870 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800887e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008886:	2b00      	cmp	r3, #0
 8008888:	d01c      	beq.n	80088c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008890:	2b00      	cmp	r3, #0
 8008892:	d115      	bne.n	80088c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2201      	movs	r2, #1
 8008898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	2181      	movs	r1, #129	; 0x81
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 fcbb 	bl	800a232 <USBD_LL_Transmit>

      return USBD_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	e002      	b.n	80088c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e000      	b.n	80088c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80088c4:	2302      	movs	r3, #2
  }
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d017      	beq.n	8008918 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	7c1b      	ldrb	r3, [r3, #16]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d109      	bne.n	8008904 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088fa:	2101      	movs	r1, #1
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 fcbb 	bl	800a278 <USBD_LL_PrepareReceive>
 8008902:	e007      	b.n	8008914 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800890a:	2340      	movs	r3, #64	; 0x40
 800890c:	2101      	movs	r1, #1
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 fcb2 	bl	800a278 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	e000      	b.n	800891a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008918:	2302      	movs	r3, #2
  }
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	60f8      	str	r0, [r7, #12]
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	4613      	mov	r3, r2
 800892e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008936:	2302      	movs	r3, #2
 8008938:	e01a      	b.n	8008970 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	79fa      	ldrb	r2, [r7, #7]
 8008966:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f001 fb1f 	bl	8009fac <USBD_LL_Init>

  return USBD_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d006      	beq.n	800899a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73fb      	strb	r3, [r7, #15]
 8008998:	e001      	b.n	800899e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800899a:	2302      	movs	r3, #2
 800899c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800899e:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bc80      	pop	{r7}
 80089a8:	4770      	bx	lr

080089aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b082      	sub	sp, #8
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 fb54 	bl	800a060 <USBD_LL_Start>

  return USBD_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bc80      	pop	{r7}
 80089d4:	4770      	bx	lr

080089d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80089e2:	2302      	movs	r3, #2
 80089e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00c      	beq.n	8008a0a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	78fa      	ldrb	r2, [r7, #3]
 80089fa:	4611      	mov	r1, r2
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	4798      	blx	r3
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	78fa      	ldrb	r2, [r7, #3]
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	4798      	blx	r3

  return USBD_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fecb 	bl	80097e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a60:	461a      	mov	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008a6e:	f003 031f 	and.w	r3, r3, #31
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d00c      	beq.n	8008a90 <USBD_LL_SetupStage+0x56>
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d302      	bcc.n	8008a80 <USBD_LL_SetupStage+0x46>
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d010      	beq.n	8008aa0 <USBD_LL_SetupStage+0x66>
 8008a7e:	e017      	b.n	8008ab0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f9cb 	bl	8008e24 <USBD_StdDevReq>
      break;
 8008a8e:	e01a      	b.n	8008ac6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fa2d 	bl	8008ef8 <USBD_StdItfReq>
      break;
 8008a9e:	e012      	b.n	8008ac6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fa6b 	bl	8008f84 <USBD_StdEPReq>
      break;
 8008aae:	e00a      	b.n	8008ac6 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008ab6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 fb2e 	bl	800a120 <USBD_LL_StallEP>
      break;
 8008ac4:	bf00      	nop
  }

  return USBD_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	607a      	str	r2, [r7, #4]
 8008adc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d14b      	bne.n	8008b7c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008aea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d134      	bne.n	8008b60 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	68da      	ldr	r2, [r3, #12]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d919      	bls.n	8008b36 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	1ad2      	subs	r2, r2, r3
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	68da      	ldr	r2, [r3, #12]
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d203      	bcs.n	8008b24 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	e002      	b.n	8008b2a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	6879      	ldr	r1, [r7, #4]
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 ff4c 	bl	80099cc <USBD_CtlContinueRx>
 8008b34:	e038      	b.n	8008ba8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d105      	bne.n	8008b58 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 ff49 	bl	80099f0 <USBD_CtlSendStatus>
 8008b5e:	e023      	b.n	8008ba8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b66:	2b05      	cmp	r3, #5
 8008b68:	d11e      	bne.n	8008ba8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008b72:	2100      	movs	r1, #0
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f001 fad3 	bl	800a120 <USBD_LL_StallEP>
 8008b7a:	e015      	b.n	8008ba8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00d      	beq.n	8008ba4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d108      	bne.n	8008ba4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	7afa      	ldrb	r2, [r7, #11]
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	4798      	blx	r3
 8008ba2:	e001      	b.n	8008ba8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	e000      	b.n	8008baa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b086      	sub	sp, #24
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	460b      	mov	r3, r1
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008bc0:	7afb      	ldrb	r3, [r7, #11]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d17f      	bne.n	8008cc6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	3314      	adds	r3, #20
 8008bca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d15c      	bne.n	8008c90 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	68da      	ldr	r2, [r3, #12]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d915      	bls.n	8008c0e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	1ad2      	subs	r2, r2, r3
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 feb6 	bl	800996c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c00:	2300      	movs	r3, #0
 8008c02:	2200      	movs	r2, #0
 8008c04:	2100      	movs	r1, #0
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f001 fb36 	bl	800a278 <USBD_LL_PrepareReceive>
 8008c0c:	e04e      	b.n	8008cac <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	6912      	ldr	r2, [r2, #16]
 8008c16:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c1a:	fb02 f201 	mul.w	r2, r2, r1
 8008c1e:	1a9b      	subs	r3, r3, r2
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d11c      	bne.n	8008c5e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d316      	bcc.n	8008c5e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d20f      	bcs.n	8008c5e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c3e:	2200      	movs	r2, #0
 8008c40:	2100      	movs	r1, #0
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 fe92 	bl	800996c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c50:	2300      	movs	r3, #0
 8008c52:	2200      	movs	r2, #0
 8008c54:	2100      	movs	r1, #0
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f001 fb0e 	bl	800a278 <USBD_LL_PrepareReceive>
 8008c5c:	e026      	b.n	8008cac <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00a      	beq.n	8008c80 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	d105      	bne.n	8008c80 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008c80:	2180      	movs	r1, #128	; 0x80
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f001 fa4c 	bl	800a120 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 fec4 	bl	8009a16 <USBD_CtlReceiveStatus>
 8008c8e:	e00d      	b.n	8008cac <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d004      	beq.n	8008ca4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d103      	bne.n	8008cac <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008ca4:	2180      	movs	r1, #128	; 0x80
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f001 fa3a 	bl	800a120 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d11d      	bne.n	8008cf2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f7ff fe83 	bl	80089c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008cc4:	e015      	b.n	8008cf2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00d      	beq.n	8008cee <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d108      	bne.n	8008cee <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	7afa      	ldrb	r2, [r7, #11]
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	4798      	blx	r3
 8008cec:	e001      	b.n	8008cf2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e000      	b.n	8008cf4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d04:	2340      	movs	r3, #64	; 0x40
 8008d06:	2200      	movs	r2, #0
 8008d08:	2100      	movs	r1, #0
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f001 f9c3 	bl	800a096 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2240      	movs	r2, #64	; 0x40
 8008d1c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d20:	2340      	movs	r3, #64	; 0x40
 8008d22:	2200      	movs	r2, #0
 8008d24:	2180      	movs	r1, #128	; 0x80
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f001 f9b5 	bl	800a096 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2240      	movs	r2, #64	; 0x40
 8008d36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d009      	beq.n	8008d74 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	6852      	ldr	r2, [r2, #4]
 8008d6c:	b2d2      	uxtb	r2, r2
 8008d6e:	4611      	mov	r1, r2
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	4798      	blx	r3
  }

  return USBD_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b083      	sub	sp, #12
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	460b      	mov	r3, r1
 8008d88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	78fa      	ldrb	r2, [r7, #3]
 8008d8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc80      	pop	{r7}
 8008d9a:	4770      	bx	lr

08008d9c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2204      	movs	r2, #4
 8008db4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr

08008dc4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	d105      	bne.n	8008de2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bc80      	pop	{r7}
 8008dec:	4770      	bx	lr

08008dee <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d10b      	bne.n	8008e18 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e3a:	2b20      	cmp	r3, #32
 8008e3c:	d004      	beq.n	8008e48 <USBD_StdDevReq+0x24>
 8008e3e:	2b40      	cmp	r3, #64	; 0x40
 8008e40:	d002      	beq.n	8008e48 <USBD_StdDevReq+0x24>
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d008      	beq.n	8008e58 <USBD_StdDevReq+0x34>
 8008e46:	e04c      	b.n	8008ee2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
      break;
 8008e56:	e049      	b.n	8008eec <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	785b      	ldrb	r3, [r3, #1]
 8008e5c:	2b09      	cmp	r3, #9
 8008e5e:	d83a      	bhi.n	8008ed6 <USBD_StdDevReq+0xb2>
 8008e60:	a201      	add	r2, pc, #4	; (adr r2, 8008e68 <USBD_StdDevReq+0x44>)
 8008e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e66:	bf00      	nop
 8008e68:	08008eb9 	.word	0x08008eb9
 8008e6c:	08008ecd 	.word	0x08008ecd
 8008e70:	08008ed7 	.word	0x08008ed7
 8008e74:	08008ec3 	.word	0x08008ec3
 8008e78:	08008ed7 	.word	0x08008ed7
 8008e7c:	08008e9b 	.word	0x08008e9b
 8008e80:	08008e91 	.word	0x08008e91
 8008e84:	08008ed7 	.word	0x08008ed7
 8008e88:	08008eaf 	.word	0x08008eaf
 8008e8c:	08008ea5 	.word	0x08008ea5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f9d4 	bl	8009240 <USBD_GetDescriptor>
          break;
 8008e98:	e022      	b.n	8008ee0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fb37 	bl	8009510 <USBD_SetAddress>
          break;
 8008ea2:	e01d      	b.n	8008ee0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fb74 	bl	8009594 <USBD_SetConfig>
          break;
 8008eac:	e018      	b.n	8008ee0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fbfd 	bl	80096b0 <USBD_GetConfig>
          break;
 8008eb6:	e013      	b.n	8008ee0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fc2c 	bl	8009718 <USBD_GetStatus>
          break;
 8008ec0:	e00e      	b.n	8008ee0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fc5a 	bl	800977e <USBD_SetFeature>
          break;
 8008eca:	e009      	b.n	8008ee0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fc69 	bl	80097a6 <USBD_ClrFeature>
          break;
 8008ed4:	e004      	b.n	8008ee0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fcc1 	bl	8009860 <USBD_CtlError>
          break;
 8008ede:	bf00      	nop
      }
      break;
 8008ee0:	e004      	b.n	8008eec <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fcbb 	bl	8009860 <USBD_CtlError>
      break;
 8008eea:	bf00      	nop
  }

  return ret;
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop

08008ef8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f0e:	2b20      	cmp	r3, #32
 8008f10:	d003      	beq.n	8008f1a <USBD_StdItfReq+0x22>
 8008f12:	2b40      	cmp	r3, #64	; 0x40
 8008f14:	d001      	beq.n	8008f1a <USBD_StdItfReq+0x22>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d12a      	bne.n	8008f70 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f20:	3b01      	subs	r3, #1
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d81d      	bhi.n	8008f62 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	889b      	ldrh	r3, [r3, #4]
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d813      	bhi.n	8008f58 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	4798      	blx	r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	88db      	ldrh	r3, [r3, #6]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d110      	bne.n	8008f6c <USBD_StdItfReq+0x74>
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10d      	bne.n	8008f6c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fd4d 	bl	80099f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f56:	e009      	b.n	8008f6c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fc80 	bl	8009860 <USBD_CtlError>
          break;
 8008f60:	e004      	b.n	8008f6c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008f62:	6839      	ldr	r1, [r7, #0]
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fc7b 	bl	8009860 <USBD_CtlError>
          break;
 8008f6a:	e000      	b.n	8008f6e <USBD_StdItfReq+0x76>
          break;
 8008f6c:	bf00      	nop
      }
      break;
 8008f6e:	e004      	b.n	8008f7a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fc74 	bl	8009860 <USBD_CtlError>
      break;
 8008f78:	bf00      	nop
  }

  return USBD_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	889b      	ldrh	r3, [r3, #4]
 8008f96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fa0:	2b20      	cmp	r3, #32
 8008fa2:	d004      	beq.n	8008fae <USBD_StdEPReq+0x2a>
 8008fa4:	2b40      	cmp	r3, #64	; 0x40
 8008fa6:	d002      	beq.n	8008fae <USBD_StdEPReq+0x2a>
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d008      	beq.n	8008fbe <USBD_StdEPReq+0x3a>
 8008fac:	e13d      	b.n	800922a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	4798      	blx	r3
      break;
 8008fbc:	e13a      	b.n	8009234 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	d10a      	bne.n	8008fe0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	4798      	blx	r3
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
 8008fde:	e12a      	b.n	8009236 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	785b      	ldrb	r3, [r3, #1]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d03e      	beq.n	8009066 <USBD_StdEPReq+0xe2>
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d002      	beq.n	8008ff2 <USBD_StdEPReq+0x6e>
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d070      	beq.n	80090d2 <USBD_StdEPReq+0x14e>
 8008ff0:	e115      	b.n	800921e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d002      	beq.n	8009002 <USBD_StdEPReq+0x7e>
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d015      	beq.n	800902c <USBD_StdEPReq+0xa8>
 8009000:	e02b      	b.n	800905a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00c      	beq.n	8009022 <USBD_StdEPReq+0x9e>
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	2b80      	cmp	r3, #128	; 0x80
 800900c:	d009      	beq.n	8009022 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 f884 	bl	800a120 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009018:	2180      	movs	r1, #128	; 0x80
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f001 f880 	bl	800a120 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009020:	e020      	b.n	8009064 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fc1b 	bl	8009860 <USBD_CtlError>
              break;
 800902a:	e01b      	b.n	8009064 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	885b      	ldrh	r3, [r3, #2]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10e      	bne.n	8009052 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00b      	beq.n	8009052 <USBD_StdEPReq+0xce>
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	2b80      	cmp	r3, #128	; 0x80
 800903e:	d008      	beq.n	8009052 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	88db      	ldrh	r3, [r3, #6]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d104      	bne.n	8009052 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 f867 	bl	800a120 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fccc 	bl	80099f0 <USBD_CtlSendStatus>

              break;
 8009058:	e004      	b.n	8009064 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fbff 	bl	8009860 <USBD_CtlError>
              break;
 8009062:	bf00      	nop
          }
          break;
 8009064:	e0e0      	b.n	8009228 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800906c:	2b02      	cmp	r3, #2
 800906e:	d002      	beq.n	8009076 <USBD_StdEPReq+0xf2>
 8009070:	2b03      	cmp	r3, #3
 8009072:	d015      	beq.n	80090a0 <USBD_StdEPReq+0x11c>
 8009074:	e026      	b.n	80090c4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009076:	7bbb      	ldrb	r3, [r7, #14]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00c      	beq.n	8009096 <USBD_StdEPReq+0x112>
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	2b80      	cmp	r3, #128	; 0x80
 8009080:	d009      	beq.n	8009096 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009082:	7bbb      	ldrb	r3, [r7, #14]
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f001 f84a 	bl	800a120 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800908c:	2180      	movs	r1, #128	; 0x80
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f001 f846 	bl	800a120 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009094:	e01c      	b.n	80090d0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fbe1 	bl	8009860 <USBD_CtlError>
              break;
 800909e:	e017      	b.n	80090d0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	885b      	ldrh	r3, [r3, #2]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d112      	bne.n	80090ce <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d004      	beq.n	80090bc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f001 f851 	bl	800a15e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fc97 	bl	80099f0 <USBD_CtlSendStatus>
              }
              break;
 80090c2:	e004      	b.n	80090ce <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fbca 	bl	8009860 <USBD_CtlError>
              break;
 80090cc:	e000      	b.n	80090d0 <USBD_StdEPReq+0x14c>
              break;
 80090ce:	bf00      	nop
          }
          break;
 80090d0:	e0aa      	b.n	8009228 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d002      	beq.n	80090e2 <USBD_StdEPReq+0x15e>
 80090dc:	2b03      	cmp	r3, #3
 80090de:	d032      	beq.n	8009146 <USBD_StdEPReq+0x1c2>
 80090e0:	e097      	b.n	8009212 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d007      	beq.n	80090f8 <USBD_StdEPReq+0x174>
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
 80090ea:	2b80      	cmp	r3, #128	; 0x80
 80090ec:	d004      	beq.n	80090f8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fbb5 	bl	8009860 <USBD_CtlError>
                break;
 80090f6:	e091      	b.n	800921c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	da0b      	bge.n	8009118 <USBD_StdEPReq+0x194>
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009106:	4613      	mov	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	3310      	adds	r3, #16
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	4413      	add	r3, r2
 8009114:	3304      	adds	r3, #4
 8009116:	e00b      	b.n	8009130 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800911e:	4613      	mov	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	4413      	add	r3, r2
 800912e:	3304      	adds	r3, #4
 8009130:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2200      	movs	r2, #0
 8009136:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2202      	movs	r2, #2
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fbf8 	bl	8009934 <USBD_CtlSendData>
              break;
 8009144:	e06a      	b.n	800921c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800914a:	2b00      	cmp	r3, #0
 800914c:	da11      	bge.n	8009172 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	f003 020f 	and.w	r2, r3, #15
 8009154:	6879      	ldr	r1, [r7, #4]
 8009156:	4613      	mov	r3, r2
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	4413      	add	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	440b      	add	r3, r1
 8009160:	3318      	adds	r3, #24
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d117      	bne.n	8009198 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fb78 	bl	8009860 <USBD_CtlError>
                  break;
 8009170:	e054      	b.n	800921c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009172:	7bbb      	ldrb	r3, [r7, #14]
 8009174:	f003 020f 	and.w	r2, r3, #15
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	4613      	mov	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	440b      	add	r3, r1
 8009184:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d104      	bne.n	8009198 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fb65 	bl	8009860 <USBD_CtlError>
                  break;
 8009196:	e041      	b.n	800921c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800919c:	2b00      	cmp	r3, #0
 800919e:	da0b      	bge.n	80091b8 <USBD_StdEPReq+0x234>
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091a6:	4613      	mov	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	3310      	adds	r3, #16
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	4413      	add	r3, r2
 80091b4:	3304      	adds	r3, #4
 80091b6:	e00b      	b.n	80091d0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091b8:	7bbb      	ldrb	r3, [r7, #14]
 80091ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091be:	4613      	mov	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	4413      	add	r3, r2
 80091ce:	3304      	adds	r3, #4
 80091d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <USBD_StdEPReq+0x25a>
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
 80091da:	2b80      	cmp	r3, #128	; 0x80
 80091dc:	d103      	bne.n	80091e6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2200      	movs	r2, #0
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	e00e      	b.n	8009204 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80091e6:	7bbb      	ldrb	r3, [r7, #14]
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 ffd6 	bl	800a19c <USBD_LL_IsStallEP>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2201      	movs	r2, #1
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	e002      	b.n	8009204 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2200      	movs	r2, #0
 8009202:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2202      	movs	r2, #2
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fb92 	bl	8009934 <USBD_CtlSendData>
              break;
 8009210:	e004      	b.n	800921c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fb23 	bl	8009860 <USBD_CtlError>
              break;
 800921a:	bf00      	nop
          }
          break;
 800921c:	e004      	b.n	8009228 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fb1d 	bl	8009860 <USBD_CtlError>
          break;
 8009226:	bf00      	nop
      }
      break;
 8009228:	e004      	b.n	8009234 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 fb17 	bl	8009860 <USBD_CtlError>
      break;
 8009232:	bf00      	nop
  }

  return ret;
 8009234:	7bfb      	ldrb	r3, [r7, #15]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	885b      	ldrh	r3, [r3, #2]
 800925a:	0a1b      	lsrs	r3, r3, #8
 800925c:	b29b      	uxth	r3, r3
 800925e:	3b01      	subs	r3, #1
 8009260:	2b06      	cmp	r3, #6
 8009262:	f200 8128 	bhi.w	80094b6 <USBD_GetDescriptor+0x276>
 8009266:	a201      	add	r2, pc, #4	; (adr r2, 800926c <USBD_GetDescriptor+0x2c>)
 8009268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926c:	08009289 	.word	0x08009289
 8009270:	080092a1 	.word	0x080092a1
 8009274:	080092e1 	.word	0x080092e1
 8009278:	080094b7 	.word	0x080094b7
 800927c:	080094b7 	.word	0x080094b7
 8009280:	08009457 	.word	0x08009457
 8009284:	08009483 	.word	0x08009483
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	7c12      	ldrb	r2, [r2, #16]
 8009294:	f107 0108 	add.w	r1, r7, #8
 8009298:	4610      	mov	r0, r2
 800929a:	4798      	blx	r3
 800929c:	60f8      	str	r0, [r7, #12]
      break;
 800929e:	e112      	b.n	80094c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	7c1b      	ldrb	r3, [r3, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10d      	bne.n	80092c4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b0:	f107 0208 	add.w	r2, r7, #8
 80092b4:	4610      	mov	r0, r2
 80092b6:	4798      	blx	r3
 80092b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3301      	adds	r3, #1
 80092be:	2202      	movs	r2, #2
 80092c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092c2:	e100      	b.n	80094c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	f107 0208 	add.w	r2, r7, #8
 80092d0:	4610      	mov	r0, r2
 80092d2:	4798      	blx	r3
 80092d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	3301      	adds	r3, #1
 80092da:	2202      	movs	r2, #2
 80092dc:	701a      	strb	r2, [r3, #0]
      break;
 80092de:	e0f2      	b.n	80094c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	885b      	ldrh	r3, [r3, #2]
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b05      	cmp	r3, #5
 80092e8:	f200 80ac 	bhi.w	8009444 <USBD_GetDescriptor+0x204>
 80092ec:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <USBD_GetDescriptor+0xb4>)
 80092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f2:	bf00      	nop
 80092f4:	0800930d 	.word	0x0800930d
 80092f8:	08009341 	.word	0x08009341
 80092fc:	08009375 	.word	0x08009375
 8009300:	080093a9 	.word	0x080093a9
 8009304:	080093dd 	.word	0x080093dd
 8009308:	08009411 	.word	0x08009411
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00b      	beq.n	8009330 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	7c12      	ldrb	r2, [r2, #16]
 8009324:	f107 0108 	add.w	r1, r7, #8
 8009328:	4610      	mov	r0, r2
 800932a:	4798      	blx	r3
 800932c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800932e:	e091      	b.n	8009454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fa94 	bl	8009860 <USBD_CtlError>
            err++;
 8009338:	7afb      	ldrb	r3, [r7, #11]
 800933a:	3301      	adds	r3, #1
 800933c:	72fb      	strb	r3, [r7, #11]
          break;
 800933e:	e089      	b.n	8009454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	7c12      	ldrb	r2, [r2, #16]
 8009358:	f107 0108 	add.w	r1, r7, #8
 800935c:	4610      	mov	r0, r2
 800935e:	4798      	blx	r3
 8009360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009362:	e077      	b.n	8009454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa7a 	bl	8009860 <USBD_CtlError>
            err++;
 800936c:	7afb      	ldrb	r3, [r7, #11]
 800936e:	3301      	adds	r3, #1
 8009370:	72fb      	strb	r3, [r7, #11]
          break;
 8009372:	e06f      	b.n	8009454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00b      	beq.n	8009398 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	7c12      	ldrb	r2, [r2, #16]
 800938c:	f107 0108 	add.w	r1, r7, #8
 8009390:	4610      	mov	r0, r2
 8009392:	4798      	blx	r3
 8009394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009396:	e05d      	b.n	8009454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fa60 	bl	8009860 <USBD_CtlError>
            err++;
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	3301      	adds	r3, #1
 80093a4:	72fb      	strb	r3, [r7, #11]
          break;
 80093a6:	e055      	b.n	8009454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00b      	beq.n	80093cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	7c12      	ldrb	r2, [r2, #16]
 80093c0:	f107 0108 	add.w	r1, r7, #8
 80093c4:	4610      	mov	r0, r2
 80093c6:	4798      	blx	r3
 80093c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ca:	e043      	b.n	8009454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fa46 	bl	8009860 <USBD_CtlError>
            err++;
 80093d4:	7afb      	ldrb	r3, [r7, #11]
 80093d6:	3301      	adds	r3, #1
 80093d8:	72fb      	strb	r3, [r7, #11]
          break;
 80093da:	e03b      	b.n	8009454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00b      	beq.n	8009400 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	7c12      	ldrb	r2, [r2, #16]
 80093f4:	f107 0108 	add.w	r1, r7, #8
 80093f8:	4610      	mov	r0, r2
 80093fa:	4798      	blx	r3
 80093fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093fe:	e029      	b.n	8009454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fa2c 	bl	8009860 <USBD_CtlError>
            err++;
 8009408:	7afb      	ldrb	r3, [r7, #11]
 800940a:	3301      	adds	r3, #1
 800940c:	72fb      	strb	r3, [r7, #11]
          break;
 800940e:	e021      	b.n	8009454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00b      	beq.n	8009434 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	7c12      	ldrb	r2, [r2, #16]
 8009428:	f107 0108 	add.w	r1, r7, #8
 800942c:	4610      	mov	r0, r2
 800942e:	4798      	blx	r3
 8009430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009432:	e00f      	b.n	8009454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa12 	bl	8009860 <USBD_CtlError>
            err++;
 800943c:	7afb      	ldrb	r3, [r7, #11]
 800943e:	3301      	adds	r3, #1
 8009440:	72fb      	strb	r3, [r7, #11]
          break;
 8009442:	e007      	b.n	8009454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fa0a 	bl	8009860 <USBD_CtlError>
          err++;
 800944c:	7afb      	ldrb	r3, [r7, #11]
 800944e:	3301      	adds	r3, #1
 8009450:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009452:	e038      	b.n	80094c6 <USBD_GetDescriptor+0x286>
 8009454:	e037      	b.n	80094c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	7c1b      	ldrb	r3, [r3, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d109      	bne.n	8009472 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009466:	f107 0208 	add.w	r2, r7, #8
 800946a:	4610      	mov	r0, r2
 800946c:	4798      	blx	r3
 800946e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009470:	e029      	b.n	80094c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f9f3 	bl	8009860 <USBD_CtlError>
        err++;
 800947a:	7afb      	ldrb	r3, [r7, #11]
 800947c:	3301      	adds	r3, #1
 800947e:	72fb      	strb	r3, [r7, #11]
      break;
 8009480:	e021      	b.n	80094c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	7c1b      	ldrb	r3, [r3, #16]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10d      	bne.n	80094a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009492:	f107 0208 	add.w	r2, r7, #8
 8009496:	4610      	mov	r0, r2
 8009498:	4798      	blx	r3
 800949a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	3301      	adds	r3, #1
 80094a0:	2207      	movs	r2, #7
 80094a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094a4:	e00f      	b.n	80094c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f9d9 	bl	8009860 <USBD_CtlError>
        err++;
 80094ae:	7afb      	ldrb	r3, [r7, #11]
 80094b0:	3301      	adds	r3, #1
 80094b2:	72fb      	strb	r3, [r7, #11]
      break;
 80094b4:	e007      	b.n	80094c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f9d1 	bl	8009860 <USBD_CtlError>
      err++;
 80094be:	7afb      	ldrb	r3, [r7, #11]
 80094c0:	3301      	adds	r3, #1
 80094c2:	72fb      	strb	r3, [r7, #11]
      break;
 80094c4:	bf00      	nop
  }

  if (err != 0U)
 80094c6:	7afb      	ldrb	r3, [r7, #11]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d11c      	bne.n	8009506 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80094cc:	893b      	ldrh	r3, [r7, #8]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d011      	beq.n	80094f6 <USBD_GetDescriptor+0x2b6>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	88db      	ldrh	r3, [r3, #6]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00d      	beq.n	80094f6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	88da      	ldrh	r2, [r3, #6]
 80094de:	893b      	ldrh	r3, [r7, #8]
 80094e0:	4293      	cmp	r3, r2
 80094e2:	bf28      	it	cs
 80094e4:	4613      	movcs	r3, r2
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80094ea:	893b      	ldrh	r3, [r7, #8]
 80094ec:	461a      	mov	r2, r3
 80094ee:	68f9      	ldr	r1, [r7, #12]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fa1f 	bl	8009934 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	88db      	ldrh	r3, [r3, #6]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d104      	bne.n	8009508 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fa76 	bl	80099f0 <USBD_CtlSendStatus>
 8009504:	e000      	b.n	8009508 <USBD_GetDescriptor+0x2c8>
    return;
 8009506:	bf00      	nop
    }
  }
}
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop

08009510 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	889b      	ldrh	r3, [r3, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d130      	bne.n	8009584 <USBD_SetAddress+0x74>
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	88db      	ldrh	r3, [r3, #6]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d12c      	bne.n	8009584 <USBD_SetAddress+0x74>
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	885b      	ldrh	r3, [r3, #2]
 800952e:	2b7f      	cmp	r3, #127	; 0x7f
 8009530:	d828      	bhi.n	8009584 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	885b      	ldrh	r3, [r3, #2]
 8009536:	b2db      	uxtb	r3, r3
 8009538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800953c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009544:	2b03      	cmp	r3, #3
 8009546:	d104      	bne.n	8009552 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f988 	bl	8009860 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009550:	e01c      	b.n	800958c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	7bfa      	ldrb	r2, [r7, #15]
 8009556:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800955a:	7bfb      	ldrb	r3, [r7, #15]
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fe48 	bl	800a1f4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fa43 	bl	80099f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d004      	beq.n	800957a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2202      	movs	r2, #2
 8009574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009578:	e008      	b.n	800958c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009582:	e003      	b.n	800958c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009584:	6839      	ldr	r1, [r7, #0]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f96a 	bl	8009860 <USBD_CtlError>
  }
}
 800958c:	bf00      	nop
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	885b      	ldrh	r3, [r3, #2]
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	4b41      	ldr	r3, [pc, #260]	; (80096ac <USBD_SetConfig+0x118>)
 80095a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80095a8:	4b40      	ldr	r3, [pc, #256]	; (80096ac <USBD_SetConfig+0x118>)
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d904      	bls.n	80095ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f954 	bl	8009860 <USBD_CtlError>
 80095b8:	e075      	b.n	80096a6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d002      	beq.n	80095ca <USBD_SetConfig+0x36>
 80095c4:	2b03      	cmp	r3, #3
 80095c6:	d023      	beq.n	8009610 <USBD_SetConfig+0x7c>
 80095c8:	e062      	b.n	8009690 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80095ca:	4b38      	ldr	r3, [pc, #224]	; (80096ac <USBD_SetConfig+0x118>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d01a      	beq.n	8009608 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80095d2:	4b36      	ldr	r3, [pc, #216]	; (80096ac <USBD_SetConfig+0x118>)
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2203      	movs	r2, #3
 80095e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80095e4:	4b31      	ldr	r3, [pc, #196]	; (80096ac <USBD_SetConfig+0x118>)
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7ff f9f3 	bl	80089d6 <USBD_SetClassConfig>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d104      	bne.n	8009600 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f931 	bl	8009860 <USBD_CtlError>
            return;
 80095fe:	e052      	b.n	80096a6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f9f5 	bl	80099f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009606:	e04e      	b.n	80096a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f9f1 	bl	80099f0 <USBD_CtlSendStatus>
        break;
 800960e:	e04a      	b.n	80096a6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009610:	4b26      	ldr	r3, [pc, #152]	; (80096ac <USBD_SetConfig+0x118>)
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d112      	bne.n	800963e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2202      	movs	r2, #2
 800961c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009620:	4b22      	ldr	r3, [pc, #136]	; (80096ac <USBD_SetConfig+0x118>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	461a      	mov	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800962a:	4b20      	ldr	r3, [pc, #128]	; (80096ac <USBD_SetConfig+0x118>)
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7ff f9ef 	bl	8008a14 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f9da 	bl	80099f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800963c:	e033      	b.n	80096a6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800963e:	4b1b      	ldr	r3, [pc, #108]	; (80096ac <USBD_SetConfig+0x118>)
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	429a      	cmp	r2, r3
 800964a:	d01d      	beq.n	8009688 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	4619      	mov	r1, r3
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7ff f9dd 	bl	8008a14 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800965a:	4b14      	ldr	r3, [pc, #80]	; (80096ac <USBD_SetConfig+0x118>)
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009664:	4b11      	ldr	r3, [pc, #68]	; (80096ac <USBD_SetConfig+0x118>)
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7ff f9b3 	bl	80089d6 <USBD_SetClassConfig>
 8009670:	4603      	mov	r3, r0
 8009672:	2b02      	cmp	r3, #2
 8009674:	d104      	bne.n	8009680 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009676:	6839      	ldr	r1, [r7, #0]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f8f1 	bl	8009860 <USBD_CtlError>
            return;
 800967e:	e012      	b.n	80096a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f9b5 	bl	80099f0 <USBD_CtlSendStatus>
        break;
 8009686:	e00e      	b.n	80096a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f9b1 	bl	80099f0 <USBD_CtlSendStatus>
        break;
 800968e:	e00a      	b.n	80096a6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f8e4 	bl	8009860 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009698:	4b04      	ldr	r3, [pc, #16]	; (80096ac <USBD_SetConfig+0x118>)
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	4619      	mov	r1, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff f9b8 	bl	8008a14 <USBD_ClrClassConfig>
        break;
 80096a4:	bf00      	nop
    }
  }
}
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	200001bc 	.word	0x200001bc

080096b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	88db      	ldrh	r3, [r3, #6]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d004      	beq.n	80096cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f8cb 	bl	8009860 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096ca:	e021      	b.n	8009710 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	db17      	blt.n	8009706 <USBD_GetConfig+0x56>
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	dd02      	ble.n	80096e0 <USBD_GetConfig+0x30>
 80096da:	2b03      	cmp	r3, #3
 80096dc:	d00b      	beq.n	80096f6 <USBD_GetConfig+0x46>
 80096de:	e012      	b.n	8009706 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	3308      	adds	r3, #8
 80096ea:	2201      	movs	r2, #1
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f920 	bl	8009934 <USBD_CtlSendData>
        break;
 80096f4:	e00c      	b.n	8009710 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	3304      	adds	r3, #4
 80096fa:	2201      	movs	r2, #1
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f918 	bl	8009934 <USBD_CtlSendData>
        break;
 8009704:	e004      	b.n	8009710 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f8a9 	bl	8009860 <USBD_CtlError>
        break;
 800970e:	bf00      	nop
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009728:	3b01      	subs	r3, #1
 800972a:	2b02      	cmp	r3, #2
 800972c:	d81e      	bhi.n	800976c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	88db      	ldrh	r3, [r3, #6]
 8009732:	2b02      	cmp	r3, #2
 8009734:	d004      	beq.n	8009740 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f891 	bl	8009860 <USBD_CtlError>
        break;
 800973e:	e01a      	b.n	8009776 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800974c:	2b00      	cmp	r3, #0
 800974e:	d005      	beq.n	800975c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	f043 0202 	orr.w	r2, r3, #2
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	330c      	adds	r3, #12
 8009760:	2202      	movs	r2, #2
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f8e5 	bl	8009934 <USBD_CtlSendData>
      break;
 800976a:	e004      	b.n	8009776 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f876 	bl	8009860 <USBD_CtlError>
      break;
 8009774:	bf00      	nop
  }
}
 8009776:	bf00      	nop
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b082      	sub	sp, #8
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	885b      	ldrh	r3, [r3, #2]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d106      	bne.n	800979e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f929 	bl	80099f0 <USBD_CtlSendStatus>
  }
}
 800979e:	bf00      	nop
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b082      	sub	sp, #8
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b6:	3b01      	subs	r3, #1
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d80b      	bhi.n	80097d4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	885b      	ldrh	r3, [r3, #2]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d10c      	bne.n	80097de <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f90f 	bl	80099f0 <USBD_CtlSendStatus>
      }
      break;
 80097d2:	e004      	b.n	80097de <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f842 	bl	8009860 <USBD_CtlError>
      break;
 80097dc:	e000      	b.n	80097e0 <USBD_ClrFeature+0x3a>
      break;
 80097de:	bf00      	nop
  }
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781a      	ldrb	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	785a      	ldrb	r2, [r3, #1]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	3302      	adds	r3, #2
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	b29a      	uxth	r2, r3
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	3303      	adds	r3, #3
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	b29b      	uxth	r3, r3
 8009812:	021b      	lsls	r3, r3, #8
 8009814:	b29b      	uxth	r3, r3
 8009816:	4413      	add	r3, r2
 8009818:	b29a      	uxth	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	3304      	adds	r3, #4
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	b29a      	uxth	r2, r3
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	3305      	adds	r3, #5
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	b29b      	uxth	r3, r3
 800982e:	021b      	lsls	r3, r3, #8
 8009830:	b29b      	uxth	r3, r3
 8009832:	4413      	add	r3, r2
 8009834:	b29a      	uxth	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	3306      	adds	r3, #6
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	b29a      	uxth	r2, r3
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	3307      	adds	r3, #7
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	b29b      	uxth	r3, r3
 800984a:	021b      	lsls	r3, r3, #8
 800984c:	b29b      	uxth	r3, r3
 800984e:	4413      	add	r3, r2
 8009850:	b29a      	uxth	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	80da      	strh	r2, [r3, #6]

}
 8009856:	bf00      	nop
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	bc80      	pop	{r7}
 800985e:	4770      	bx	lr

08009860 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800986a:	2180      	movs	r1, #128	; 0x80
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fc57 	bl	800a120 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009872:	2100      	movs	r1, #0
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fc53 	bl	800a120 <USBD_LL_StallEP>
}
 800987a:	bf00      	nop
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b086      	sub	sp, #24
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d032      	beq.n	80098fe <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 f834 	bl	8009906 <USBD_GetLen>
 800989e:	4603      	mov	r3, r0
 80098a0:	3301      	adds	r3, #1
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	75fa      	strb	r2, [r7, #23]
 80098b2:	461a      	mov	r2, r3
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	4413      	add	r3, r2
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	7812      	ldrb	r2, [r2, #0]
 80098bc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	1c5a      	adds	r2, r3, #1
 80098c2:	75fa      	strb	r2, [r7, #23]
 80098c4:	461a      	mov	r2, r3
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	4413      	add	r3, r2
 80098ca:	2203      	movs	r2, #3
 80098cc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80098ce:	e012      	b.n	80098f6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	1c5a      	adds	r2, r3, #1
 80098d4:	60fa      	str	r2, [r7, #12]
 80098d6:	7dfa      	ldrb	r2, [r7, #23]
 80098d8:	1c51      	adds	r1, r2, #1
 80098da:	75f9      	strb	r1, [r7, #23]
 80098dc:	4611      	mov	r1, r2
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	440a      	add	r2, r1
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	75fa      	strb	r2, [r7, #23]
 80098ec:	461a      	mov	r2, r3
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	4413      	add	r3, r2
 80098f2:	2200      	movs	r2, #0
 80098f4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1e8      	bne.n	80098d0 <USBD_GetString+0x4e>
    }
  }
}
 80098fe:	bf00      	nop
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009906:	b480      	push	{r7}
 8009908:	b085      	sub	sp, #20
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009912:	e005      	b.n	8009920 <USBD_GetLen+0x1a>
  {
    len++;
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	3301      	adds	r3, #1
 8009918:	73fb      	strb	r3, [r7, #15]
    buf++;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	3301      	adds	r3, #1
 800991e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1f5      	bne.n	8009914 <USBD_GetLen+0xe>
  }

  return len;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	bc80      	pop	{r7}
 8009932:	4770      	bx	lr

08009934 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	4613      	mov	r3, r2
 8009940:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2202      	movs	r2, #2
 8009946:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800994a:	88fa      	ldrh	r2, [r7, #6]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009950:	88fa      	ldrh	r2, [r7, #6]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009956:	88fb      	ldrh	r3, [r7, #6]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	2100      	movs	r1, #0
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f000 fc68 	bl	800a232 <USBD_LL_Transmit>

  return USBD_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	4613      	mov	r3, r2
 8009978:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800997a:	88fb      	ldrh	r3, [r7, #6]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	2100      	movs	r1, #0
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 fc56 	bl	800a232 <USBD_LL_Transmit>

  return USBD_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	4613      	mov	r3, r2
 800999c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2203      	movs	r2, #3
 80099a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80099a6:	88fa      	ldrh	r2, [r7, #6]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80099ae:	88fa      	ldrh	r2, [r7, #6]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099b6:	88fb      	ldrh	r3, [r7, #6]
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	2100      	movs	r1, #0
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 fc5b 	bl	800a278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	4613      	mov	r3, r2
 80099d8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099da:	88fb      	ldrh	r3, [r7, #6]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	2100      	movs	r1, #0
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f000 fc49 	bl	800a278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2204      	movs	r2, #4
 80099fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a00:	2300      	movs	r3, #0
 8009a02:	2200      	movs	r2, #0
 8009a04:	2100      	movs	r1, #0
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fc13 	bl	800a232 <USBD_LL_Transmit>

  return USBD_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2205      	movs	r2, #5
 8009a22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a26:	2300      	movs	r3, #0
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fc23 	bl	800a278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a40:	2200      	movs	r2, #0
 8009a42:	4912      	ldr	r1, [pc, #72]	; (8009a8c <MX_USB_DEVICE_Init+0x50>)
 8009a44:	4812      	ldr	r0, [pc, #72]	; (8009a90 <MX_USB_DEVICE_Init+0x54>)
 8009a46:	f7fe ff6c 	bl	8008922 <USBD_Init>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a50:	f7f8 ffa8 	bl	80029a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a54:	490f      	ldr	r1, [pc, #60]	; (8009a94 <MX_USB_DEVICE_Init+0x58>)
 8009a56:	480e      	ldr	r0, [pc, #56]	; (8009a90 <MX_USB_DEVICE_Init+0x54>)
 8009a58:	f7fe ff8e 	bl	8008978 <USBD_RegisterClass>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a62:	f7f8 ff9f 	bl	80029a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a66:	490c      	ldr	r1, [pc, #48]	; (8009a98 <MX_USB_DEVICE_Init+0x5c>)
 8009a68:	4809      	ldr	r0, [pc, #36]	; (8009a90 <MX_USB_DEVICE_Init+0x54>)
 8009a6a:	f7fe febf 	bl	80087ec <USBD_CDC_RegisterInterface>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a74:	f7f8 ff96 	bl	80029a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a78:	4805      	ldr	r0, [pc, #20]	; (8009a90 <MX_USB_DEVICE_Init+0x54>)
 8009a7a:	f7fe ff96 	bl	80089aa <USBD_Start>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a84:	f7f8 ff8e 	bl	80029a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a88:	bf00      	nop
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20000134 	.word	0x20000134
 8009a90:	20000864 	.word	0x20000864
 8009a94:	20000020 	.word	0x20000020
 8009a98:	20000124 	.word	0x20000124

08009a9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	4905      	ldr	r1, [pc, #20]	; (8009ab8 <CDC_Init_FS+0x1c>)
 8009aa4:	4805      	ldr	r0, [pc, #20]	; (8009abc <CDC_Init_FS+0x20>)
 8009aa6:	f7fe feb7 	bl	8008818 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009aaa:	4905      	ldr	r1, [pc, #20]	; (8009ac0 <CDC_Init_FS+0x24>)
 8009aac:	4803      	ldr	r0, [pc, #12]	; (8009abc <CDC_Init_FS+0x20>)
 8009aae:	f7fe fecc 	bl	800884a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009ab2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	20000f10 	.word	0x20000f10
 8009abc:	20000864 	.word	0x20000864
 8009ac0:	20000b28 	.word	0x20000b28

08009ac4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ac8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bc80      	pop	{r7}
 8009ad0:	4770      	bx	lr
	...

08009ad4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	4603      	mov	r3, r0
 8009adc:	6039      	str	r1, [r7, #0]
 8009ade:	71fb      	strb	r3, [r7, #7]
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	2b23      	cmp	r3, #35	; 0x23
 8009ae8:	d84a      	bhi.n	8009b80 <CDC_Control_FS+0xac>
 8009aea:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <CDC_Control_FS+0x1c>)
 8009aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af0:	08009b81 	.word	0x08009b81
 8009af4:	08009b81 	.word	0x08009b81
 8009af8:	08009b81 	.word	0x08009b81
 8009afc:	08009b81 	.word	0x08009b81
 8009b00:	08009b81 	.word	0x08009b81
 8009b04:	08009b81 	.word	0x08009b81
 8009b08:	08009b81 	.word	0x08009b81
 8009b0c:	08009b81 	.word	0x08009b81
 8009b10:	08009b81 	.word	0x08009b81
 8009b14:	08009b81 	.word	0x08009b81
 8009b18:	08009b81 	.word	0x08009b81
 8009b1c:	08009b81 	.word	0x08009b81
 8009b20:	08009b81 	.word	0x08009b81
 8009b24:	08009b81 	.word	0x08009b81
 8009b28:	08009b81 	.word	0x08009b81
 8009b2c:	08009b81 	.word	0x08009b81
 8009b30:	08009b81 	.word	0x08009b81
 8009b34:	08009b81 	.word	0x08009b81
 8009b38:	08009b81 	.word	0x08009b81
 8009b3c:	08009b81 	.word	0x08009b81
 8009b40:	08009b81 	.word	0x08009b81
 8009b44:	08009b81 	.word	0x08009b81
 8009b48:	08009b81 	.word	0x08009b81
 8009b4c:	08009b81 	.word	0x08009b81
 8009b50:	08009b81 	.word	0x08009b81
 8009b54:	08009b81 	.word	0x08009b81
 8009b58:	08009b81 	.word	0x08009b81
 8009b5c:	08009b81 	.word	0x08009b81
 8009b60:	08009b81 	.word	0x08009b81
 8009b64:	08009b81 	.word	0x08009b81
 8009b68:	08009b81 	.word	0x08009b81
 8009b6c:	08009b81 	.word	0x08009b81
 8009b70:	08009b81 	.word	0x08009b81
 8009b74:	08009b81 	.word	0x08009b81
 8009b78:	08009b81 	.word	0x08009b81
 8009b7c:	08009b81 	.word	0x08009b81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b80:	bf00      	nop
  }

  return (USBD_OK);
 8009b82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bc80      	pop	{r7}
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop

08009b90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	resiveRx(Buf, Len);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7f8 fe8f 	bl	80028c0 <resiveRx>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ba2:	6879      	ldr	r1, [r7, #4]
 8009ba4:	4805      	ldr	r0, [pc, #20]	; (8009bbc <CDC_Receive_FS+0x2c>)
 8009ba6:	f7fe fe50 	bl	800884a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009baa:	4804      	ldr	r0, [pc, #16]	; (8009bbc <CDC_Receive_FS+0x2c>)
 8009bac:	f7fe fe8f 	bl	80088ce <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009bb0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000864 	.word	0x20000864

08009bc0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009bd0:	4b0d      	ldr	r3, [pc, #52]	; (8009c08 <CDC_Transmit_FS+0x48>)
 8009bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e00b      	b.n	8009bfe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009be6:	887b      	ldrh	r3, [r7, #2]
 8009be8:	461a      	mov	r2, r3
 8009bea:	6879      	ldr	r1, [r7, #4]
 8009bec:	4806      	ldr	r0, [pc, #24]	; (8009c08 <CDC_Transmit_FS+0x48>)
 8009bee:	f7fe fe13 	bl	8008818 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009bf2:	4805      	ldr	r0, [pc, #20]	; (8009c08 <CDC_Transmit_FS+0x48>)
 8009bf4:	f7fe fe3c 	bl	8008870 <USBD_CDC_TransmitPacket>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20000864 	.word	0x20000864

08009c0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2212      	movs	r2, #18
 8009c1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c1e:	4b03      	ldr	r3, [pc, #12]	; (8009c2c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bc80      	pop	{r7}
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	20000150 	.word	0x20000150

08009c30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2204      	movs	r2, #4
 8009c40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c42:	4b03      	ldr	r3, [pc, #12]	; (8009c50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bc80      	pop	{r7}
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	20000164 	.word	0x20000164

08009c54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	6039      	str	r1, [r7, #0]
 8009c5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c60:	79fb      	ldrb	r3, [r7, #7]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d105      	bne.n	8009c72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	4907      	ldr	r1, [pc, #28]	; (8009c88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c6a:	4808      	ldr	r0, [pc, #32]	; (8009c8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009c6c:	f7ff fe09 	bl	8009882 <USBD_GetString>
 8009c70:	e004      	b.n	8009c7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	4904      	ldr	r1, [pc, #16]	; (8009c88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c76:	4805      	ldr	r0, [pc, #20]	; (8009c8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009c78:	f7ff fe03 	bl	8009882 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c7c:	4b02      	ldr	r3, [pc, #8]	; (8009c88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	200012f8 	.word	0x200012f8
 8009c8c:	0800a418 	.word	0x0800a418

08009c90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	6039      	str	r1, [r7, #0]
 8009c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	4904      	ldr	r1, [pc, #16]	; (8009cb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ca0:	4804      	ldr	r0, [pc, #16]	; (8009cb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ca2:	f7ff fdee 	bl	8009882 <USBD_GetString>
  return USBD_StrDesc;
 8009ca6:	4b02      	ldr	r3, [pc, #8]	; (8009cb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	200012f8 	.word	0x200012f8
 8009cb4:	0800a430 	.word	0x0800a430

08009cb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	6039      	str	r1, [r7, #0]
 8009cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	221a      	movs	r2, #26
 8009cc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009cca:	f000 f843 	bl	8009d54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009cce:	4b02      	ldr	r3, [pc, #8]	; (8009cd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	20000168 	.word	0x20000168

08009cdc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	6039      	str	r1, [r7, #0]
 8009ce6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d105      	bne.n	8009cfa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	4907      	ldr	r1, [pc, #28]	; (8009d10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cf2:	4808      	ldr	r0, [pc, #32]	; (8009d14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cf4:	f7ff fdc5 	bl	8009882 <USBD_GetString>
 8009cf8:	e004      	b.n	8009d04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	4904      	ldr	r1, [pc, #16]	; (8009d10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cfe:	4805      	ldr	r0, [pc, #20]	; (8009d14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d00:	f7ff fdbf 	bl	8009882 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d04:	4b02      	ldr	r3, [pc, #8]	; (8009d10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	200012f8 	.word	0x200012f8
 8009d14:	0800a444 	.word	0x0800a444

08009d18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	6039      	str	r1, [r7, #0]
 8009d22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d24:	79fb      	ldrb	r3, [r7, #7]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	4907      	ldr	r1, [pc, #28]	; (8009d4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d2e:	4808      	ldr	r0, [pc, #32]	; (8009d50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d30:	f7ff fda7 	bl	8009882 <USBD_GetString>
 8009d34:	e004      	b.n	8009d40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	4904      	ldr	r1, [pc, #16]	; (8009d4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d3a:	4805      	ldr	r0, [pc, #20]	; (8009d50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d3c:	f7ff fda1 	bl	8009882 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d40:	4b02      	ldr	r3, [pc, #8]	; (8009d4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	200012f8 	.word	0x200012f8
 8009d50:	0800a450 	.word	0x0800a450

08009d54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d5a:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <Get_SerialNum+0x44>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d60:	4b0e      	ldr	r3, [pc, #56]	; (8009d9c <Get_SerialNum+0x48>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d66:	4b0e      	ldr	r3, [pc, #56]	; (8009da0 <Get_SerialNum+0x4c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4413      	add	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d009      	beq.n	8009d8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d7a:	2208      	movs	r2, #8
 8009d7c:	4909      	ldr	r1, [pc, #36]	; (8009da4 <Get_SerialNum+0x50>)
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 f814 	bl	8009dac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d84:	2204      	movs	r2, #4
 8009d86:	4908      	ldr	r1, [pc, #32]	; (8009da8 <Get_SerialNum+0x54>)
 8009d88:	68b8      	ldr	r0, [r7, #8]
 8009d8a:	f000 f80f 	bl	8009dac <IntToUnicode>
  }
}
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	1ffff7e8 	.word	0x1ffff7e8
 8009d9c:	1ffff7ec 	.word	0x1ffff7ec
 8009da0:	1ffff7f0 	.word	0x1ffff7f0
 8009da4:	2000016a 	.word	0x2000016a
 8009da8:	2000017a 	.word	0x2000017a

08009dac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	4613      	mov	r3, r2
 8009db8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	75fb      	strb	r3, [r7, #23]
 8009dc2:	e027      	b.n	8009e14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	0f1b      	lsrs	r3, r3, #28
 8009dc8:	2b09      	cmp	r3, #9
 8009dca:	d80b      	bhi.n	8009de4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	0f1b      	lsrs	r3, r3, #28
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	440b      	add	r3, r1
 8009ddc:	3230      	adds	r2, #48	; 0x30
 8009dde:	b2d2      	uxtb	r2, r2
 8009de0:	701a      	strb	r2, [r3, #0]
 8009de2:	e00a      	b.n	8009dfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	0f1b      	lsrs	r3, r3, #28
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	005b      	lsls	r3, r3, #1
 8009dee:	4619      	mov	r1, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	440b      	add	r3, r1
 8009df4:	3237      	adds	r2, #55	; 0x37
 8009df6:	b2d2      	uxtb	r2, r2
 8009df8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	3301      	adds	r3, #1
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	4413      	add	r3, r2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e0e:	7dfb      	ldrb	r3, [r7, #23]
 8009e10:	3301      	adds	r3, #1
 8009e12:	75fb      	strb	r3, [r7, #23]
 8009e14:	7dfa      	ldrb	r2, [r7, #23]
 8009e16:	79fb      	ldrb	r3, [r7, #7]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d3d3      	bcc.n	8009dc4 <IntToUnicode+0x18>
  }
}
 8009e1c:	bf00      	nop
 8009e1e:	371c      	adds	r7, #28
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr
	...

08009e28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a0d      	ldr	r2, [pc, #52]	; (8009e6c <HAL_PCD_MspInit+0x44>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d113      	bne.n	8009e62 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009e3a:	4b0d      	ldr	r3, [pc, #52]	; (8009e70 <HAL_PCD_MspInit+0x48>)
 8009e3c:	69db      	ldr	r3, [r3, #28]
 8009e3e:	4a0c      	ldr	r2, [pc, #48]	; (8009e70 <HAL_PCD_MspInit+0x48>)
 8009e40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e44:	61d3      	str	r3, [r2, #28]
 8009e46:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <HAL_PCD_MspInit+0x48>)
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e4e:	60fb      	str	r3, [r7, #12]
 8009e50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009e52:	2200      	movs	r2, #0
 8009e54:	2100      	movs	r1, #0
 8009e56:	2014      	movs	r0, #20
 8009e58:	f7f9 f80d 	bl	8002e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009e5c:	2014      	movs	r0, #20
 8009e5e:	f7f9 f826 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e62:	bf00      	nop
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	40005c00 	.word	0x40005c00
 8009e70:	40021000 	.word	0x40021000

08009e74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009e88:	4619      	mov	r1, r3
 8009e8a:	4610      	mov	r0, r2
 8009e8c:	f7fe fdd5 	bl	8008a3a <USBD_LL_SetupStage>
}
 8009e90:	bf00      	nop
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009eaa:	78fa      	ldrb	r2, [r7, #3]
 8009eac:	6879      	ldr	r1, [r7, #4]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	00db      	lsls	r3, r3, #3
 8009eb6:	440b      	add	r3, r1
 8009eb8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	78fb      	ldrb	r3, [r7, #3]
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	f7fe fe05 	bl	8008ad0 <USBD_LL_DataOutStage>
}
 8009ec6:	bf00      	nop
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009ee0:	78fa      	ldrb	r2, [r7, #3]
 8009ee2:	6879      	ldr	r1, [r7, #4]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	4413      	add	r3, r2
 8009eea:	00db      	lsls	r3, r3, #3
 8009eec:	440b      	add	r3, r1
 8009eee:	333c      	adds	r3, #60	; 0x3c
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	78fb      	ldrb	r3, [r7, #3]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	f7fe fe5c 	bl	8008bb2 <USBD_LL_DataInStage>
}
 8009efa:	bf00      	nop
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b082      	sub	sp, #8
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fe ff6c 	bl	8008dee <USBD_LL_SOF>
}
 8009f16:	bf00      	nop
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f26:	2301      	movs	r3, #1
 8009f28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d001      	beq.n	8009f36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f32:	f7f8 fd37 	bl	80029a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f3c:	7bfa      	ldrb	r2, [r7, #15]
 8009f3e:	4611      	mov	r1, r2
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7fe ff1c 	bl	8008d7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7fe fed5 	bl	8008cfc <USBD_LL_Reset>
}
 8009f52:	bf00      	nop
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
	...

08009f5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fe ff16 	bl	8008d9c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f78:	4b04      	ldr	r3, [pc, #16]	; (8009f8c <HAL_PCD_SuspendCallback+0x30>)
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	4a03      	ldr	r2, [pc, #12]	; (8009f8c <HAL_PCD_SuspendCallback+0x30>)
 8009f7e:	f043 0306 	orr.w	r3, r3, #6
 8009f82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	e000ed00 	.word	0xe000ed00

08009f90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe ff10 	bl	8008dc4 <USBD_LL_Resume>
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009fb4:	4a28      	ldr	r2, [pc, #160]	; (800a058 <USBD_LL_Init+0xac>)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a26      	ldr	r2, [pc, #152]	; (800a058 <USBD_LL_Init+0xac>)
 8009fc0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009fc4:	4b24      	ldr	r3, [pc, #144]	; (800a058 <USBD_LL_Init+0xac>)
 8009fc6:	4a25      	ldr	r2, [pc, #148]	; (800a05c <USBD_LL_Init+0xb0>)
 8009fc8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009fca:	4b23      	ldr	r3, [pc, #140]	; (800a058 <USBD_LL_Init+0xac>)
 8009fcc:	2208      	movs	r2, #8
 8009fce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009fd0:	4b21      	ldr	r3, [pc, #132]	; (800a058 <USBD_LL_Init+0xac>)
 8009fd2:	2202      	movs	r2, #2
 8009fd4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009fd6:	4b20      	ldr	r3, [pc, #128]	; (800a058 <USBD_LL_Init+0xac>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009fdc:	4b1e      	ldr	r3, [pc, #120]	; (800a058 <USBD_LL_Init+0xac>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009fe2:	4b1d      	ldr	r3, [pc, #116]	; (800a058 <USBD_LL_Init+0xac>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009fe8:	481b      	ldr	r0, [pc, #108]	; (800a058 <USBD_LL_Init+0xac>)
 8009fea:	f7f9 f904 	bl	80031f6 <HAL_PCD_Init>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009ff4:	f7f8 fcd6 	bl	80029a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ffe:	2318      	movs	r3, #24
 800a000:	2200      	movs	r2, #0
 800a002:	2100      	movs	r1, #0
 800a004:	f7fa fc38 	bl	8004878 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a00e:	2358      	movs	r3, #88	; 0x58
 800a010:	2200      	movs	r2, #0
 800a012:	2180      	movs	r1, #128	; 0x80
 800a014:	f7fa fc30 	bl	8004878 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a01e:	23c0      	movs	r3, #192	; 0xc0
 800a020:	2200      	movs	r2, #0
 800a022:	2181      	movs	r1, #129	; 0x81
 800a024:	f7fa fc28 	bl	8004878 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a02e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a032:	2200      	movs	r2, #0
 800a034:	2101      	movs	r1, #1
 800a036:	f7fa fc1f 	bl	8004878 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a040:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a044:	2200      	movs	r2, #0
 800a046:	2182      	movs	r1, #130	; 0x82
 800a048:	f7fa fc16 	bl	8004878 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	200014f8 	.word	0x200014f8
 800a05c:	40005c00 	.word	0x40005c00

0800a060 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a076:	4618      	mov	r0, r3
 800a078:	f7f9 f9c8 	bl	800340c <HAL_PCD_Start>
 800a07c:	4603      	mov	r3, r0
 800a07e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	4618      	mov	r0, r3
 800a084:	f000 f94e 	bl	800a324 <USBD_Get_USB_Status>
 800a088:	4603      	mov	r3, r0
 800a08a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a08c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b084      	sub	sp, #16
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	4608      	mov	r0, r1
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	70fb      	strb	r3, [r7, #3]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	70bb      	strb	r3, [r7, #2]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0be:	78bb      	ldrb	r3, [r7, #2]
 800a0c0:	883a      	ldrh	r2, [r7, #0]
 800a0c2:	78f9      	ldrb	r1, [r7, #3]
 800a0c4:	f7f9 fb42 	bl	800374c <HAL_PCD_EP_Open>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 f928 	bl	800a324 <USBD_Get_USB_Status>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0fc:	78fa      	ldrb	r2, [r7, #3]
 800a0fe:	4611      	mov	r1, r2
 800a100:	4618      	mov	r0, r3
 800a102:	f7f9 fb89 	bl	8003818 <HAL_PCD_EP_Close>
 800a106:	4603      	mov	r3, r0
 800a108:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 f909 	bl	800a324 <USBD_Get_USB_Status>
 800a112:	4603      	mov	r3, r0
 800a114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a116:	7bbb      	ldrb	r3, [r7, #14]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	460b      	mov	r3, r1
 800a12a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a13a:	78fa      	ldrb	r2, [r7, #3]
 800a13c:	4611      	mov	r1, r2
 800a13e:	4618      	mov	r0, r3
 800a140:	f7f9 fc49 	bl	80039d6 <HAL_PCD_EP_SetStall>
 800a144:	4603      	mov	r3, r0
 800a146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a148:	7bfb      	ldrb	r3, [r7, #15]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 f8ea 	bl	800a324 <USBD_Get_USB_Status>
 800a150:	4603      	mov	r3, r0
 800a152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a154:	7bbb      	ldrb	r3, [r7, #14]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	460b      	mov	r3, r1
 800a168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a178:	78fa      	ldrb	r2, [r7, #3]
 800a17a:	4611      	mov	r1, r2
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7f9 fc8a 	bl	8003a96 <HAL_PCD_EP_ClrStall>
 800a182:	4603      	mov	r3, r0
 800a184:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 f8cb 	bl	800a324 <USBD_Get_USB_Status>
 800a18e:	4603      	mov	r3, r0
 800a190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a192:	7bbb      	ldrb	r3, [r7, #14]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	da0c      	bge.n	800a1d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1b8:	78fb      	ldrb	r3, [r7, #3]
 800a1ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1be:	68f9      	ldr	r1, [r7, #12]
 800a1c0:	1c5a      	adds	r2, r3, #1
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	4413      	add	r3, r2
 800a1c8:	00db      	lsls	r3, r3, #3
 800a1ca:	440b      	add	r3, r1
 800a1cc:	3302      	adds	r3, #2
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	e00b      	b.n	800a1ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1d8:	68f9      	ldr	r1, [r7, #12]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	00db      	lsls	r3, r3, #3
 800a1e2:	440b      	add	r3, r1
 800a1e4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a1e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bc80      	pop	{r7}
 800a1f2:	4770      	bx	lr

0800a1f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a20e:	78fa      	ldrb	r2, [r7, #3]
 800a210:	4611      	mov	r1, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f7f9 fa75 	bl	8003702 <HAL_PCD_SetAddress>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 f880 	bl	800a324 <USBD_Get_USB_Status>
 800a224:	4603      	mov	r3, r0
 800a226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a228:	7bbb      	ldrb	r3, [r7, #14]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b086      	sub	sp, #24
 800a236:	af00      	add	r7, sp, #0
 800a238:	60f8      	str	r0, [r7, #12]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	461a      	mov	r2, r3
 800a23e:	460b      	mov	r3, r1
 800a240:	72fb      	strb	r3, [r7, #11]
 800a242:	4613      	mov	r3, r2
 800a244:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a254:	893b      	ldrh	r3, [r7, #8]
 800a256:	7af9      	ldrb	r1, [r7, #11]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	f7f9 fb79 	bl	8003950 <HAL_PCD_EP_Transmit>
 800a25e:	4603      	mov	r3, r0
 800a260:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a262:	7dfb      	ldrb	r3, [r7, #23]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 f85d 	bl	800a324 <USBD_Get_USB_Status>
 800a26a:	4603      	mov	r3, r0
 800a26c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a26e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	607a      	str	r2, [r7, #4]
 800a282:	461a      	mov	r2, r3
 800a284:	460b      	mov	r3, r1
 800a286:	72fb      	strb	r3, [r7, #11]
 800a288:	4613      	mov	r3, r2
 800a28a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a29a:	893b      	ldrh	r3, [r7, #8]
 800a29c:	7af9      	ldrb	r1, [r7, #11]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	f7f9 fb02 	bl	80038a8 <HAL_PCD_EP_Receive>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a8:	7dfb      	ldrb	r3, [r7, #23]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 f83a 	bl	800a324 <USBD_Get_USB_Status>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2d0:	78fa      	ldrb	r2, [r7, #3]
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7f9 fb24 	bl	8003922 <HAL_PCD_EP_GetRxCount>
 800a2da:	4603      	mov	r3, r0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a2ec:	4b02      	ldr	r3, [pc, #8]	; (800a2f8 <USBD_static_malloc+0x14>)
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bc80      	pop	{r7}
 800a2f6:	4770      	bx	lr
 800a2f8:	200001c0 	.word	0x200001c0

0800a2fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]

}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	bc80      	pop	{r7}
 800a30c:	4770      	bx	lr

0800a30e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a31a:	bf00      	nop
 800a31c:	370c      	adds	r7, #12
 800a31e:	46bd      	mov	sp, r7
 800a320:	bc80      	pop	{r7}
 800a322:	4770      	bx	lr

0800a324 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	4603      	mov	r3, r0
 800a32c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a332:	79fb      	ldrb	r3, [r7, #7]
 800a334:	2b03      	cmp	r3, #3
 800a336:	d817      	bhi.n	800a368 <USBD_Get_USB_Status+0x44>
 800a338:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <USBD_Get_USB_Status+0x1c>)
 800a33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33e:	bf00      	nop
 800a340:	0800a351 	.word	0x0800a351
 800a344:	0800a357 	.word	0x0800a357
 800a348:	0800a35d 	.word	0x0800a35d
 800a34c:	0800a363 	.word	0x0800a363
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	73fb      	strb	r3, [r7, #15]
    break;
 800a354:	e00b      	b.n	800a36e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a356:	2302      	movs	r3, #2
 800a358:	73fb      	strb	r3, [r7, #15]
    break;
 800a35a:	e008      	b.n	800a36e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a35c:	2301      	movs	r3, #1
 800a35e:	73fb      	strb	r3, [r7, #15]
    break;
 800a360:	e005      	b.n	800a36e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a362:	2302      	movs	r3, #2
 800a364:	73fb      	strb	r3, [r7, #15]
    break;
 800a366:	e002      	b.n	800a36e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a368:	2302      	movs	r3, #2
 800a36a:	73fb      	strb	r3, [r7, #15]
    break;
 800a36c:	bf00      	nop
  }
  return usb_status;
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3714      	adds	r7, #20
 800a374:	46bd      	mov	sp, r7
 800a376:	bc80      	pop	{r7}
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop

0800a37c <__libc_init_array>:
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	2500      	movs	r5, #0
 800a380:	4e0c      	ldr	r6, [pc, #48]	; (800a3b4 <__libc_init_array+0x38>)
 800a382:	4c0d      	ldr	r4, [pc, #52]	; (800a3b8 <__libc_init_array+0x3c>)
 800a384:	1ba4      	subs	r4, r4, r6
 800a386:	10a4      	asrs	r4, r4, #2
 800a388:	42a5      	cmp	r5, r4
 800a38a:	d109      	bne.n	800a3a0 <__libc_init_array+0x24>
 800a38c:	f000 f82e 	bl	800a3ec <_init>
 800a390:	2500      	movs	r5, #0
 800a392:	4e0a      	ldr	r6, [pc, #40]	; (800a3bc <__libc_init_array+0x40>)
 800a394:	4c0a      	ldr	r4, [pc, #40]	; (800a3c0 <__libc_init_array+0x44>)
 800a396:	1ba4      	subs	r4, r4, r6
 800a398:	10a4      	asrs	r4, r4, #2
 800a39a:	42a5      	cmp	r5, r4
 800a39c:	d105      	bne.n	800a3aa <__libc_init_array+0x2e>
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
 800a3a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a3a4:	4798      	blx	r3
 800a3a6:	3501      	adds	r5, #1
 800a3a8:	e7ee      	b.n	800a388 <__libc_init_array+0xc>
 800a3aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a3ae:	4798      	blx	r3
 800a3b0:	3501      	adds	r5, #1
 800a3b2:	e7f2      	b.n	800a39a <__libc_init_array+0x1e>
 800a3b4:	0800a470 	.word	0x0800a470
 800a3b8:	0800a470 	.word	0x0800a470
 800a3bc:	0800a470 	.word	0x0800a470
 800a3c0:	0800a474 	.word	0x0800a474

0800a3c4 <memcpy>:
 800a3c4:	b510      	push	{r4, lr}
 800a3c6:	1e43      	subs	r3, r0, #1
 800a3c8:	440a      	add	r2, r1
 800a3ca:	4291      	cmp	r1, r2
 800a3cc:	d100      	bne.n	800a3d0 <memcpy+0xc>
 800a3ce:	bd10      	pop	{r4, pc}
 800a3d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3d8:	e7f7      	b.n	800a3ca <memcpy+0x6>

0800a3da <memset>:
 800a3da:	4603      	mov	r3, r0
 800a3dc:	4402      	add	r2, r0
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d100      	bne.n	800a3e4 <memset+0xa>
 800a3e2:	4770      	bx	lr
 800a3e4:	f803 1b01 	strb.w	r1, [r3], #1
 800a3e8:	e7f9      	b.n	800a3de <memset+0x4>
	...

0800a3ec <_init>:
 800a3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ee:	bf00      	nop
 800a3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3f2:	bc08      	pop	{r3}
 800a3f4:	469e      	mov	lr, r3
 800a3f6:	4770      	bx	lr

0800a3f8 <_fini>:
 800a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fa:	bf00      	nop
 800a3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fe:	bc08      	pop	{r3}
 800a400:	469e      	mov	lr, r3
 800a402:	4770      	bx	lr
