
IR_resiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800a4d0  0800a4d0  0001a4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a53c  0800a53c  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800a53c  0800a53c  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a53c  0800a53c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a53c  0800a53c  0001a53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a540  0800a540  0001a540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001660  20000184  0800a6c8  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017e4  0800a6c8  000217e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017797  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003522  00000000  00000000  00037944  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e0  00000000  00000000  0003ae68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f48  00000000  00000000  0003bf48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ac97  00000000  00000000  0003ce90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011236  00000000  00000000  00057b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d192  00000000  00000000  00068d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5eef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f8  00000000  00000000  000f5f6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000184 	.word	0x20000184
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a4b8 	.word	0x0800a4b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000188 	.word	0x20000188
 800014c:	0800a4b8 	.word	0x0800a4b8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a48:	f1a2 0201 	sub.w	r2, r2, #1
 8000a4c:	d1ed      	bne.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <protocolInit>:
		NoACK = GPIO_PIN_RESET;


// functions

void protocolInit( GPIO_PinState repeat ){
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	resive_protocol = GPIO_PIN_RESET;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <protocolInit+0x38>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
	wait = GPIO_PIN_RESET;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <protocolInit+0x3c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
	waitTime = 0;
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <protocolInit+0x40>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	801a      	strh	r2, [r3, #0]
	check = GPIO_PIN_RESET;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <protocolInit+0x44>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	ACK = GPIO_PIN_SET;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <protocolInit+0x48>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
	repeat_m = repeat; // reset repeat
 8000fa8:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <protocolInit+0x4c>)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	7013      	strb	r3, [r2, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	2000045d 	.word	0x2000045d
 8000fbc:	2000055f 	.word	0x2000055f
 8000fc0:	20000560 	.word	0x20000560
 8000fc4:	2000055e 	.word	0x2000055e
 8000fc8:	20000563 	.word	0x20000563
 8000fcc:	20000562 	.word	0x20000562

08000fd0 <ArmarPack>:

void ArmarPack(uint8_t* data, uint8_t command, uint8_t packLen){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	70bb      	strb	r3, [r7, #2]

	paquete[0] = START; // inicio
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <ArmarPack+0x7c>)
 8000fe2:	22ff      	movs	r2, #255	; 0xff
 8000fe4:	701a      	strb	r2, [r3, #0]
	paquete[1] = command; // comando
 8000fe6:	4a19      	ldr	r2, [pc, #100]	; (800104c <ArmarPack+0x7c>)
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	7053      	strb	r3, [r2, #1]
	paquete[2] = packLen; // tamaño 1
 8000fec:	4a17      	ldr	r2, [pc, #92]	; (800104c <ArmarPack+0x7c>)
 8000fee:	78bb      	ldrb	r3, [r7, #2]
 8000ff0:	7093      	strb	r3, [r2, #2]
	for(i = 0; i < packLen; i++){
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <ArmarPack+0x80>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	e010      	b.n	800101c <ArmarPack+0x4c>
		paquete[i + 3] = data[i]; // data
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <ArmarPack+0x80>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	441a      	add	r2, r3
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <ArmarPack+0x80>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	3303      	adds	r3, #3
 800100a:	7811      	ldrb	r1, [r2, #0]
 800100c:	4a0f      	ldr	r2, [pc, #60]	; (800104c <ArmarPack+0x7c>)
 800100e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < packLen; i++){
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <ArmarPack+0x80>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <ArmarPack+0x80>)
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <ArmarPack+0x80>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	78ba      	ldrb	r2, [r7, #2]
 8001022:	429a      	cmp	r2, r3
 8001024:	d8e9      	bhi.n	8000ffa <ArmarPack+0x2a>
	}
	XORData(&paquete);
 8001026:	4809      	ldr	r0, [pc, #36]	; (800104c <ArmarPack+0x7c>)
 8001028:	f000 f816 	bl	8001058 <XORData>
	paquete[packLen + 3] = sum;
 800102c:	78bb      	ldrb	r3, [r7, #2]
 800102e:	3303      	adds	r3, #3
 8001030:	4a08      	ldr	r2, [pc, #32]	; (8001054 <ArmarPack+0x84>)
 8001032:	7811      	ldrb	r1, [r2, #0]
 8001034:	4a05      	ldr	r2, [pc, #20]	; (800104c <ArmarPack+0x7c>)
 8001036:	54d1      	strb	r1, [r2, r3]
	paquete[packLen + 4] = END; // final
 8001038:	78bb      	ldrb	r3, [r7, #2]
 800103a:	3304      	adds	r3, #4
 800103c:	4a03      	ldr	r2, [pc, #12]	; (800104c <ArmarPack+0x7c>)
 800103e:	21fe      	movs	r1, #254	; 0xfe
 8001040:	54d1      	strb	r1, [r2, r3]
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200004e0 	.word	0x200004e0
 8001050:	2000055d 	.word	0x2000055d
 8001054:	200001a0 	.word	0x200001a0

08001058 <XORData>:

void XORData(uint8_t* data){
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	sum = data[1];
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	785a      	ldrb	r2, [r3, #1]
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <XORData+0x58>)
 8001066:	701a      	strb	r2, [r3, #0]
	for (i = 2; i < (data[2] + 3); i++){
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <XORData+0x5c>)
 800106a:	2202      	movs	r2, #2
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e011      	b.n	8001094 <XORData+0x3c>
		sum ^= data[i];
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <XORData+0x5c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	781a      	ldrb	r2, [r3, #0]
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <XORData+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4053      	eors	r3, r2
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <XORData+0x58>)
 8001086:	701a      	strb	r2, [r3, #0]
	for (i = 2; i < (data[2] + 3); i++){
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <XORData+0x5c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <XORData+0x5c>)
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <XORData+0x5c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3302      	adds	r3, #2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	3303      	adds	r3, #3
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbe4      	blt.n	8001070 <XORData+0x18>
	}
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	200001a0 	.word	0x200001a0
 80010b4:	2000055d 	.word	0x2000055d

080010b8 <AnalisePack>:

void AnalisePack( uint8_t *package , uint8_t *numData){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]

	sum = package[1];
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	785a      	ldrb	r2, [r3, #1]
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <AnalisePack+0xc8>)
 80010c8:	701a      	strb	r2, [r3, #0]
	for(i = 2; i < (package[2] + 3); i++){
 80010ca:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <AnalisePack+0xcc>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e011      	b.n	80010f6 <AnalisePack+0x3e>
		sum ^= package[i];
 80010d2:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <AnalisePack+0xcc>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4413      	add	r3, r2
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	4b28      	ldr	r3, [pc, #160]	; (8001180 <AnalisePack+0xc8>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	4053      	eors	r3, r2
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <AnalisePack+0xc8>)
 80010e8:	701a      	strb	r2, [r3, #0]
	for(i = 2; i < (package[2] + 3); i++){
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <AnalisePack+0xcc>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <AnalisePack+0xcc>)
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <AnalisePack+0xcc>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3302      	adds	r3, #2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	3303      	adds	r3, #3
 8001104:	429a      	cmp	r2, r3
 8001106:	dbe4      	blt.n	80010d2 <AnalisePack+0x1a>
	}

	if(sum == package[package[2] + 3]){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3302      	adds	r3, #2
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	3303      	adds	r3, #3
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	781a      	ldrb	r2, [r3, #0]
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <AnalisePack+0xc8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d125      	bne.n	800116a <AnalisePack+0xb2>

		if(package[1] == Ack){
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3301      	adds	r3, #1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b20      	cmp	r3, #32
 8001126:	d118      	bne.n	800115a <AnalisePack+0xa2>

			if(package[3] == 1){
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3303      	adds	r3, #3
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d10c      	bne.n	800114c <AnalisePack+0x94>

				ACK = GPIO_PIN_SET;
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <AnalisePack+0xd0>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
				NoACK = GPIO_PIN_RESET;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <AnalisePack+0xd4>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
				*numData += 1;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	b2da      	uxtb	r2, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	701a      	strb	r2, [r3, #0]
		}
	}else{
		SendACK(GPIO_PIN_RESET, &data_Ch);
		check = GPIO_PIN_RESET;
	}
}
 800114a:	e015      	b.n	8001178 <AnalisePack+0xc0>
				NoACK = GPIO_PIN_SET;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <AnalisePack+0xd4>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
				ACK = GPIO_PIN_RESET;
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <AnalisePack+0xd0>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
}
 8001158:	e00e      	b.n	8001178 <AnalisePack+0xc0>
			SendACK(GPIO_PIN_SET, &data_Ch);
 800115a:	490d      	ldr	r1, [pc, #52]	; (8001190 <AnalisePack+0xd8>)
 800115c:	2001      	movs	r0, #1
 800115e:	f000 f81b 	bl	8001198 <SendACK>
			check = GPIO_PIN_SET;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <AnalisePack+0xdc>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
}
 8001168:	e006      	b.n	8001178 <AnalisePack+0xc0>
		SendACK(GPIO_PIN_RESET, &data_Ch);
 800116a:	4909      	ldr	r1, [pc, #36]	; (8001190 <AnalisePack+0xd8>)
 800116c:	2000      	movs	r0, #0
 800116e:	f000 f813 	bl	8001198 <SendACK>
		check = GPIO_PIN_RESET;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <AnalisePack+0xdc>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200001a0 	.word	0x200001a0
 8001184:	2000055d 	.word	0x2000055d
 8001188:	20000563 	.word	0x20000563
 800118c:	200001a1 	.word	0x200001a1
 8001190:	20000460 	.word	0x20000460
 8001194:	2000055e 	.word	0x2000055e

08001198 <SendACK>:

void SendACK( GPIO_PinState check, uint8_t *data ){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
	if(check){
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d008      	beq.n	80011bc <SendACK+0x24>
		data[0] = 0x01;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
		ArmarPack( data, Ack , 1);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2120      	movs	r1, #32
 80011b4:	6838      	ldr	r0, [r7, #0]
 80011b6:	f7ff ff0b 	bl	8000fd0 <ArmarPack>
 80011ba:	e007      	b.n	80011cc <SendACK+0x34>
	}else{
		data[0] = 0x00;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
		ArmarPack( data, Ack , 1);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2120      	movs	r1, #32
 80011c6:	6838      	ldr	r0, [r7, #0]
 80011c8:	f7ff ff02 	bl	8000fd0 <ArmarPack>
	}
	CDC_Transmit_FS(paquete, 6);
 80011cc:	2106      	movs	r1, #6
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <SendACK+0x44>)
 80011d0:	f008 fd5c 	bl	8009c8c <CDC_Transmit_FS>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200004e0 	.word	0x200004e0

080011e0 <communication>:
 * enviar data
 */


void communication( uint8_t *package, GPIO_PinState *rxData,
		            uint8_t *data, uint8_t *_commd, uint8_t *_len, uint8_t *numData){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]

	if( *rxData ){
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d013      	beq.n	800121e <communication+0x3e>
		*rxData = GPIO_PIN_RESET;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
		if(package[0] == START && (package[package[2] + 4]) == END){
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2bff      	cmp	r3, #255	; 0xff
 8001202:	d10c      	bne.n	800121e <communication+0x3e>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3302      	adds	r3, #2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	3304      	adds	r3, #4
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2bfe      	cmp	r3, #254	; 0xfe
 8001214:	d103      	bne.n	800121e <communication+0x3e>
			AnalisePack(package, numData);
 8001216:	69f9      	ldr	r1, [r7, #28]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f7ff ff4d 	bl	80010b8 <AnalisePack>
		}
	}

	if( waitTime == 1 && repeat_m){
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <communication+0xb8>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d109      	bne.n	800123a <communication+0x5a>
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <communication+0xbc>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <communication+0x5a>
		NoACK = GPIO_PIN_SET;
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <communication+0xc0>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
		waitTime = 0;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <communication+0xb8>)
 8001236:	2200      	movs	r2, #0
 8001238:	801a      	strh	r2, [r3, #0]
	}

	if(ACK){
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <communication+0xc4>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00d      	beq.n	800125e <communication+0x7e>
		//memcpy( _data_protocol_save, data , (*_len));
		wait = GPIO_PIN_RESET;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <communication+0xc8>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
		waitTime = 0;
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <communication+0xb8>)
 800124a:	2200      	movs	r2, #0
 800124c:	801a      	strh	r2, [r3, #0]
		ArmarPack(data, *_commd, *_len);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	7819      	ldrb	r1, [r3, #0]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff feb9 	bl	8000fd0 <ArmarPack>
	}

	if(ACK || NoACK){
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <communication+0xc4>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d104      	bne.n	8001270 <communication+0x90>
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <communication+0xc0>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00f      	beq.n	8001290 <communication+0xb0>
		CDC_Transmit_FS(paquete, (paquete[2]) + 5);
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <communication+0xcc>)
 8001272:	789b      	ldrb	r3, [r3, #2]
 8001274:	3305      	adds	r3, #5
 8001276:	4619      	mov	r1, r3
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <communication+0xcc>)
 800127a:	f008 fd07 	bl	8009c8c <CDC_Transmit_FS>
		ACK = GPIO_PIN_RESET;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <communication+0xc4>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
		NoACK = GPIO_PIN_RESET;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <communication+0xc0>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
		wait = GPIO_PIN_SET;
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <communication+0xc8>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
	}

}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000560 	.word	0x20000560
 800129c:	20000562 	.word	0x20000562
 80012a0:	200001a1 	.word	0x200001a1
 80012a4:	20000563 	.word	0x20000563
 80012a8:	2000055f 	.word	0x2000055f
 80012ac:	200004e0 	.word	0x200004e0

080012b0 <InitResiver>:

uint8_t count = 0, value = 0, adress = 0;


void InitResiver (GPIO_TypeDef* recvpinport, uint16_t recvpin)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]

	params.recvpinport = recvpinport;
 80012bc:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <InitResiver+0x4c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6093      	str	r3, [r2, #8]
	params.recvpin = recvpin;
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <InitResiver+0x4c>)
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	8053      	strh	r3, [r2, #2]
	params.rcvstate = IR_STATE_IDLE;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <InitResiver+0x4c>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	701a      	strb	r2, [r3, #0]
	params.rawlen = 0;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <InitResiver+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	711a      	strb	r2, [r3, #4]
	params.timer = 0;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <InitResiver+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
	resive = GPIO_PIN_RESET;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <InitResiver+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
	numero_selec_flag = GPIO_PIN_RESET;
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <InitResiver+0x54>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
	numero_seleccionado = 0;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <InitResiver+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
	numero_temp = 0;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <InitResiver+0x5c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	20000564 	.word	0x20000564
 8001300:	20000669 	.word	0x20000669
 8001304:	2000066a 	.word	0x2000066a
 8001308:	2000065c 	.word	0x2000065c
 800130c:	20000664 	.word	0x20000664

08001310 <reciveData>:


void reciveData(){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0

	uint8_t irdata = (uint8_t) HAL_GPIO_ReadPin(params.recvpinport, params.recvpin);
 8001316:	4b5e      	ldr	r3, [pc, #376]	; (8001490 <reciveData+0x180>)
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	4b5d      	ldr	r3, [pc, #372]	; (8001490 <reciveData+0x180>)
 800131c:	885b      	ldrh	r3, [r3, #2]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4619      	mov	r1, r3
 8001322:	4610      	mov	r0, r2
 8001324:	f001 ff9e 	bl	8003264 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	71fb      	strb	r3, [r7, #7]

	params.timer++;
 800132c:	4b58      	ldr	r3, [pc, #352]	; (8001490 <reciveData+0x180>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	3301      	adds	r3, #1
 8001332:	4a57      	ldr	r2, [pc, #348]	; (8001490 <reciveData+0x180>)
 8001334:	60d3      	str	r3, [r2, #12]

	if (params.rawlen >= IR_MAXBUFF) params.rcvstate = IR_STATE_OVERFLOW ;
 8001336:	4b56      	ldr	r3, [pc, #344]	; (8001490 <reciveData+0x180>)
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b64      	cmp	r3, #100	; 0x64
 800133e:	d902      	bls.n	8001346 <reciveData+0x36>
 8001340:	4b53      	ldr	r3, [pc, #332]	; (8001490 <reciveData+0x180>)
 8001342:	2206      	movs	r2, #6
 8001344:	701a      	strb	r2, [r3, #0]

	switch(params.rcvstate)
 8001346:	4b52      	ldr	r3, [pc, #328]	; (8001490 <reciveData+0x180>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3b02      	subs	r3, #2
 800134e:	2b03      	cmp	r3, #3
 8001350:	d872      	bhi.n	8001438 <reciveData+0x128>
 8001352:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <reciveData+0x48>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	08001369 	.word	0x08001369
 800135c:	080013a7 	.word	0x080013a7
 8001360:	080013df 	.word	0x080013df
 8001364:	0800141d 	.word	0x0800141d
	{
		case IR_STATE_IDLE:
			if (irdata == IR_MARK)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d15d      	bne.n	800142a <reciveData+0x11a>
			{

				if (params.timer < 26)
 800136e:	4b48      	ldr	r3, [pc, #288]	; (8001490 <reciveData+0x180>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b19      	cmp	r3, #25
 8001374:	d803      	bhi.n	800137e <reciveData+0x6e>
				{
					params.timer = 0;
 8001376:	4b46      	ldr	r3, [pc, #280]	; (8001490 <reciveData+0x180>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
					Compress[0]                      = 0;
					Compress[1]                      = 0xaa;
				}
			}

			break;
 800137c:	e055      	b.n	800142a <reciveData+0x11a>
					params.overflow                  = 0;
 800137e:	4b44      	ldr	r3, [pc, #272]	; (8001490 <reciveData+0x180>)
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
					params.rawlen                    = 0;
 8001386:	4b42      	ldr	r3, [pc, #264]	; (8001490 <reciveData+0x180>)
 8001388:	2200      	movs	r2, #0
 800138a:	711a      	strb	r2, [r3, #4]
					params.timer                     = 0;
 800138c:	4b40      	ldr	r3, [pc, #256]	; (8001490 <reciveData+0x180>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
					params.rcvstate                  = IR_STATE_MARK;
 8001392:	4b3f      	ldr	r3, [pc, #252]	; (8001490 <reciveData+0x180>)
 8001394:	2203      	movs	r2, #3
 8001396:	701a      	strb	r2, [r3, #0]
					Compress[0]                      = 0;
 8001398:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <reciveData+0x184>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
					Compress[1]                      = 0xaa;
 800139e:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <reciveData+0x184>)
 80013a0:	22aa      	movs	r2, #170	; 0xaa
 80013a2:	705a      	strb	r2, [r3, #1]
			break;
 80013a4:	e041      	b.n	800142a <reciveData+0x11a>

			//------------------------------------------------------------------------------

		case IR_STATE_MARK:

			if (irdata == IR_SPACE && params.timer != 0)
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d140      	bne.n	800142e <reciveData+0x11e>
 80013ac:	4b38      	ldr	r3, [pc, #224]	; (8001490 <reciveData+0x180>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d03c      	beq.n	800142e <reciveData+0x11e>
			{
				params.rawbuf[params.rawlen++] = params.timer;
 80013b4:	4b36      	ldr	r3, [pc, #216]	; (8001490 <reciveData+0x180>)
 80013b6:	68d8      	ldr	r0, [r3, #12]
 80013b8:	4b35      	ldr	r3, [pc, #212]	; (8001490 <reciveData+0x180>)
 80013ba:	791b      	ldrb	r3, [r3, #4]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	b2d1      	uxtb	r1, r2
 80013c2:	4a33      	ldr	r2, [pc, #204]	; (8001490 <reciveData+0x180>)
 80013c4:	7111      	strb	r1, [r2, #4]
 80013c6:	4619      	mov	r1, r3
 80013c8:	b2c2      	uxtb	r2, r0
 80013ca:	4b31      	ldr	r3, [pc, #196]	; (8001490 <reciveData+0x180>)
 80013cc:	440b      	add	r3, r1
 80013ce:	741a      	strb	r2, [r3, #16]
				params.timer                     = 0;
 80013d0:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <reciveData+0x180>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
				params.rcvstate                  = IR_STATE_SPACE;
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <reciveData+0x180>)
 80013d8:	2204      	movs	r2, #4
 80013da:	701a      	strb	r2, [r3, #0]
			}
			break;
 80013dc:	e027      	b.n	800142e <reciveData+0x11e>
			//-------------------------------------------------------------------------------

		case IR_STATE_SPACE:

			if (irdata == IR_MARK && params.timer != 0)
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d111      	bne.n	8001408 <reciveData+0xf8>
 80013e4:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <reciveData+0x180>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00d      	beq.n	8001408 <reciveData+0xf8>
			{
				if( params.timer < 36){
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <reciveData+0x180>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b23      	cmp	r3, #35	; 0x23
 80013f2:	d806      	bhi.n	8001402 <reciveData+0xf2>

					params.rcvstate                  = IR_STATE_MARK;
 80013f4:	4b26      	ldr	r3, [pc, #152]	; (8001490 <reciveData+0x180>)
 80013f6:	2203      	movs	r2, #3
 80013f8:	701a      	strb	r2, [r3, #0]
					params.timer                     = 0;
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <reciveData+0x180>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
				if( params.timer < 36){
 8001400:	e00b      	b.n	800141a <reciveData+0x10a>

				}else{

					resume();
 8001402:	f000 f84f 	bl	80014a4 <resume>
				if( params.timer < 36){
 8001406:	e008      	b.n	800141a <reciveData+0x10a>

				}
			}
			else if (params.timer > 700)
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <reciveData+0x180>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001410:	d90f      	bls.n	8001432 <reciveData+0x122>
			{

				params.rcvstate = IR_STATE_STOP;
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <reciveData+0x180>)
 8001414:	2205      	movs	r2, #5
 8001416:	701a      	strb	r2, [r3, #0]

			}
			break;
 8001418:	e00b      	b.n	8001432 <reciveData+0x122>
 800141a:	e00a      	b.n	8001432 <reciveData+0x122>

		//......................................................................
		case IR_STATE_STOP:  // stop read
			if (irdata == IR_MARK)  {
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d109      	bne.n	8001436 <reciveData+0x126>

				params.timer = 0 ;
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <reciveData+0x180>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
				/*
				CDC_Transmit_FS(params.rawbuf,params.rawlen);
				params.rcvstate = IR_STATE_IDLE;
				*/
			}
			break;
 8001428:	e005      	b.n	8001436 <reciveData+0x126>
			break;
 800142a:	bf00      	nop
 800142c:	e004      	b.n	8001438 <reciveData+0x128>
			break;
 800142e:	bf00      	nop
 8001430:	e002      	b.n	8001438 <reciveData+0x128>
			break;
 8001432:	bf00      	nop
 8001434:	e000      	b.n	8001438 <reciveData+0x128>
			break;
 8001436:	bf00      	nop
			break;
			*/
	}


	if(params.rcvstate == IR_STATE_MARK || params.rcvstate == IR_STATE_SPACE){
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <reciveData+0x180>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b03      	cmp	r3, #3
 8001440:	d004      	beq.n	800144c <reciveData+0x13c>
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <reciveData+0x180>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b04      	cmp	r3, #4
 800144a:	d112      	bne.n	8001472 <reciveData+0x162>
		if (irdata == IR_MARK) {
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d106      	bne.n	8001460 <reciveData+0x150>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001458:	480f      	ldr	r0, [pc, #60]	; (8001498 <reciveData+0x188>)
 800145a:	f001 ff1a 	bl	8003292 <HAL_GPIO_WritePin>
 800145e:	e008      	b.n	8001472 <reciveData+0x162>
		}
		else if((irdata == IR_SPACE)){
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d105      	bne.n	8001472 <reciveData+0x162>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); }
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800146c:	480a      	ldr	r0, [pc, #40]	; (8001498 <reciveData+0x188>)
 800146e:	f001 ff10 	bl	8003292 <HAL_GPIO_WritePin>
	}

	if( params.rcvstate == IR_STATE_STOP ){
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <reciveData+0x180>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b05      	cmp	r3, #5
 800147a:	d105      	bne.n	8001488 <reciveData+0x178>

		decodeData(&irresults);
 800147c:	4807      	ldr	r0, [pc, #28]	; (800149c <reciveData+0x18c>)
 800147e:	f000 f81f 	bl	80014c0 <decodeData>
		resive = GPIO_PIN_SET;
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <reciveData+0x190>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]

	}
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000564 	.word	0x20000564
 8001494:	20000658 	.word	0x20000658
 8001498:	40010800 	.word	0x40010800
 800149c:	20000640 	.word	0x20000640
 80014a0:	20000669 	.word	0x20000669

080014a4 <resume>:

void resume ()
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
	params.rcvstate = IR_STATE_IDLE;
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <resume+0x18>)
 80014aa:	2202      	movs	r2, #2
 80014ac:	701a      	strb	r2, [r3, #0]
	params.rawlen = 0;
 80014ae:	4b03      	ldr	r3, [pc, #12]	; (80014bc <resume+0x18>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	711a      	strb	r2, [r3, #4]

}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20000564 	.word	0x20000564

080014c0 <decodeData>:


uint8_t decodeData(volatile ir_decode_results *record ){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]


	if ( !( (params.rawbuf[0]) <= 50 && (params.rawbuf[0]) >= 44  )){
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <decodeData+0x5c>)
 80014ca:	7c1b      	ldrb	r3, [r3, #16]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b32      	cmp	r3, #50	; 0x32
 80014d0:	d804      	bhi.n	80014dc <decodeData+0x1c>
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <decodeData+0x5c>)
 80014d4:	7c1b      	ldrb	r3, [r3, #16]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b2b      	cmp	r3, #43	; 0x2b
 80014da:	d803      	bhi.n	80014e4 <decodeData+0x24>
		resume();
 80014dc:	f7ff ffe2 	bl	80014a4 <resume>
		return 0 ;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e016      	b.n	8001512 <decodeData+0x52>
	}

	identify(&value,1,7);
 80014e4:	2207      	movs	r2, #7
 80014e6:	2101      	movs	r1, #1
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <decodeData+0x60>)
 80014ea:	f000 f81f 	bl	800152c <identify>
	identify(&adress,7,12);
 80014ee:	220c      	movs	r2, #12
 80014f0:	2107      	movs	r1, #7
 80014f2:	480c      	ldr	r0, [pc, #48]	; (8001524 <decodeData+0x64>)
 80014f4:	f000 f81a 	bl	800152c <identify>

	Compress[0] = value;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <decodeData+0x60>)
 80014fa:	781a      	ldrb	r2, [r3, #0]
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <decodeData+0x68>)
 80014fe:	701a      	strb	r2, [r3, #0]
	Compress[1] = adress;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <decodeData+0x64>)
 8001502:	781a      	ldrb	r2, [r3, #0]
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <decodeData+0x68>)
 8001506:	705a      	strb	r2, [r3, #1]

	detectar_tecla();
 8001508:	f000 f8ba 	bl	8001680 <detectar_tecla>

	resume();
 800150c:	f7ff ffca 	bl	80014a4 <resume>

	return 1;
 8001510:	2301      	movs	r3, #1

}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000564 	.word	0x20000564
 8001520:	200001a3 	.word	0x200001a3
 8001524:	200001a4 	.word	0x200001a4
 8001528:	20000658 	.word	0x20000658

0800152c <identify>:


uint8_t identify( uint8_t *save, uint8_t pos, uint8_t fin){
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
 8001538:	4613      	mov	r3, r2
 800153a:	70bb      	strb	r3, [r7, #2]

	for(count = pos; count <= fin; count ++){
 800153c:	4a24      	ldr	r2, [pc, #144]	; (80015d0 <identify+0xa4>)
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	7013      	strb	r3, [r2, #0]
 8001542:	e03a      	b.n	80015ba <identify+0x8e>

		if ( params.rawbuf[count] >= 20 && params.rawbuf[count] <= 28 ){
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <identify+0xa4>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <identify+0xa8>)
 800154c:	4413      	add	r3, r2
 800154e:	7c1b      	ldrb	r3, [r3, #16]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b13      	cmp	r3, #19
 8001554:	d913      	bls.n	800157e <identify+0x52>
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <identify+0xa4>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <identify+0xa8>)
 800155e:	4413      	add	r3, r2
 8001560:	7c1b      	ldrb	r3, [r3, #16]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b1c      	cmp	r3, #28
 8001566:	d80a      	bhi.n	800157e <identify+0x52>
			*save = (*save << 1) | 1;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	b25b      	sxtb	r3, r3
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	b25b      	sxtb	r3, r3
 8001576:	b2da      	uxtb	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e017      	b.n	80015ae <identify+0x82>
		}
		else if( params.rawbuf[count] >= 8 && params.rawbuf[count] <= 16 ){
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <identify+0xa4>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <identify+0xa8>)
 8001586:	4413      	add	r3, r2
 8001588:	7c1b      	ldrb	r3, [r3, #16]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b07      	cmp	r3, #7
 800158e:	d90e      	bls.n	80015ae <identify+0x82>
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <identify+0xa4>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <identify+0xa8>)
 8001598:	4413      	add	r3, r2
 800159a:	7c1b      	ldrb	r3, [r3, #16]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b10      	cmp	r3, #16
 80015a0:	d805      	bhi.n	80015ae <identify+0x82>
			*save = (*save << 1) | 0;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	701a      	strb	r2, [r3, #0]
	for(count = pos; count <= fin; count ++){
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <identify+0xa4>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <identify+0xa4>)
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <identify+0xa4>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	78ba      	ldrb	r2, [r7, #2]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d2bf      	bcs.n	8001544 <identify+0x18>
		}
	}

	return 1;
 80015c4:	2301      	movs	r3, #1
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	200001a2 	.word	0x200001a2
 80015d4:	20000564 	.word	0x20000564

080015d8 <leer_num>:

void leer_num(){
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0


		if(Compress[0] == 0x68 && Compress[1] == 0xcb && !numero_selec_flag){
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <leer_num+0x90>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b68      	cmp	r3, #104	; 0x68
 80015e2:	d112      	bne.n	800160a <leer_num+0x32>
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <leer_num+0x90>)
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	2bcb      	cmp	r3, #203	; 0xcb
 80015ea:	d10e      	bne.n	800160a <leer_num+0x32>
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <leer_num+0x94>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10a      	bne.n	800160a <leer_num+0x32>

			numero_temp              = numero_seleccionado;
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <leer_num+0x98>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <leer_num+0x9c>)
 80015fa:	6013      	str	r3, [r2, #0]
			numero_seleccionado      = 0;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <leer_num+0x98>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
			numero_selec_flag        = GPIO_PIN_SET;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <leer_num+0x94>)
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	e029      	b.n	800165e <leer_num+0x86>

		}
		else if(Compress[0] == 0x38 && Compress[1] == 0xcb)
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <leer_num+0x90>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b38      	cmp	r3, #56	; 0x38
 8001610:	d10c      	bne.n	800162c <leer_num+0x54>
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <leer_num+0x90>)
 8001614:	785b      	ldrb	r3, [r3, #1]
 8001616:	2bcb      	cmp	r3, #203	; 0xcb
 8001618:	d108      	bne.n	800162c <leer_num+0x54>
		{
			numero_seleccionado /= 10;
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <leer_num+0x98>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a16      	ldr	r2, [pc, #88]	; (8001678 <leer_num+0xa0>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	08db      	lsrs	r3, r3, #3
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <leer_num+0x98>)
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e018      	b.n	800165e <leer_num+0x86>
		}
		else if(tecla_actual < 10){
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <leer_num+0xa4>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b09      	cmp	r3, #9
 8001632:	d814      	bhi.n	800165e <leer_num+0x86>

			numero_selec_flag     = GPIO_PIN_RESET;
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <leer_num+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
			numero_seleccionado   *= 10;
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <leer_num+0x98>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	461a      	mov	r2, r3
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <leer_num+0x98>)
 800164a:	601a      	str	r2, [r3, #0]
			numero_seleccionado   += tecla_actual;
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <leer_num+0xa4>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <leer_num+0x98>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a05      	ldr	r2, [pc, #20]	; (8001670 <leer_num+0x98>)
 800165a:	6013      	str	r3, [r2, #0]

		}
}
 800165c:	e7ff      	b.n	800165e <leer_num+0x86>
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000658 	.word	0x20000658
 800166c:	2000066a 	.word	0x2000066a
 8001670:	2000065c 	.word	0x2000065c
 8001674:	20000664 	.word	0x20000664
 8001678:	cccccccd 	.word	0xcccccccd
 800167c:	20000668 	.word	0x20000668

08001680 <detectar_tecla>:

void detectar_tecla(){
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
	 switch (Compress[1]) {
 8001684:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <detectar_tecla+0xb8>)
 8001686:	785b      	ldrb	r3, [r3, #1]
 8001688:	2bcb      	cmp	r3, #203	; 0xcb
 800168a:	d14c      	bne.n	8001726 <detectar_tecla+0xa6>
	    case 0xCB:
	        switch (Compress[0]) {
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <detectar_tecla+0xb8>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b30      	cmp	r3, #48	; 0x30
 8001692:	d033      	beq.n	80016fc <detectar_tecla+0x7c>
 8001694:	2b30      	cmp	r3, #48	; 0x30
 8001696:	dc0b      	bgt.n	80016b0 <detectar_tecla+0x30>
 8001698:	2b08      	cmp	r3, #8
 800169a:	d037      	beq.n	800170c <detectar_tecla+0x8c>
 800169c:	2b08      	cmp	r3, #8
 800169e:	dc02      	bgt.n	80016a6 <detectar_tecla+0x26>
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <detectar_tecla+0x4c>
 80016a4:	e03a      	b.n	800171c <detectar_tecla+0x9c>
 80016a6:	2b10      	cmp	r3, #16
 80016a8:	d020      	beq.n	80016ec <detectar_tecla+0x6c>
 80016aa:	2b20      	cmp	r3, #32
 80016ac:	d016      	beq.n	80016dc <detectar_tecla+0x5c>
 80016ae:	e035      	b.n	800171c <detectar_tecla+0x9c>
 80016b0:	2b50      	cmp	r3, #80	; 0x50
 80016b2:	d01f      	beq.n	80016f4 <detectar_tecla+0x74>
 80016b4:	2b50      	cmp	r3, #80	; 0x50
 80016b6:	dc04      	bgt.n	80016c2 <detectar_tecla+0x42>
 80016b8:	2b40      	cmp	r3, #64	; 0x40
 80016ba:	d00b      	beq.n	80016d4 <detectar_tecla+0x54>
 80016bc:	2b48      	cmp	r3, #72	; 0x48
 80016be:	d029      	beq.n	8001714 <detectar_tecla+0x94>
 80016c0:	e02c      	b.n	800171c <detectar_tecla+0x9c>
 80016c2:	2b60      	cmp	r3, #96	; 0x60
 80016c4:	d00e      	beq.n	80016e4 <detectar_tecla+0x64>
 80016c6:	2b70      	cmp	r3, #112	; 0x70
 80016c8:	d01c      	beq.n	8001704 <detectar_tecla+0x84>
 80016ca:	e027      	b.n	800171c <detectar_tecla+0x9c>
	            case 0x00:
	                tecla_actual = 1;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <detectar_tecla+0xbc>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
	            break;
 80016d2:	e027      	b.n	8001724 <detectar_tecla+0xa4>
	            case 0x40:
	            	tecla_actual = 2;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <detectar_tecla+0xbc>)
 80016d6:	2202      	movs	r2, #2
 80016d8:	701a      	strb	r2, [r3, #0]
	            break;
 80016da:	e023      	b.n	8001724 <detectar_tecla+0xa4>
	            case 0x20:
	            	tecla_actual = 3;
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <detectar_tecla+0xbc>)
 80016de:	2203      	movs	r2, #3
 80016e0:	701a      	strb	r2, [r3, #0]
	            break;
 80016e2:	e01f      	b.n	8001724 <detectar_tecla+0xa4>
	            case 0x60:
	            	tecla_actual = 4;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <detectar_tecla+0xbc>)
 80016e6:	2204      	movs	r2, #4
 80016e8:	701a      	strb	r2, [r3, #0]
	            break;
 80016ea:	e01b      	b.n	8001724 <detectar_tecla+0xa4>
	            case 0x10:
	            	tecla_actual = 5;
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <detectar_tecla+0xbc>)
 80016ee:	2205      	movs	r2, #5
 80016f0:	701a      	strb	r2, [r3, #0]
	            break;
 80016f2:	e017      	b.n	8001724 <detectar_tecla+0xa4>
	            case 0x50:
	            	tecla_actual = 6;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <detectar_tecla+0xbc>)
 80016f6:	2206      	movs	r2, #6
 80016f8:	701a      	strb	r2, [r3, #0]
	            break;
 80016fa:	e013      	b.n	8001724 <detectar_tecla+0xa4>
	            case 0x30:
	            	tecla_actual = 7;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <detectar_tecla+0xbc>)
 80016fe:	2207      	movs	r2, #7
 8001700:	701a      	strb	r2, [r3, #0]
	            break;
 8001702:	e00f      	b.n	8001724 <detectar_tecla+0xa4>
	            case 0x70:
	            	tecla_actual = 8;
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <detectar_tecla+0xbc>)
 8001706:	2208      	movs	r2, #8
 8001708:	701a      	strb	r2, [r3, #0]
	            break;
 800170a:	e00b      	b.n	8001724 <detectar_tecla+0xa4>
	            case 0x08:
	            	tecla_actual = 9;
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <detectar_tecla+0xbc>)
 800170e:	2209      	movs	r2, #9
 8001710:	701a      	strb	r2, [r3, #0]
	            break;
 8001712:	e007      	b.n	8001724 <detectar_tecla+0xa4>
	            case 0x48:
	            	tecla_actual = 0;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <detectar_tecla+0xbc>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
	            break;
 800171a:	e003      	b.n	8001724 <detectar_tecla+0xa4>
	            default:
	            	tecla_actual = 10;
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <detectar_tecla+0xbc>)
 800171e:	220a      	movs	r2, #10
 8001720:	701a      	strb	r2, [r3, #0]
	            	break;
 8001722:	bf00      	nop
	        }
	        break;
 8001724:	e003      	b.n	800172e <detectar_tecla+0xae>
	     default:
	       tecla_actual = 10;
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <detectar_tecla+0xbc>)
 8001728:	220a      	movs	r2, #10
 800172a:	701a      	strb	r2, [r3, #0]
	       break;
 800172c:	bf00      	nop
	 }
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000658 	.word	0x20000658
 800173c:	20000668 	.word	0x20000668

08001740 <initPID_ch>:
#include "PID_ch.h"
#include <stdio.h>
#include <string.h>


void initPID_ch(){
 8001740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001744:	af00      	add	r7, sp, #0

	u=0.0,u_1=0.0;
 8001746:	4b99      	ldr	r3, [pc, #612]	; (80019ac <initPID_ch+0x26c>)
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	4b98      	ldr	r3, [pc, #608]	; (80019b0 <initPID_ch+0x270>)
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	601a      	str	r2, [r3, #0]

	r1=0.0;
 8001756:	4b97      	ldr	r3, [pc, #604]	; (80019b4 <initPID_ch+0x274>)
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	601a      	str	r2, [r3, #0]

	e=0.0;
 800175e:	4b96      	ldr	r3, [pc, #600]	; (80019b8 <initPID_ch+0x278>)
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
	e_1=0.0;
 8001766:	4b95      	ldr	r3, [pc, #596]	; (80019bc <initPID_ch+0x27c>)
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
	e_2=0.0;
 800176e:	4b94      	ldr	r3, [pc, #592]	; (80019c0 <initPID_ch+0x280>)
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	601a      	str	r2, [r3, #0]

	Ts = 1;
 8001776:	4b93      	ldr	r3, [pc, #588]	; (80019c4 <initPID_ch+0x284>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]

	k= 0 , tau= 0, theta= 150/16 + Ts/2 ;
 800177c:	4b92      	ldr	r3, [pc, #584]	; (80019c8 <initPID_ch+0x288>)
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	4b91      	ldr	r3, [pc, #580]	; (80019cc <initPID_ch+0x28c>)
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	4b8d      	ldr	r3, [pc, #564]	; (80019c4 <initPID_ch+0x284>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	b2db      	uxtb	r3, r3
 8001794:	3309      	adds	r3, #9
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f9b2 	bl	8000b00 <__aeabi_i2f>
 800179c:	4602      	mov	r2, r0
 800179e:	4b8c      	ldr	r3, [pc, #560]	; (80019d0 <initPID_ch+0x290>)
 80017a0:	601a      	str	r2, [r3, #0]

	//*************************************************************************//
	//*****************   SINTONIA POR ZIEGLER y NICHOLS    *******************//
	//*************************************************************************//

	kp=(1.2*tau)/(k*theta);
 80017a2:	4b8a      	ldr	r3, [pc, #552]	; (80019cc <initPID_ch+0x28c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fe36 	bl	8000418 <__aeabi_f2d>
 80017ac:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80017b0:	4b88      	ldr	r3, [pc, #544]	; (80019d4 <initPID_ch+0x294>)
 80017b2:	f7fe fe89 	bl	80004c8 <__aeabi_dmul>
 80017b6:	4603      	mov	r3, r0
 80017b8:	460c      	mov	r4, r1
 80017ba:	4625      	mov	r5, r4
 80017bc:	461c      	mov	r4, r3
 80017be:	4b82      	ldr	r3, [pc, #520]	; (80019c8 <initPID_ch+0x288>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b83      	ldr	r3, [pc, #524]	; (80019d0 <initPID_ch+0x290>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4610      	mov	r0, r2
 80017ca:	f7ff f9ed 	bl	8000ba8 <__aeabi_fmul>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe21 	bl	8000418 <__aeabi_f2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4620      	mov	r0, r4
 80017dc:	4629      	mov	r1, r5
 80017de:	f7fe ff9d 	bl	800071c <__aeabi_ddiv>
 80017e2:	4603      	mov	r3, r0
 80017e4:	460c      	mov	r4, r1
 80017e6:	4618      	mov	r0, r3
 80017e8:	4621      	mov	r1, r4
 80017ea:	f7ff f87f 	bl	80008ec <__aeabi_d2f>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b79      	ldr	r3, [pc, #484]	; (80019d8 <initPID_ch+0x298>)
 80017f2:	601a      	str	r2, [r3, #0]
	ti=2.0*theta;
 80017f4:	4b76      	ldr	r3, [pc, #472]	; (80019d0 <initPID_ch+0x290>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f8cc 	bl	8000998 <__addsf3>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	4b75      	ldr	r3, [pc, #468]	; (80019dc <initPID_ch+0x29c>)
 8001806:	601a      	str	r2, [r3, #0]
	td=0.5*theta;
 8001808:	4b71      	ldr	r3, [pc, #452]	; (80019d0 <initPID_ch+0x290>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff f9c9 	bl	8000ba8 <__aeabi_fmul>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	4b71      	ldr	r3, [pc, #452]	; (80019e0 <initPID_ch+0x2a0>)
 800181c:	601a      	str	r2, [r3, #0]

	q0=kp*(1+Ts/(2.0*ti)+td/Ts);
 800181e:	4b6e      	ldr	r3, [pc, #440]	; (80019d8 <initPID_ch+0x298>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fdf8 	bl	8000418 <__aeabi_f2d>
 8001828:	4605      	mov	r5, r0
 800182a:	460e      	mov	r6, r1
 800182c:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <initPID_ch+0x284>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fddf 	bl	80003f4 <__aeabi_i2d>
 8001836:	4680      	mov	r8, r0
 8001838:	4689      	mov	r9, r1
 800183a:	4b68      	ldr	r3, [pc, #416]	; (80019dc <initPID_ch+0x29c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fdea 	bl	8000418 <__aeabi_f2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	f7fe fc88 	bl	800015c <__adddf3>
 800184c:	4603      	mov	r3, r0
 800184e:	460c      	mov	r4, r1
 8001850:	461a      	mov	r2, r3
 8001852:	4623      	mov	r3, r4
 8001854:	4640      	mov	r0, r8
 8001856:	4649      	mov	r1, r9
 8001858:	f7fe ff60 	bl	800071c <__aeabi_ddiv>
 800185c:	4603      	mov	r3, r0
 800185e:	460c      	mov	r4, r1
 8001860:	4618      	mov	r0, r3
 8001862:	4621      	mov	r1, r4
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	4b5e      	ldr	r3, [pc, #376]	; (80019e4 <initPID_ch+0x2a4>)
 800186a:	f7fe fc77 	bl	800015c <__adddf3>
 800186e:	4603      	mov	r3, r0
 8001870:	460c      	mov	r4, r1
 8001872:	4698      	mov	r8, r3
 8001874:	46a1      	mov	r9, r4
 8001876:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <initPID_ch+0x2a0>)
 8001878:	681c      	ldr	r4, [r3, #0]
 800187a:	4b52      	ldr	r3, [pc, #328]	; (80019c4 <initPID_ch+0x284>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f93e 	bl	8000b00 <__aeabi_i2f>
 8001884:	4603      	mov	r3, r0
 8001886:	4619      	mov	r1, r3
 8001888:	4620      	mov	r0, r4
 800188a:	f7ff fa41 	bl	8000d10 <__aeabi_fdiv>
 800188e:	4603      	mov	r3, r0
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fdc1 	bl	8000418 <__aeabi_f2d>
 8001896:	4603      	mov	r3, r0
 8001898:	460c      	mov	r4, r1
 800189a:	461a      	mov	r2, r3
 800189c:	4623      	mov	r3, r4
 800189e:	4640      	mov	r0, r8
 80018a0:	4649      	mov	r1, r9
 80018a2:	f7fe fc5b 	bl	800015c <__adddf3>
 80018a6:	4603      	mov	r3, r0
 80018a8:	460c      	mov	r4, r1
 80018aa:	461a      	mov	r2, r3
 80018ac:	4623      	mov	r3, r4
 80018ae:	4628      	mov	r0, r5
 80018b0:	4631      	mov	r1, r6
 80018b2:	f7fe fe09 	bl	80004c8 <__aeabi_dmul>
 80018b6:	4603      	mov	r3, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	4618      	mov	r0, r3
 80018bc:	4621      	mov	r1, r4
 80018be:	f7ff f815 	bl	80008ec <__aeabi_d2f>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <initPID_ch+0x2a8>)
 80018c6:	601a      	str	r2, [r3, #0]
	q1=-kp*(1-Ts/(2.0*ti)+(2.0*td)/Ts);
 80018c8:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <initPID_ch+0x298>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fda1 	bl	8000418 <__aeabi_f2d>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <initPID_ch+0x284>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fd88 	bl	80003f4 <__aeabi_i2d>
 80018e4:	4680      	mov	r8, r0
 80018e6:	4689      	mov	r9, r1
 80018e8:	4b3c      	ldr	r3, [pc, #240]	; (80019dc <initPID_ch+0x29c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fd93 	bl	8000418 <__aeabi_f2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	f7fe fc31 	bl	800015c <__adddf3>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4640      	mov	r0, r8
 8001900:	4649      	mov	r1, r9
 8001902:	f7fe ff0b 	bl	800071c <__aeabi_ddiv>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	f04f 0000 	mov.w	r0, #0
 800190e:	4935      	ldr	r1, [pc, #212]	; (80019e4 <initPID_ch+0x2a4>)
 8001910:	f7fe fc22 	bl	8000158 <__aeabi_dsub>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4690      	mov	r8, r2
 800191a:	4699      	mov	r9, r3
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <initPID_ch+0x2a0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fd79 	bl	8000418 <__aeabi_f2d>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	f7fe fc17 	bl	800015c <__adddf3>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4692      	mov	sl, r2
 8001934:	469b      	mov	fp, r3
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <initPID_ch+0x284>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fd5a 	bl	80003f4 <__aeabi_i2d>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4650      	mov	r0, sl
 8001946:	4659      	mov	r1, fp
 8001948:	f7fe fee8 	bl	800071c <__aeabi_ddiv>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4640      	mov	r0, r8
 8001952:	4649      	mov	r1, r9
 8001954:	f7fe fc02 	bl	800015c <__adddf3>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4620      	mov	r0, r4
 800195e:	4629      	mov	r1, r5
 8001960:	f7fe fdb2 	bl	80004c8 <__aeabi_dmul>
 8001964:	4603      	mov	r3, r0
 8001966:	460c      	mov	r4, r1
 8001968:	4618      	mov	r0, r3
 800196a:	4621      	mov	r1, r4
 800196c:	f7fe ffbe 	bl	80008ec <__aeabi_d2f>
 8001970:	4602      	mov	r2, r0
 8001972:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <initPID_ch+0x2ac>)
 8001974:	601a      	str	r2, [r3, #0]
	q2=(kp*td)/Ts;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <initPID_ch+0x298>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <initPID_ch+0x2a0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4619      	mov	r1, r3
 8001980:	4610      	mov	r0, r2
 8001982:	f7ff f911 	bl	8000ba8 <__aeabi_fmul>
 8001986:	4603      	mov	r3, r0
 8001988:	461c      	mov	r4, r3
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <initPID_ch+0x284>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f8b6 	bl	8000b00 <__aeabi_i2f>
 8001994:	4603      	mov	r3, r0
 8001996:	4619      	mov	r1, r3
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff f9b9 	bl	8000d10 <__aeabi_fdiv>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <initPID_ch+0x2b0>)
 80019a4:	601a      	str	r2, [r3, #0]

}
 80019a6:	bf00      	nop
 80019a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019ac:	200006a4 	.word	0x200006a4
 80019b0:	2000067c 	.word	0x2000067c
 80019b4:	200006b0 	.word	0x200006b0
 80019b8:	2000069c 	.word	0x2000069c
 80019bc:	20000670 	.word	0x20000670
 80019c0:	2000066c 	.word	0x2000066c
 80019c4:	2000068c 	.word	0x2000068c
 80019c8:	20000680 	.word	0x20000680
 80019cc:	20000694 	.word	0x20000694
 80019d0:	20000688 	.word	0x20000688
 80019d4:	3ff33333 	.word	0x3ff33333
 80019d8:	200006a8 	.word	0x200006a8
 80019dc:	200006a0 	.word	0x200006a0
 80019e0:	200006ac 	.word	0x200006ac
 80019e4:	3ff00000 	.word	0x3ff00000
 80019e8:	20000698 	.word	0x20000698
 80019ec:	20000690 	.word	0x20000690
 80019f0:	20000678 	.word	0x20000678

080019f4 <PID>:

void PID(){
 80019f4:	b598      	push	{r3, r4, r7, lr}
 80019f6:	af00      	add	r7, sp, #0

	e=(r1-v1); // calcular error
 80019f8:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <PID+0xe4>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b37      	ldr	r3, [pc, #220]	; (8001adc <PID+0xe8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	4610      	mov	r0, r2
 8001a04:	f7fe ffc6 	bl	8000994 <__aeabi_fsub>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <PID+0xec>)
 8001a0e:	601a      	str	r2, [r3, #0]

	u = u_1 + q0*e + q1*e_1 + q2*e_2; //Ley del controlador PID discreto
 8001a10:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <PID+0xf0>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <PID+0xec>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	f7ff f8c4 	bl	8000ba8 <__aeabi_fmul>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <PID+0xf4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f7fe ffb4 	bl	8000998 <__addsf3>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461c      	mov	r4, r3
 8001a34:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <PID+0xf8>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <PID+0xfc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f7ff f8b2 	bl	8000ba8 <__aeabi_fmul>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4619      	mov	r1, r3
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7fe ffa5 	bl	8000998 <__addsf3>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461c      	mov	r4, r3
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <PID+0x100>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <PID+0x104>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	f7ff f8a3 	bl	8000ba8 <__aeabi_fmul>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4619      	mov	r1, r3
 8001a66:	4620      	mov	r0, r4
 8001a68:	f7fe ff96 	bl	8000998 <__addsf3>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b22      	ldr	r3, [pc, #136]	; (8001afc <PID+0x108>)
 8001a72:	601a      	str	r2, [r3, #0]

	if (u >= 100.0)        //Saturo la accion de control 'uT' en un tope maximo y minimo
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <PID+0x108>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4921      	ldr	r1, [pc, #132]	; (8001b00 <PID+0x10c>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fa46 	bl	8000f0c <__aeabi_fcmpge>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <PID+0x98>
	u = 100.0;
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <PID+0x108>)
 8001a88:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <PID+0x10c>)
 8001a8a:	601a      	str	r2, [r3, #0]
	if (u <= 0.0 || r1==0)
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <PID+0x108>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fa2f 	bl	8000ef8 <__aeabi_fcmple>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <PID+0xc0>
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <PID+0xe4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fa11 	bl	8000ed0 <__aeabi_fcmpeq>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <PID+0xc6>
	u = 0.1;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <PID+0x108>)
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <PID+0x110>)
 8001ab8:	601a      	str	r2, [r3, #0]

	e_2=e_1;
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <PID+0xfc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <PID+0x104>)
 8001ac0:	6013      	str	r3, [r2, #0]
	e_1=e;
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <PID+0xec>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <PID+0xfc>)
 8001ac8:	6013      	str	r3, [r2, #0]
	u_1=u;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <PID+0x108>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <PID+0xf4>)
 8001ad0:	6013      	str	r3, [r2, #0]

}
 8001ad2:	bf00      	nop
 8001ad4:	bd98      	pop	{r3, r4, r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200006b0 	.word	0x200006b0
 8001adc:	20000674 	.word	0x20000674
 8001ae0:	2000069c 	.word	0x2000069c
 8001ae4:	20000698 	.word	0x20000698
 8001ae8:	2000067c 	.word	0x2000067c
 8001aec:	20000690 	.word	0x20000690
 8001af0:	20000670 	.word	0x20000670
 8001af4:	20000678 	.word	0x20000678
 8001af8:	2000066c 	.word	0x2000066c
 8001afc:	200006a4 	.word	0x200006a4
 8001b00:	42c80000 	.word	0x42c80000
 8001b04:	3dcccccd 	.word	0x3dcccccd

08001b08 <actualizar_par>:

void actualizar_par(){
 8001b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b0c:	af00      	add	r7, sp, #0

	kp=(1.2*tau)/(k*theta);
 8001b0e:	4b82      	ldr	r3, [pc, #520]	; (8001d18 <actualizar_par+0x210>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fc80 	bl	8000418 <__aeabi_f2d>
 8001b18:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001b1c:	4b7f      	ldr	r3, [pc, #508]	; (8001d1c <actualizar_par+0x214>)
 8001b1e:	f7fe fcd3 	bl	80004c8 <__aeabi_dmul>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4625      	mov	r5, r4
 8001b28:	461c      	mov	r4, r3
 8001b2a:	4b7d      	ldr	r3, [pc, #500]	; (8001d20 <actualizar_par+0x218>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b7d      	ldr	r3, [pc, #500]	; (8001d24 <actualizar_par+0x21c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4619      	mov	r1, r3
 8001b34:	4610      	mov	r0, r2
 8001b36:	f7ff f837 	bl	8000ba8 <__aeabi_fmul>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fc6b 	bl	8000418 <__aeabi_f2d>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4620      	mov	r0, r4
 8001b48:	4629      	mov	r1, r5
 8001b4a:	f7fe fde7 	bl	800071c <__aeabi_ddiv>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	4618      	mov	r0, r3
 8001b54:	4621      	mov	r1, r4
 8001b56:	f7fe fec9 	bl	80008ec <__aeabi_d2f>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b72      	ldr	r3, [pc, #456]	; (8001d28 <actualizar_par+0x220>)
 8001b5e:	601a      	str	r2, [r3, #0]
	ti=2.0*theta;
 8001b60:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <actualizar_par+0x21c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe ff16 	bl	8000998 <__addsf3>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b6e      	ldr	r3, [pc, #440]	; (8001d2c <actualizar_par+0x224>)
 8001b72:	601a      	str	r2, [r3, #0]
	td=0.5*theta;
 8001b74:	4b6b      	ldr	r3, [pc, #428]	; (8001d24 <actualizar_par+0x21c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f813 	bl	8000ba8 <__aeabi_fmul>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <actualizar_par+0x228>)
 8001b88:	601a      	str	r2, [r3, #0]

	q0=kp*(1+Ts/(2.0*ti)+td/Ts);
 8001b8a:	4b67      	ldr	r3, [pc, #412]	; (8001d28 <actualizar_par+0x220>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fc42 	bl	8000418 <__aeabi_f2d>
 8001b94:	4605      	mov	r5, r0
 8001b96:	460e      	mov	r6, r1
 8001b98:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <actualizar_par+0x22c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc29 	bl	80003f4 <__aeabi_i2d>
 8001ba2:	4680      	mov	r8, r0
 8001ba4:	4689      	mov	r9, r1
 8001ba6:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <actualizar_par+0x224>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fc34 	bl	8000418 <__aeabi_f2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	f7fe fad2 	bl	800015c <__adddf3>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	460c      	mov	r4, r1
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	4640      	mov	r0, r8
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	f7fe fdaa 	bl	800071c <__aeabi_ddiv>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	460c      	mov	r4, r1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	4621      	mov	r1, r4
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	4b58      	ldr	r3, [pc, #352]	; (8001d38 <actualizar_par+0x230>)
 8001bd6:	f7fe fac1 	bl	800015c <__adddf3>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	460c      	mov	r4, r1
 8001bde:	4698      	mov	r8, r3
 8001be0:	46a1      	mov	r9, r4
 8001be2:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <actualizar_par+0x228>)
 8001be4:	681c      	ldr	r4, [r3, #0]
 8001be6:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <actualizar_par+0x22c>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe ff88 	bl	8000b00 <__aeabi_i2f>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7ff f88b 	bl	8000d10 <__aeabi_fdiv>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fc0b 	bl	8000418 <__aeabi_f2d>
 8001c02:	4603      	mov	r3, r0
 8001c04:	460c      	mov	r4, r1
 8001c06:	461a      	mov	r2, r3
 8001c08:	4623      	mov	r3, r4
 8001c0a:	4640      	mov	r0, r8
 8001c0c:	4649      	mov	r1, r9
 8001c0e:	f7fe faa5 	bl	800015c <__adddf3>
 8001c12:	4603      	mov	r3, r0
 8001c14:	460c      	mov	r4, r1
 8001c16:	461a      	mov	r2, r3
 8001c18:	4623      	mov	r3, r4
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	4631      	mov	r1, r6
 8001c1e:	f7fe fc53 	bl	80004c8 <__aeabi_dmul>
 8001c22:	4603      	mov	r3, r0
 8001c24:	460c      	mov	r4, r1
 8001c26:	4618      	mov	r0, r3
 8001c28:	4621      	mov	r1, r4
 8001c2a:	f7fe fe5f 	bl	80008ec <__aeabi_d2f>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b42      	ldr	r3, [pc, #264]	; (8001d3c <actualizar_par+0x234>)
 8001c32:	601a      	str	r2, [r3, #0]
	q1=-kp*(1-Ts/(2.0*ti)+(2.0*td)/Ts);
 8001c34:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <actualizar_par+0x220>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fbeb 	bl	8000418 <__aeabi_f2d>
 8001c42:	4604      	mov	r4, r0
 8001c44:	460d      	mov	r5, r1
 8001c46:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <actualizar_par+0x22c>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fbd2 	bl	80003f4 <__aeabi_i2d>
 8001c50:	4680      	mov	r8, r0
 8001c52:	4689      	mov	r9, r1
 8001c54:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <actualizar_par+0x224>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fbdd 	bl	8000418 <__aeabi_f2d>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	f7fe fa7b 	bl	800015c <__adddf3>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4640      	mov	r0, r8
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	f7fe fd55 	bl	800071c <__aeabi_ddiv>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	f04f 0000 	mov.w	r0, #0
 8001c7a:	492f      	ldr	r1, [pc, #188]	; (8001d38 <actualizar_par+0x230>)
 8001c7c:	f7fe fa6c 	bl	8000158 <__aeabi_dsub>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4690      	mov	r8, r2
 8001c86:	4699      	mov	r9, r3
 8001c88:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <actualizar_par+0x228>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fbc3 	bl	8000418 <__aeabi_f2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	f7fe fa61 	bl	800015c <__adddf3>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4692      	mov	sl, r2
 8001ca0:	469b      	mov	fp, r3
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <actualizar_par+0x22c>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fba4 	bl	80003f4 <__aeabi_i2d>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4650      	mov	r0, sl
 8001cb2:	4659      	mov	r1, fp
 8001cb4:	f7fe fd32 	bl	800071c <__aeabi_ddiv>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4640      	mov	r0, r8
 8001cbe:	4649      	mov	r1, r9
 8001cc0:	f7fe fa4c 	bl	800015c <__adddf3>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4620      	mov	r0, r4
 8001cca:	4629      	mov	r1, r5
 8001ccc:	f7fe fbfc 	bl	80004c8 <__aeabi_dmul>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	f7fe fe08 	bl	80008ec <__aeabi_d2f>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <actualizar_par+0x238>)
 8001ce0:	601a      	str	r2, [r3, #0]
	q2=(kp*td)/Ts;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <actualizar_par+0x220>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <actualizar_par+0x228>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4619      	mov	r1, r3
 8001cec:	4610      	mov	r0, r2
 8001cee:	f7fe ff5b 	bl	8000ba8 <__aeabi_fmul>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461c      	mov	r4, r3
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <actualizar_par+0x22c>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe ff00 	bl	8000b00 <__aeabi_i2f>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4619      	mov	r1, r3
 8001d04:	4620      	mov	r0, r4
 8001d06:	f7ff f803 	bl	8000d10 <__aeabi_fdiv>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <actualizar_par+0x23c>)
 8001d10:	601a      	str	r2, [r3, #0]

}
 8001d12:	bf00      	nop
 8001d14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d18:	20000694 	.word	0x20000694
 8001d1c:	3ff33333 	.word	0x3ff33333
 8001d20:	20000680 	.word	0x20000680
 8001d24:	20000688 	.word	0x20000688
 8001d28:	200006a8 	.word	0x200006a8
 8001d2c:	200006a0 	.word	0x200006a0
 8001d30:	200006ac 	.word	0x200006ac
 8001d34:	2000068c 	.word	0x2000068c
 8001d38:	3ff00000 	.word	0x3ff00000
 8001d3c:	20000698 	.word	0x20000698
 8001d40:	20000690 	.word	0x20000690
 8001d44:	20000678 	.word	0x20000678

08001d48 <params_choose>:

void params_choose( uint16_t limits){
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80fb      	strh	r3, [r7, #6]
	tau = (r1 * 0.6);
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <params_choose+0xa0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fb5e 	bl	8000418 <__aeabi_f2d>
 8001d5c:	a320      	add	r3, pc, #128	; (adr r3, 8001de0 <params_choose+0x98>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe fbb1 	bl	80004c8 <__aeabi_dmul>
 8001d66:	4603      	mov	r3, r0
 8001d68:	460c      	mov	r4, r1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	f7fe fdbd 	bl	80008ec <__aeabi_d2f>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <params_choose+0xa4>)
 8001d76:	601a      	str	r2, [r3, #0]
	if(limits < 800){
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001d7e:	d20b      	bcs.n	8001d98 <params_choose+0x50>
		theta= 180/16 + Ts/2;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <params_choose+0xa8>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	330b      	adds	r3, #11
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe feb8 	bl	8000b00 <__aeabi_i2f>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <params_choose+0xac>)
 8001d94:	601a      	str	r2, [r3, #0]
	else if(limits >= 800 && limits <= 1500){
		theta= 230/16 + Ts/2;
	}else{
		theta= 150/16 + Ts/2;
	}
}
 8001d96:	e01f      	b.n	8001dd8 <params_choose+0x90>
	else if(limits >= 800 && limits <= 1500){
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001d9e:	d310      	bcc.n	8001dc2 <params_choose+0x7a>
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d80b      	bhi.n	8001dc2 <params_choose+0x7a>
		theta= 230/16 + Ts/2;
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <params_choose+0xa8>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	330e      	adds	r3, #14
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fea3 	bl	8000b00 <__aeabi_i2f>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <params_choose+0xac>)
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	e00a      	b.n	8001dd8 <params_choose+0x90>
		theta= 150/16 + Ts/2;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <params_choose+0xa8>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	3309      	adds	r3, #9
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fe97 	bl	8000b00 <__aeabi_i2f>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <params_choose+0xac>)
 8001dd6:	601a      	str	r2, [r3, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	33333333 	.word	0x33333333
 8001de4:	3fe33333 	.word	0x3fe33333
 8001de8:	200006b0 	.word	0x200006b0
 8001dec:	20000694 	.word	0x20000694
 8001df0:	2000068c 	.word	0x2000068c
 8001df4:	20000688 	.word	0x20000688

08001df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dfe:	f000 ff67 	bl	8002cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e02:	f000 f8b5 	bl	8001f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e06:	f000 fa47 	bl	8002298 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001e0a:	f007 fe7d 	bl	8009b08 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001e0e:	f000 f9a9 	bl	8002164 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001e12:	f000 f907 	bl	8002024 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001e16:	f000 f9f1 	bl	80021fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001e1a:	483e      	ldr	r0, [pc, #248]	; (8001f14 <main+0x11c>)
 8001e1c:	f003 fb0e 	bl	800543c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8001e20:	483d      	ldr	r0, [pc, #244]	; (8001f18 <main+0x120>)
 8001e22:	f003 fac1 	bl	80053a8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001e26:	2100      	movs	r1, #0
 8001e28:	483c      	ldr	r0, [pc, #240]	; (8001f1c <main+0x124>)
 8001e2a:	f003 fbb1 	bl	8005590 <HAL_TIM_PWM_Start>
  InitResiver(GPIOA,  GPIO_PIN_10);
 8001e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e32:	483b      	ldr	r0, [pc, #236]	; (8001f20 <main+0x128>)
 8001e34:	f7ff fa3c 	bl	80012b0 <InitResiver>
  protocolInit( GPIO_PIN_SET );
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff f8a1 	bl	8000f80 <protocolInit>

  revoluciones = 50;
 8001e3e:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <main+0x12c>)
 8001e40:	2232      	movs	r2, #50	; 0x32
 8001e42:	701a      	strb	r2, [r3, #0]
  tiempo_motor = 0;
 8001e44:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <main+0x130>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
  numData = 0;
 8001e4a:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <main+0x134>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
  pulsos = 0;
 8001e50:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <main+0x138>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]

  // timer init CCR1
  TIM1->CCR1 = (200 * revoluciones/100) ;
 8001e56:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <main+0x12c>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	23c8      	movs	r3, #200	; 0xc8
 8001e5e:	fb03 f302 	mul.w	r3, r3, r2
 8001e62:	4a34      	ldr	r2, [pc, #208]	; (8001f34 <main+0x13c>)
 8001e64:	fb82 1203 	smull	r1, r2, r2, r3
 8001e68:	1152      	asrs	r2, r2, #5
 8001e6a:	17db      	asrs	r3, r3, #31
 8001e6c:	1ad2      	subs	r2, r2, r3
 8001e6e:	4b32      	ldr	r3, [pc, #200]	; (8001f38 <main+0x140>)
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->ARR = 200 - 1;
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <main+0x140>)
 8001e74:	22c7      	movs	r2, #199	; 0xc7
 8001e76:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1->PSC = 18;
 8001e78:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <main+0x140>)
 8001e7a:	2212      	movs	r2, #18
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28

	num_sensor = 0;
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <main+0x144>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
	num_sensor =
		(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) << 1) |
 8001e84:	2101      	movs	r1, #1
 8001e86:	482e      	ldr	r0, [pc, #184]	; (8001f40 <main+0x148>)
 8001e88:	f001 f9ec 	bl	8003264 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	b25c      	sxtb	r4, r3
		HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8001e92:	2102      	movs	r1, #2
 8001e94:	482a      	ldr	r0, [pc, #168]	; (8001f40 <main+0x148>)
 8001e96:	f001 f9e5 	bl	8003264 <HAL_GPIO_ReadPin>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b25b      	sxtb	r3, r3
		(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) << 1) |
 8001e9e:	4323      	orrs	r3, r4
 8001ea0:	b25b      	sxtb	r3, r3
 8001ea2:	b2da      	uxtb	r2, r3
	num_sensor =
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <main+0x144>)
 8001ea6:	701a      	strb	r2, [r3, #0]

	anterior = num_sensor;
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <main+0x144>)
 8001eaa:	781a      	ldrb	r2, [r3, #0]
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <main+0x14c>)
 8001eae:	701a      	strb	r2, [r3, #0]
	actual = num_sensor;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <main+0x144>)
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <main+0x150>)
 8001eb6:	701a      	strb	r2, [r3, #0]

	initPID_ch();
 8001eb8:	f7ff fc42 	bl	8001740 <initPID_ch>
	r1 = 0;
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <main+0x154>)
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
	v1 = 0;
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <main+0x158>)
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0){
		  	 prueba();
	  }

*/
	  if(read){
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <main+0x15c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d004      	beq.n	8001ee0 <main+0xe8>
		  reciveData();
 8001ed6:	f7ff fa1b 	bl	8001310 <reciveData>
		  read = 0;
 8001eda:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <main+0x15c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
	  }

	  if(resive){
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <main+0x160>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d006      	beq.n	8001ef6 <main+0xfe>
		  leer_num();
 8001ee8:	f7ff fb76 	bl	80015d8 <leer_num>
		  select_data();
 8001eec:	f000 fb14 	bl	8002518 <select_data>
		  resive = GPIO_PIN_RESET;
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <main+0x160>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
	  }

	  rotate_data();
 8001ef6:	f000 fa35 	bl	8002364 <rotate_data>
	  state_motor();
 8001efa:	f000 fbcd 	bl	8002698 <state_motor>

	  communication(
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <main+0x134>)
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <main+0x164>)
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <main+0x168>)
 8001f08:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <main+0x16c>)
 8001f0a:	4917      	ldr	r1, [pc, #92]	; (8001f68 <main+0x170>)
 8001f0c:	4817      	ldr	r0, [pc, #92]	; (8001f6c <main+0x174>)
 8001f0e:	f7ff f967 	bl	80011e0 <communication>
	  if(read){
 8001f12:	e7db      	b.n	8001ecc <main+0xd4>
 8001f14:	20000810 	.word	0x20000810
 8001f18:	200006c0 	.word	0x200006c0
 8001f1c:	200007c0 	.word	0x200007c0
 8001f20:	40010800 	.word	0x40010800
 8001f24:	2000080c 	.word	0x2000080c
 8001f28:	200006b8 	.word	0x200006b8
 8001f2c:	200001ac 	.word	0x200001ac
 8001f30:	20000858 	.word	0x20000858
 8001f34:	51eb851f 	.word	0x51eb851f
 8001f38:	40012c00 	.word	0x40012c00
 8001f3c:	200006bc 	.word	0x200006bc
 8001f40:	40010c00 	.word	0x40010c00
 8001f44:	2000080b 	.word	0x2000080b
 8001f48:	2000080a 	.word	0x2000080a
 8001f4c:	200006b0 	.word	0x200006b0
 8001f50:	20000674 	.word	0x20000674
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000669 	.word	0x20000669
 8001f5c:	20000001 	.word	0x20000001
 8001f60:	20000002 	.word	0x20000002
 8001f64:	20000788 	.word	0x20000788
 8001f68:	2000045d 	.word	0x2000045d
 8001f6c:	20000708 	.word	0x20000708

08001f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b094      	sub	sp, #80	; 0x50
 8001f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7a:	2228      	movs	r2, #40	; 0x28
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f008 fa91 	bl	800a4a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001faa:	2300      	movs	r3, #0
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001fbc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f002 fcfe 	bl	80049c8 <HAL_RCC_OscConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001fd2:	f000 fd4d 	bl	8002a70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fe6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 ff68 	bl	8004ec8 <HAL_RCC_ClockConfig>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ffe:	f000 fd37 	bl	8002a70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002002:	2310      	movs	r3, #16
 8002004:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	4618      	mov	r0, r3
 800200e:	f003 f8c5 	bl	800519c <HAL_RCCEx_PeriphCLKConfig>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002018:	f000 fd2a 	bl	8002a70 <Error_Handler>
  }
}
 800201c:	bf00      	nop
 800201e:	3750      	adds	r7, #80	; 0x50
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b096      	sub	sp, #88	; 0x58
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002038:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	611a      	str	r2, [r3, #16]
 8002052:	615a      	str	r2, [r3, #20]
 8002054:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	2220      	movs	r2, #32
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f008 fa22 	bl	800a4a6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002062:	4b3e      	ldr	r3, [pc, #248]	; (800215c <MX_TIM1_Init+0x138>)
 8002064:	4a3e      	ldr	r2, [pc, #248]	; (8002160 <MX_TIM1_Init+0x13c>)
 8002066:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200;
 8002068:	4b3c      	ldr	r3, [pc, #240]	; (800215c <MX_TIM1_Init+0x138>)
 800206a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800206e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <MX_TIM1_Init+0x138>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002076:	4b39      	ldr	r3, [pc, #228]	; (800215c <MX_TIM1_Init+0x138>)
 8002078:	2263      	movs	r2, #99	; 0x63
 800207a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207c:	4b37      	ldr	r3, [pc, #220]	; (800215c <MX_TIM1_Init+0x138>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <MX_TIM1_Init+0x138>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002088:	4b34      	ldr	r3, [pc, #208]	; (800215c <MX_TIM1_Init+0x138>)
 800208a:	2200      	movs	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800208e:	4833      	ldr	r0, [pc, #204]	; (800215c <MX_TIM1_Init+0x138>)
 8002090:	f003 f93a 	bl	8005308 <HAL_TIM_Base_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800209a:	f000 fce9 	bl	8002a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020a8:	4619      	mov	r1, r3
 80020aa:	482c      	ldr	r0, [pc, #176]	; (800215c <MX_TIM1_Init+0x138>)
 80020ac:	f003 fcd8 	bl	8005a60 <HAL_TIM_ConfigClockSource>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80020b6:	f000 fcdb 	bl	8002a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020ba:	4828      	ldr	r0, [pc, #160]	; (800215c <MX_TIM1_Init+0x138>)
 80020bc:	f003 fa10 	bl	80054e0 <HAL_TIM_PWM_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020c6:	f000 fcd3 	bl	8002a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020d6:	4619      	mov	r1, r3
 80020d8:	4820      	ldr	r0, [pc, #128]	; (800215c <MX_TIM1_Init+0x138>)
 80020da:	f004 f841 	bl	8006160 <HAL_TIMEx_MasterConfigSynchronization>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80020e4:	f000 fcc4 	bl	8002a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020e8:	2360      	movs	r3, #96	; 0x60
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020f4:	2300      	movs	r3, #0
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002100:	2300      	movs	r3, #0
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002108:	2200      	movs	r2, #0
 800210a:	4619      	mov	r1, r3
 800210c:	4813      	ldr	r0, [pc, #76]	; (800215c <MX_TIM1_Init+0x138>)
 800210e:	f003 fbe9 	bl	80058e4 <HAL_TIM_PWM_ConfigChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002118:	f000 fcaa 	bl	8002a70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002134:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4807      	ldr	r0, [pc, #28]	; (800215c <MX_TIM1_Init+0x138>)
 8002140:	f004 f86c 	bl	800621c <HAL_TIMEx_ConfigBreakDeadTime>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800214a:	f000 fc91 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800214e:	4803      	ldr	r0, [pc, #12]	; (800215c <MX_TIM1_Init+0x138>)
 8002150:	f000 fd18 	bl	8002b84 <HAL_TIM_MspPostInit>

}
 8002154:	bf00      	nop
 8002156:	3758      	adds	r7, #88	; 0x58
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200007c0 	.word	0x200007c0
 8002160:	40012c00 	.word	0x40012c00

08002164 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	463b      	mov	r3, r7
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <MX_TIM2_Init+0x94>)
 8002182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002186:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <MX_TIM2_Init+0x94>)
 800218a:	2248      	movs	r2, #72	; 0x48
 800218c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <MX_TIM2_Init+0x94>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50 - 1;
 8002194:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <MX_TIM2_Init+0x94>)
 8002196:	2231      	movs	r2, #49	; 0x31
 8002198:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <MX_TIM2_Init+0x94>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <MX_TIM2_Init+0x94>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021a6:	4814      	ldr	r0, [pc, #80]	; (80021f8 <MX_TIM2_Init+0x94>)
 80021a8:	f003 f8ae 	bl	8005308 <HAL_TIM_Base_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80021b2:	f000 fc5d 	bl	8002a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021bc:	f107 0308 	add.w	r3, r7, #8
 80021c0:	4619      	mov	r1, r3
 80021c2:	480d      	ldr	r0, [pc, #52]	; (80021f8 <MX_TIM2_Init+0x94>)
 80021c4:	f003 fc4c 	bl	8005a60 <HAL_TIM_ConfigClockSource>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80021ce:	f000 fc4f 	bl	8002a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021da:	463b      	mov	r3, r7
 80021dc:	4619      	mov	r1, r3
 80021de:	4806      	ldr	r0, [pc, #24]	; (80021f8 <MX_TIM2_Init+0x94>)
 80021e0:	f003 ffbe 	bl	8006160 <HAL_TIMEx_MasterConfigSynchronization>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80021ea:	f000 fc41 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000810 	.word	0x20000810

080021fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002210:	463b      	mov	r3, r7
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <MX_TIM3_Init+0x94>)
 800221a:	4a1e      	ldr	r2, [pc, #120]	; (8002294 <MX_TIM3_Init+0x98>)
 800221c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 800221e:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <MX_TIM3_Init+0x94>)
 8002220:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002224:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <MX_TIM3_Init+0x94>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <MX_TIM3_Init+0x94>)
 800222e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002232:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <MX_TIM3_Init+0x94>)
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <MX_TIM3_Init+0x94>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002240:	4813      	ldr	r0, [pc, #76]	; (8002290 <MX_TIM3_Init+0x94>)
 8002242:	f003 f861 	bl	8005308 <HAL_TIM_Base_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800224c:	f000 fc10 	bl	8002a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002254:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	4619      	mov	r1, r3
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <MX_TIM3_Init+0x94>)
 800225e:	f003 fbff 	bl	8005a60 <HAL_TIM_ConfigClockSource>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002268:	f000 fc02 	bl	8002a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002274:	463b      	mov	r3, r7
 8002276:	4619      	mov	r1, r3
 8002278:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_TIM3_Init+0x94>)
 800227a:	f003 ff71 	bl	8006160 <HAL_TIMEx_MasterConfigSynchronization>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002284:	f000 fbf4 	bl	8002a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200006c0 	.word	0x200006c0
 8002294:	40000400 	.word	0x40000400

08002298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <MX_GPIO_Init+0xc0>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	4a29      	ldr	r2, [pc, #164]	; (8002358 <MX_GPIO_Init+0xc0>)
 80022b2:	f043 0320 	orr.w	r3, r3, #32
 80022b6:	6193      	str	r3, [r2, #24]
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <MX_GPIO_Init+0xc0>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <MX_GPIO_Init+0xc0>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	4a23      	ldr	r2, [pc, #140]	; (8002358 <MX_GPIO_Init+0xc0>)
 80022ca:	f043 0308 	orr.w	r3, r3, #8
 80022ce:	6193      	str	r3, [r2, #24]
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <MX_GPIO_Init+0xc0>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <MX_GPIO_Init+0xc0>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <MX_GPIO_Init+0xc0>)
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <MX_GPIO_Init+0xc0>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022fa:	4818      	ldr	r0, [pc, #96]	; (800235c <MX_GPIO_Init+0xc4>)
 80022fc:	f000 ffc9 	bl	8003292 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002300:	2303      	movs	r3, #3
 8002302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230c:	f107 0310 	add.w	r3, r7, #16
 8002310:	4619      	mov	r1, r3
 8002312:	4813      	ldr	r0, [pc, #76]	; (8002360 <MX_GPIO_Init+0xc8>)
 8002314:	f000 fe4c 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2301      	movs	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002322:	2301      	movs	r3, #1
 8002324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002326:	2303      	movs	r3, #3
 8002328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 0310 	add.w	r3, r7, #16
 800232e:	4619      	mov	r1, r3
 8002330:	480a      	ldr	r0, [pc, #40]	; (800235c <MX_GPIO_Init+0xc4>)
 8002332:	f000 fe3d 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800233a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002340:	2302      	movs	r3, #2
 8002342:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	4619      	mov	r1, r3
 800234a:	4804      	ldr	r0, [pc, #16]	; (800235c <MX_GPIO_Init+0xc4>)
 800234c:	f000 fe30 	bl	8002fb0 <HAL_GPIO_Init>

}
 8002350:	bf00      	nop
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	40010800 	.word	0x40010800
 8002360:	40010c00 	.word	0x40010c00

08002364 <rotate_data>:

/* USER CODE BEGIN 4 */

void rotate_data(){
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0

	if(numData > 4){ // longitud de los datos a enviar
 8002368:	4b5b      	ldr	r3, [pc, #364]	; (80024d8 <rotate_data+0x174>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b04      	cmp	r3, #4
 800236e:	d902      	bls.n	8002376 <rotate_data+0x12>
		numData = 0;
 8002370:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <rotate_data+0x174>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
	}

	switch(numData){
 8002376:	4b58      	ldr	r3, [pc, #352]	; (80024d8 <rotate_data+0x174>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b04      	cmp	r3, #4
 800237c:	f200 80a8 	bhi.w	80024d0 <rotate_data+0x16c>
 8002380:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <rotate_data+0x24>)
 8002382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002386:	bf00      	nop
 8002388:	0800239d 	.word	0x0800239d
 800238c:	080023d3 	.word	0x080023d3
 8002390:	0800241b 	.word	0x0800241b
 8002394:	0800244b 	.word	0x0800244b
 8002398:	0800247b 	.word	0x0800247b
	case 0:

		data_for_send[0] = (uint8_t) revoluciones;
 800239c:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <rotate_data+0x178>)
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	4b4f      	ldr	r3, [pc, #316]	; (80024e0 <rotate_data+0x17c>)
 80023a2:	701a      	strb	r2, [r3, #0]
		data_for_send[1] = (uint8_t) move;
 80023a4:	4b4f      	ldr	r3, [pc, #316]	; (80024e4 <rotate_data+0x180>)
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	4b4d      	ldr	r3, [pc, #308]	; (80024e0 <rotate_data+0x17c>)
 80023aa:	705a      	strb	r2, [r3, #1]
		data_for_send[2] = (uint8_t) velocidad;
 80023ac:	4b4e      	ldr	r3, [pc, #312]	; (80024e8 <rotate_data+0x184>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b4b      	ldr	r3, [pc, #300]	; (80024e0 <rotate_data+0x17c>)
 80023b4:	709a      	strb	r2, [r3, #2]
		data_for_send[3] = (uint8_t) (velocidad >> 8);
 80023b6:	4b4c      	ldr	r3, [pc, #304]	; (80024e8 <rotate_data+0x184>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <rotate_data+0x17c>)
 80023c2:	70da      	strb	r2, [r3, #3]
		command = code_revl;
 80023c4:	4b49      	ldr	r3, [pc, #292]	; (80024ec <rotate_data+0x188>)
 80023c6:	2240      	movs	r2, #64	; 0x40
 80023c8:	701a      	strb	r2, [r3, #0]
		len = 4;
 80023ca:	4b49      	ldr	r3, [pc, #292]	; (80024f0 <rotate_data+0x18c>)
 80023cc:	2204      	movs	r2, #4
 80023ce:	701a      	strb	r2, [r3, #0]

		break;
 80023d0:	e07e      	b.n	80024d0 <rotate_data+0x16c>
	case 1:

		data_for_send[0] = (uint8_t) pulsos;
 80023d2:	4b48      	ldr	r3, [pc, #288]	; (80024f4 <rotate_data+0x190>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <rotate_data+0x17c>)
 80023da:	701a      	strb	r2, [r3, #0]
		data_for_send[1] = (uint8_t) (pulsos >> 8);
 80023dc:	4b45      	ldr	r3, [pc, #276]	; (80024f4 <rotate_data+0x190>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <rotate_data+0x17c>)
 80023e6:	705a      	strb	r2, [r3, #1]
		data_for_send[2] = (uint8_t) (pulsos >> 16);
 80023e8:	4b42      	ldr	r3, [pc, #264]	; (80024f4 <rotate_data+0x190>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0c1b      	lsrs	r3, r3, #16
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b3b      	ldr	r3, [pc, #236]	; (80024e0 <rotate_data+0x17c>)
 80023f2:	709a      	strb	r2, [r3, #2]
		data_for_send[3] = (uint8_t) r1_enter;
 80023f4:	4b40      	ldr	r3, [pc, #256]	; (80024f8 <rotate_data+0x194>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <rotate_data+0x17c>)
 80023fc:	70da      	strb	r2, [r3, #3]
		data_for_send[4] = (uint8_t) (r1_enter >> 8);
 80023fe:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <rotate_data+0x194>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b29b      	uxth	r3, r3
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b35      	ldr	r3, [pc, #212]	; (80024e0 <rotate_data+0x17c>)
 800240a:	711a      	strb	r2, [r3, #4]

		command = code_time;
 800240c:	4b37      	ldr	r3, [pc, #220]	; (80024ec <rotate_data+0x188>)
 800240e:	2241      	movs	r2, #65	; 0x41
 8002410:	701a      	strb	r2, [r3, #0]

		len = 5;
 8002412:	4b37      	ldr	r3, [pc, #220]	; (80024f0 <rotate_data+0x18c>)
 8002414:	2205      	movs	r2, #5
 8002416:	701a      	strb	r2, [r3, #0]

		break;
 8002418:	e05a      	b.n	80024d0 <rotate_data+0x16c>

	case 2:

		data_for_send[0] = (uint8_t) menu;
 800241a:	4b38      	ldr	r3, [pc, #224]	; (80024fc <rotate_data+0x198>)
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <rotate_data+0x17c>)
 8002420:	701a      	strb	r2, [r3, #0]
		data_for_send[1] = (uint8_t) start;
 8002422:	4b37      	ldr	r3, [pc, #220]	; (8002500 <rotate_data+0x19c>)
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <rotate_data+0x17c>)
 8002428:	705a      	strb	r2, [r3, #1]

		data_for_send[2] = (uint8_t) res_V;
 800242a:	4b36      	ldr	r3, [pc, #216]	; (8002504 <rotate_data+0x1a0>)
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <rotate_data+0x17c>)
 8002430:	709a      	strb	r2, [r3, #2]
		data_for_send[3] = (uint8_t) res_a;
 8002432:	4b35      	ldr	r3, [pc, #212]	; (8002508 <rotate_data+0x1a4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b29      	ldr	r3, [pc, #164]	; (80024e0 <rotate_data+0x17c>)
 800243a:	70da      	strb	r2, [r3, #3]

		len = 4;
 800243c:	4b2c      	ldr	r3, [pc, #176]	; (80024f0 <rotate_data+0x18c>)
 800243e:	2204      	movs	r2, #4
 8002440:	701a      	strb	r2, [r3, #0]
		command = code_menu;
 8002442:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <rotate_data+0x188>)
 8002444:	2242      	movs	r2, #66	; 0x42
 8002446:	701a      	strb	r2, [r3, #0]

		break;
 8002448:	e042      	b.n	80024d0 <rotate_data+0x16c>

	case 3:
		data_for_send[0] = (uint8_t) numero_seleccionado;
 800244a:	4b30      	ldr	r3, [pc, #192]	; (800250c <rotate_data+0x1a8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <rotate_data+0x17c>)
 8002452:	701a      	strb	r2, [r3, #0]
		data_for_send[1] = (uint8_t) (numero_seleccionado >> 8);
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <rotate_data+0x1a8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <rotate_data+0x17c>)
 800245e:	705a      	strb	r2, [r3, #1]
		data_for_send[2] = (uint8_t) (numero_seleccionado >> 16);
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <rotate_data+0x1a8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <rotate_data+0x17c>)
 800246a:	709a      	strb	r2, [r3, #2]
		command = code_tecleando;
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <rotate_data+0x188>)
 800246e:	2243      	movs	r2, #67	; 0x43
 8002470:	701a      	strb	r2, [r3, #0]
		len = 3;
 8002472:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <rotate_data+0x18c>)
 8002474:	2203      	movs	r2, #3
 8002476:	701a      	strb	r2, [r3, #0]
		break;
 8002478:	e02a      	b.n	80024d0 <rotate_data+0x16c>

	case 4:

		if(distancia < 0)
 800247a:	4b25      	ldr	r3, [pc, #148]	; (8002510 <rotate_data+0x1ac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	da03      	bge.n	800248a <rotate_data+0x126>
		data_for_send[3] = (uint8_t) 1;
 8002482:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <rotate_data+0x17c>)
 8002484:	2201      	movs	r2, #1
 8002486:	70da      	strb	r2, [r3, #3]
 8002488:	e002      	b.n	8002490 <rotate_data+0x12c>
		else
		data_for_send[3] = (uint8_t) 0;
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <rotate_data+0x17c>)
 800248c:	2200      	movs	r2, #0
 800248e:	70da      	strb	r2, [r3, #3]

		temp_dis = (uint32_t) abs(distancia);
 8002490:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <rotate_data+0x1ac>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	bfb8      	it	lt
 8002498:	425b      	neglt	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <rotate_data+0x1b0>)
 800249e:	601a      	str	r2, [r3, #0]

		data_for_send[0] = (uint8_t) temp_dis;
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <rotate_data+0x1b0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <rotate_data+0x17c>)
 80024a8:	701a      	strb	r2, [r3, #0]
		data_for_send[1] = (uint8_t) (temp_dis >> 8);
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <rotate_data+0x1b0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <rotate_data+0x17c>)
 80024b4:	705a      	strb	r2, [r3, #1]
		data_for_send[2] = (uint8_t) (temp_dis >> 16);
 80024b6:	4b17      	ldr	r3, [pc, #92]	; (8002514 <rotate_data+0x1b0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	0c1b      	lsrs	r3, r3, #16
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <rotate_data+0x17c>)
 80024c0:	709a      	strb	r2, [r3, #2]

		command = code_distancia;
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <rotate_data+0x188>)
 80024c4:	2244      	movs	r2, #68	; 0x44
 80024c6:	701a      	strb	r2, [r3, #0]
		len = 4;
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <rotate_data+0x18c>)
 80024ca:	2204      	movs	r2, #4
 80024cc:	701a      	strb	r2, [r3, #0]

	}
}
 80024ce:	e7ff      	b.n	80024d0 <rotate_data+0x16c>
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	200001ac 	.word	0x200001ac
 80024dc:	2000080c 	.word	0x2000080c
 80024e0:	20000788 	.word	0x20000788
 80024e4:	20000785 	.word	0x20000785
 80024e8:	200001b4 	.word	0x200001b4
 80024ec:	20000002 	.word	0x20000002
 80024f0:	20000001 	.word	0x20000001
 80024f4:	20000858 	.word	0x20000858
 80024f8:	20000808 	.word	0x20000808
 80024fc:	200001ad 	.word	0x200001ad
 8002500:	200001b6 	.word	0x200001b6
 8002504:	200001b7 	.word	0x200001b7
 8002508:	200001b8 	.word	0x200001b8
 800250c:	2000065c 	.word	0x2000065c
 8002510:	2000085c 	.word	0x2000085c
 8002514:	200006b4 	.word	0x200006b4

08002518 <select_data>:

void select_data(){
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0

	max_menu = 5;
 800251c:	4b52      	ldr	r3, [pc, #328]	; (8002668 <select_data+0x150>)
 800251e:	2205      	movs	r2, #5
 8002520:	701a      	strb	r2, [r3, #0]

	if(Compress[1] == 0xEB){
 8002522:	4b52      	ldr	r3, [pc, #328]	; (800266c <select_data+0x154>)
 8002524:	785b      	ldrb	r3, [r3, #1]
 8002526:	2beb      	cmp	r3, #235	; 0xeb
 8002528:	d12c      	bne.n	8002584 <select_data+0x6c>
		switch(Compress[0]){
 800252a:	4b50      	ldr	r3, [pc, #320]	; (800266c <select_data+0x154>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2baf      	cmp	r3, #175	; 0xaf
 8002530:	d002      	beq.n	8002538 <select_data+0x20>
 8002532:	2bcf      	cmp	r3, #207	; 0xcf
 8002534:	d012      	beq.n	800255c <select_data+0x44>
 8002536:	e022      	b.n	800257e <select_data+0x66>

		case 0xaf: // arriba
			if((menu + 1) > max_menu){
 8002538:	4b4d      	ldr	r3, [pc, #308]	; (8002670 <select_data+0x158>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <select_data+0x150>)
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	4293      	cmp	r3, r2
 8002544:	dd03      	ble.n	800254e <select_data+0x36>
				menu = 0; // max option of the menu
 8002546:	4b4a      	ldr	r3, [pc, #296]	; (8002670 <select_data+0x158>)
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
			}else{
				menu += 1;
			}
			break;
 800254c:	e017      	b.n	800257e <select_data+0x66>
				menu += 1;
 800254e:	4b48      	ldr	r3, [pc, #288]	; (8002670 <select_data+0x158>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b46      	ldr	r3, [pc, #280]	; (8002670 <select_data+0x158>)
 8002558:	701a      	strb	r2, [r3, #0]
			break;
 800255a:	e010      	b.n	800257e <select_data+0x66>
		case 0xcf:
			if((menu - 1) < 0){
 800255c:	4b44      	ldr	r3, [pc, #272]	; (8002670 <select_data+0x158>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	3b01      	subs	r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	da04      	bge.n	8002570 <select_data+0x58>
				menu = max_menu; // max option of the menu
 8002566:	4b40      	ldr	r3, [pc, #256]	; (8002668 <select_data+0x150>)
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	4b41      	ldr	r3, [pc, #260]	; (8002670 <select_data+0x158>)
 800256c:	701a      	strb	r2, [r3, #0]
			}else{
				menu -= 1;
			}
			break;
 800256e:	e005      	b.n	800257c <select_data+0x64>
				menu -= 1;
 8002570:	4b3f      	ldr	r3, [pc, #252]	; (8002670 <select_data+0x158>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	3b01      	subs	r3, #1
 8002576:	b2da      	uxtb	r2, r3
 8002578:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <select_data+0x158>)
 800257a:	701a      	strb	r2, [r3, #0]
			break;
 800257c:	bf00      	nop
		}

		Compress[0] = 0;
 800257e:	4b3b      	ldr	r3, [pc, #236]	; (800266c <select_data+0x154>)
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
	}

	if(Compress[0] == 0x68 && Compress[1] == 0xcb){
 8002584:	4b39      	ldr	r3, [pc, #228]	; (800266c <select_data+0x154>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b68      	cmp	r3, #104	; 0x68
 800258a:	d16a      	bne.n	8002662 <select_data+0x14a>
 800258c:	4b37      	ldr	r3, [pc, #220]	; (800266c <select_data+0x154>)
 800258e:	785b      	ldrb	r3, [r3, #1]
 8002590:	2bcb      	cmp	r3, #203	; 0xcb
 8002592:	d166      	bne.n	8002662 <select_data+0x14a>
		switch(menu){
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <select_data+0x158>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b05      	cmp	r3, #5
 800259a:	d862      	bhi.n	8002662 <select_data+0x14a>
 800259c:	a201      	add	r2, pc, #4	; (adr r2, 80025a4 <select_data+0x8c>)
 800259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a2:	bf00      	nop
 80025a4:	080025bd 	.word	0x080025bd
 80025a8:	080025d1 	.word	0x080025d1
 80025ac:	080025db 	.word	0x080025db
 80025b0:	0800261b 	.word	0x0800261b
 80025b4:	08002631 	.word	0x08002631
 80025b8:	08002647 	.word	0x08002647
		case 0:
			if( numero_temp < 101 )
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <select_data+0x15c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b64      	cmp	r3, #100	; 0x64
 80025c2:	d84b      	bhi.n	800265c <select_data+0x144>
			revoluciones = (uint8_t) numero_temp;
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <select_data+0x15c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <select_data+0x160>)
 80025cc:	701a      	strb	r2, [r3, #0]
			break;
 80025ce:	e045      	b.n	800265c <select_data+0x144>
		case 1:
			pulsos = numero_temp;
 80025d0:	4b28      	ldr	r3, [pc, #160]	; (8002674 <select_data+0x15c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a29      	ldr	r2, [pc, #164]	; (800267c <select_data+0x164>)
 80025d6:	6013      	str	r3, [r2, #0]
			break;
 80025d8:	e043      	b.n	8002662 <select_data+0x14a>
		case 2:
			if( numero_temp < 2300){
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <select_data+0x15c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f640 02fb 	movw	r2, #2299	; 0x8fb
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d83c      	bhi.n	8002660 <select_data+0x148>
				r1_enter = numero_temp;
 80025e6:	4b23      	ldr	r3, [pc, #140]	; (8002674 <select_data+0x15c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	4b24      	ldr	r3, [pc, #144]	; (8002680 <select_data+0x168>)
 80025ee:	801a      	strh	r2, [r3, #0]
				r1 = (numero_temp/16);
 80025f0:	4b20      	ldr	r3, [pc, #128]	; (8002674 <select_data+0x15c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fa7e 	bl	8000af8 <__aeabi_ui2f>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b21      	ldr	r3, [pc, #132]	; (8002684 <select_data+0x16c>)
 8002600:	601a      	str	r2, [r3, #0]
				k=r1;
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <select_data+0x16c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a20      	ldr	r2, [pc, #128]	; (8002688 <select_data+0x170>)
 8002608:	6013      	str	r3, [r2, #0]
				params_choose(r1_enter);
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <select_data+0x168>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fb9a 	bl	8001d48 <params_choose>
				actualizar_par();
 8002614:	f7ff fa78 	bl	8001b08 <actualizar_par>
			}
			break;
 8002618:	e022      	b.n	8002660 <select_data+0x148>
		case 3:
			start = !start;
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <select_data+0x174>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	bf0c      	ite	eq
 8002622:	2301      	moveq	r3, #1
 8002624:	2300      	movne	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <select_data+0x174>)
 800262c:	701a      	strb	r2, [r3, #0]
			break;
 800262e:	e018      	b.n	8002662 <select_data+0x14a>
		case 4:
			res_V = !res_V;
 8002630:	4b17      	ldr	r3, [pc, #92]	; (8002690 <select_data+0x178>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <select_data+0x178>)
 8002642:	701a      	strb	r2, [r3, #0]
			break;
 8002644:	e00d      	b.n	8002662 <select_data+0x14a>
		case 5:
			res_a = !res_a;
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <select_data+0x17c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <select_data+0x17c>)
 8002658:	601a      	str	r2, [r3, #0]
			break;
 800265a:	e002      	b.n	8002662 <select_data+0x14a>
			break;
 800265c:	bf00      	nop
 800265e:	e000      	b.n	8002662 <select_data+0x14a>
			break;
 8002660:	bf00      	nop

		}
	}
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000003 	.word	0x20000003
 800266c:	20000658 	.word	0x20000658
 8002670:	200001ad 	.word	0x200001ad
 8002674:	20000664 	.word	0x20000664
 8002678:	2000080c 	.word	0x2000080c
 800267c:	20000858 	.word	0x20000858
 8002680:	20000808 	.word	0x20000808
 8002684:	200006b0 	.word	0x200006b0
 8002688:	20000680 	.word	0x20000680
 800268c:	200001b6 	.word	0x200001b6
 8002690:	200001b7 	.word	0x200001b7
 8002694:	200001b8 	.word	0x200001b8

08002698 <state_motor>:

void state_motor(){
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0

	num_sensor = 0;
 800269e:	4b82      	ldr	r3, [pc, #520]	; (80028a8 <state_motor+0x210>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
	num_sensor =
			(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) << 1) |
 80026a4:	2101      	movs	r1, #1
 80026a6:	4881      	ldr	r0, [pc, #516]	; (80028ac <state_motor+0x214>)
 80026a8:	f000 fddc 	bl	8003264 <HAL_GPIO_ReadPin>
 80026ac:	4603      	mov	r3, r0
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	b25c      	sxtb	r4, r3
			HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80026b2:	2102      	movs	r1, #2
 80026b4:	487d      	ldr	r0, [pc, #500]	; (80028ac <state_motor+0x214>)
 80026b6:	f000 fdd5 	bl	8003264 <HAL_GPIO_ReadPin>
 80026ba:	4603      	mov	r3, r0
 80026bc:	b25b      	sxtb	r3, r3
			(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) << 1) |
 80026be:	4323      	orrs	r3, r4
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	b2da      	uxtb	r2, r3
	num_sensor =
 80026c4:	4b78      	ldr	r3, [pc, #480]	; (80028a8 <state_motor+0x210>)
 80026c6:	701a      	strb	r2, [r3, #0]

	switch(num_sensor){
 80026c8:	4b77      	ldr	r3, [pc, #476]	; (80028a8 <state_motor+0x210>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d81b      	bhi.n	8002708 <state_motor+0x70>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <state_motor+0x40>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	080026e9 	.word	0x080026e9
 80026dc:	080026f1 	.word	0x080026f1
 80026e0:	080026f9 	.word	0x080026f9
 80026e4:	08002701 	.word	0x08002701
	case 0:
		actual = off_off; // 2
 80026e8:	4b71      	ldr	r3, [pc, #452]	; (80028b0 <state_motor+0x218>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
		break;
 80026ee:	e00b      	b.n	8002708 <state_motor+0x70>
	case 1:
		actual = off_on; // 3
 80026f0:	4b6f      	ldr	r3, [pc, #444]	; (80028b0 <state_motor+0x218>)
 80026f2:	2202      	movs	r2, #2
 80026f4:	701a      	strb	r2, [r3, #0]
		break;
 80026f6:	e007      	b.n	8002708 <state_motor+0x70>
	case 2:
		actual = on_off; // 1
 80026f8:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <state_motor+0x218>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
		break;
 80026fe:	e003      	b.n	8002708 <state_motor+0x70>
	case 3:
		actual = on_on; // 4
 8002700:	4b6b      	ldr	r3, [pc, #428]	; (80028b0 <state_motor+0x218>)
 8002702:	2203      	movs	r2, #3
 8002704:	701a      	strb	r2, [r3, #0]
		break;
 8002706:	bf00      	nop
	}

	if(anterior != actual){
 8002708:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <state_motor+0x21c>)
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	4b68      	ldr	r3, [pc, #416]	; (80028b0 <state_motor+0x218>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d074      	beq.n	80027fe <state_motor+0x166>

		if(pulsos > 0){
 8002714:	4b68      	ldr	r3, [pc, #416]	; (80028b8 <state_motor+0x220>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <state_motor+0x8e>
			pulsos--;
 800271c:	4b66      	ldr	r3, [pc, #408]	; (80028b8 <state_motor+0x220>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3b01      	subs	r3, #1
 8002722:	4a65      	ldr	r2, [pc, #404]	; (80028b8 <state_motor+0x220>)
 8002724:	6013      	str	r3, [r2, #0]
		}

		delta_time = __HAL_TIM_GET_COUNTER(&htim3);
 8002726:	4b65      	ldr	r3, [pc, #404]	; (80028bc <state_motor+0x224>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	b29a      	uxth	r2, r3
 800272e:	4b64      	ldr	r3, [pc, #400]	; (80028c0 <state_motor+0x228>)
 8002730:	801a      	strh	r2, [r3, #0]

		if(actual == 4 || actual == 1 ){
 8002732:	4b5f      	ldr	r3, [pc, #380]	; (80028b0 <state_motor+0x218>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b04      	cmp	r3, #4
 8002738:	d003      	beq.n	8002742 <state_motor+0xaa>
 800273a:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <state_motor+0x218>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d125      	bne.n	800278e <state_motor+0xf6>
			detect_vel();
 8002742:	f000 f8d3 	bl	80028ec <detect_vel>
			__HAL_TIM_SET_COUNTER(&htim3,0);
 8002746:	4b5d      	ldr	r3, [pc, #372]	; (80028bc <state_motor+0x224>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2200      	movs	r2, #0
 800274c:	625a      	str	r2, [r3, #36]	; 0x24
			if(r1 > 0){
 800274e:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <state_motor+0x22c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f04f 0100 	mov.w	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fbe2 	bl	8000f20 <__aeabi_fcmpgt>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d015      	beq.n	800278e <state_motor+0xf6>
				PID(); // controlador
 8002762:	f7ff f947 	bl	80019f4 <PID>
				revoluciones = (50/abs(u-100));
 8002766:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <state_motor+0x230>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4958      	ldr	r1, [pc, #352]	; (80028cc <state_motor+0x234>)
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe f911 	bl	8000994 <__aeabi_fsub>
 8002772:	4603      	mov	r3, r0
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fbdd 	bl	8000f34 <__aeabi_f2iz>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	bfb8      	it	lt
 8002780:	425b      	neglt	r3, r3
 8002782:	2232      	movs	r2, #50	; 0x32
 8002784:	fb92 f3f3 	sdiv	r3, r2, r3
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b51      	ldr	r3, [pc, #324]	; (80028d0 <state_motor+0x238>)
 800278c:	701a      	strb	r2, [r3, #0]
			}
		}

		if((actual - anterior) == 1 || (actual - anterior) == -3 ){
 800278e:	4b48      	ldr	r3, [pc, #288]	; (80028b0 <state_motor+0x218>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <state_motor+0x21c>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d008      	beq.n	80027b0 <state_motor+0x118>
 800279e:	4b44      	ldr	r3, [pc, #272]	; (80028b0 <state_motor+0x218>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b43      	ldr	r3, [pc, #268]	; (80028b4 <state_motor+0x21c>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f113 0f03 	cmn.w	r3, #3
 80027ae:	d108      	bne.n	80027c2 <state_motor+0x12a>

			move = derecha;
 80027b0:	4b48      	ldr	r3, [pc, #288]	; (80028d4 <state_motor+0x23c>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
			distancia += 1;
 80027b6:	4b48      	ldr	r3, [pc, #288]	; (80028d8 <state_motor+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3301      	adds	r3, #1
 80027bc:	4a46      	ldr	r2, [pc, #280]	; (80028d8 <state_motor+0x240>)
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	e018      	b.n	80027f4 <state_motor+0x15c>

		}else if( (actual - anterior) == -1 || (actual - anterior) == 3 ){
 80027c2:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <state_motor+0x218>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	4b3a      	ldr	r3, [pc, #232]	; (80028b4 <state_motor+0x21c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d2:	d007      	beq.n	80027e4 <state_motor+0x14c>
 80027d4:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <state_motor+0x218>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <state_motor+0x21c>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d107      	bne.n	80027f4 <state_motor+0x15c>

			move = izquierda;
 80027e4:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <state_motor+0x23c>)
 80027e6:	2202      	movs	r2, #2
 80027e8:	701a      	strb	r2, [r3, #0]
			distancia -= 1;
 80027ea:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <state_motor+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	4a39      	ldr	r2, [pc, #228]	; (80028d8 <state_motor+0x240>)
 80027f2:	6013      	str	r3, [r2, #0]

		}

		anterior = actual;
 80027f4:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <state_motor+0x218>)
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <state_motor+0x21c>)
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e030      	b.n	8002860 <state_motor+0x1c8>

	}else if( __HAL_TIM_GET_COUNTER(&htim3) > 19000 ){
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <state_motor+0x224>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	f644 2238 	movw	r2, #19000	; 0x4a38
 8002808:	4293      	cmp	r3, r2
 800280a:	d929      	bls.n	8002860 <state_motor+0x1c8>

		move = stop;
 800280c:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <state_motor+0x23c>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
		velocidad = 0;
 8002812:	4b32      	ldr	r3, [pc, #200]	; (80028dc <state_motor+0x244>)
 8002814:	2200      	movs	r2, #0
 8002816:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim3,0);
 8002818:	4b28      	ldr	r3, [pc, #160]	; (80028bc <state_motor+0x224>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2200      	movs	r2, #0
 800281e:	625a      	str	r2, [r3, #36]	; 0x24

		if(r1 > 0){
 8002820:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <state_motor+0x22c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f04f 0100 	mov.w	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe fb79 	bl	8000f20 <__aeabi_fcmpgt>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d015      	beq.n	8002860 <state_motor+0x1c8>
			PID(); // controlador
 8002834:	f7ff f8de 	bl	80019f4 <PID>
			revoluciones = (50/abs(u-100));
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <state_motor+0x230>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4923      	ldr	r1, [pc, #140]	; (80028cc <state_motor+0x234>)
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe f8a8 	bl	8000994 <__aeabi_fsub>
 8002844:	4603      	mov	r3, r0
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fb74 	bl	8000f34 <__aeabi_f2iz>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	bfb8      	it	lt
 8002852:	425b      	neglt	r3, r3
 8002854:	2232      	movs	r2, #50	; 0x32
 8002856:	fb92 f3f3 	sdiv	r3, r2, r3
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <state_motor+0x238>)
 800285e:	701a      	strb	r2, [r3, #0]
		}

	}

	if(pulsos == 0 || !start ){
 8002860:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <state_motor+0x220>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <state_motor+0x1d8>
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <state_motor+0x248>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d106      	bne.n	800287e <state_motor+0x1e6>
		uint16_t porcent = (200 * 50/100 );
 8002870:	2364      	movs	r3, #100	; 0x64
 8002872:	80bb      	strh	r3, [r7, #4]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, porcent);
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <state_motor+0x24c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	88ba      	ldrh	r2, [r7, #4]
 800287a:	635a      	str	r2, [r3, #52]	; 0x34
	if(pulsos == 0 || !start ){
 800287c:	e010      	b.n	80028a0 <state_motor+0x208>
	}else{
		uint16_t porcent = (200 * revoluciones/100 );
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <state_motor+0x238>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	23c8      	movs	r3, #200	; 0xc8
 8002886:	fb03 f302 	mul.w	r3, r3, r2
 800288a:	4a17      	ldr	r2, [pc, #92]	; (80028e8 <state_motor+0x250>)
 800288c:	fb82 1203 	smull	r1, r2, r2, r3
 8002890:	1152      	asrs	r2, r2, #5
 8002892:	17db      	asrs	r3, r3, #31
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, porcent);
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <state_motor+0x24c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	88fa      	ldrh	r2, [r7, #6]
 800289e:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd90      	pop	{r4, r7, pc}
 80028a8:	200006bc 	.word	0x200006bc
 80028ac:	40010c00 	.word	0x40010c00
 80028b0:	2000080a 	.word	0x2000080a
 80028b4:	2000080b 	.word	0x2000080b
 80028b8:	20000858 	.word	0x20000858
 80028bc:	200006c0 	.word	0x200006c0
 80028c0:	20000004 	.word	0x20000004
 80028c4:	200006b0 	.word	0x200006b0
 80028c8:	200006a4 	.word	0x200006a4
 80028cc:	42c80000 	.word	0x42c80000
 80028d0:	2000080c 	.word	0x2000080c
 80028d4:	20000785 	.word	0x20000785
 80028d8:	2000085c 	.word	0x2000085c
 80028dc:	200001b4 	.word	0x200001b4
 80028e0:	200001b6 	.word	0x200001b6
 80028e4:	200007c0 	.word	0x200007c0
 80028e8:	51eb851f 	.word	0x51eb851f

080028ec <detect_vel>:

void detect_vel(){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0

	if(   ((20000/delta_time) - velocidad ) < 8 &&
 80028f0:	4b23      	ldr	r3, [pc, #140]	; (8002980 <detect_vel+0x94>)
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80028fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80028fe:	4a21      	ldr	r2, [pc, #132]	; (8002984 <detect_vel+0x98>)
 8002900:	8812      	ldrh	r2, [r2, #0]
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	2b07      	cmp	r3, #7
 8002906:	dc38      	bgt.n	800297a <detect_vel+0x8e>
		  ((20000/delta_time) - velocidad ) > (-8) ){
 8002908:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <detect_vel+0x94>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002912:	fb93 f3f2 	sdiv	r3, r3, r2
 8002916:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <detect_vel+0x98>)
 8002918:	8812      	ldrh	r2, [r2, #0]
 800291a:	1a9b      	subs	r3, r3, r2
	if(   ((20000/delta_time) - velocidad ) < 8 &&
 800291c:	f113 0f07 	cmn.w	r3, #7
 8002920:	db2b      	blt.n	800297a <detect_vel+0x8e>

	  velocidad = (uint16_t) ((velocidad + (20000/delta_time))/2);
 8002922:	4b18      	ldr	r3, [pc, #96]	; (8002984 <detect_vel+0x98>)
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	4b15      	ldr	r3, [pc, #84]	; (8002980 <detect_vel+0x94>)
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	4619      	mov	r1, r3
 800292e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002932:	fb93 f3f1 	sdiv	r3, r3, r1
 8002936:	4413      	add	r3, r2
 8002938:	0fda      	lsrs	r2, r3, #31
 800293a:	4413      	add	r3, r2
 800293c:	105b      	asrs	r3, r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	4b10      	ldr	r3, [pc, #64]	; (8002984 <detect_vel+0x98>)
 8002942:	801a      	strh	r2, [r3, #0]
	  v1 = ((v1 + (20000/delta_time))/2);
 8002944:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <detect_vel+0x94>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800294e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe f8d4 	bl	8000b00 <__aeabi_i2f>
 8002958:	4602      	mov	r2, r0
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <detect_vel+0x9c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f7fe f819 	bl	8000998 <__addsf3>
 8002966:	4603      	mov	r3, r0
 8002968:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe f9cf 	bl	8000d10 <__aeabi_fdiv>
 8002972:	4603      	mov	r3, r0
 8002974:	461a      	mov	r2, r3
 8002976:	4b04      	ldr	r3, [pc, #16]	; (8002988 <detect_vel+0x9c>)
 8002978:	601a      	str	r2, [r3, #0]

	}
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000004 	.word	0x20000004
 8002984:	200001b4 	.word	0x200001b4
 8002988:	20000674 	.word	0x20000674

0800298c <resiveRx>:

// agragar función a USB_DEVICE_cdc_if CON __WEAK
void resiveRx(uint8_t* Buf, uint32_t *Len ){
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]

	memcpy( &dataResiveSerial, Buf, Buf[2] + 5);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3302      	adds	r3, #2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	3305      	adds	r3, #5
 800299e:	461a      	mov	r2, r3
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4808      	ldr	r0, [pc, #32]	; (80029c4 <resiveRx+0x38>)
 80029a4:	f007 fd74 	bl	800a490 <memcpy>
	lenBuffer = dataResiveSerial[2];
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <resiveRx+0x38>)
 80029aa:	789b      	ldrb	r3, [r3, #2]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <resiveRx+0x3c>)
 80029b2:	601a      	str	r2, [r3, #0]
	resive_protocol = GPIO_PIN_SET;
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <resiveRx+0x40>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	701a      	strb	r2, [r3, #0]

}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000708 	.word	0x20000708
 80029c8:	200007bc 	.word	0x200007bc
 80029cc:	2000045d 	.word	0x2000045d

080029d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d134      	bne.n	8002a4c <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		read = 1;
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]

		counterTime += 1;
 80029e8:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3301      	adds	r3, #1
 80029ee:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80029f0:	6013      	str	r3, [r2, #0]

		if(counterTime > 19999){
 80029f2:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d908      	bls.n	8002a10 <HAL_TIM_PeriodElapsedCallback+0x40>
			waitTime += 1;
 80029fe:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002a08:	801a      	strh	r2, [r3, #0]
			counterTime = 0;
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
		}

		if( tiempo_motor > 0 && revoluciones != 50){
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d015      	beq.n	8002a44 <HAL_TIM_PeriodElapsedCallback+0x74>
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b32      	cmp	r3, #50	; 0x32
 8002a1e:	d011      	beq.n	8002a44 <HAL_TIM_PeriodElapsedCallback+0x74>
			counter_motor_time += 1;
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3301      	adds	r3, #1
 8002a26:	4a11      	ldr	r2, [pc, #68]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002a28:	6013      	str	r3, [r2, #0]
			if(counter_motor_time > 19){
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b13      	cmp	r3, #19
 8002a30:	d90c      	bls.n	8002a4c <HAL_TIM_PeriodElapsedCallback+0x7c>
				tiempo_motor --;
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002a3a:	6013      	str	r3, [r2, #0]
				counter_motor_time = 0;
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
			if(counter_motor_time > 19){
 8002a42:	e003      	b.n	8002a4c <HAL_TIM_PeriodElapsedCallback+0x7c>
			}
		}else{
			counter_motor_time = 0;
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002a4a:	e7ff      	b.n	8002a4c <HAL_TIM_PeriodElapsedCallback+0x7c>
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	200001a8 	.word	0x200001a8
 8002a60:	20000560 	.word	0x20000560
 8002a64:	200006b8 	.word	0x200006b8
 8002a68:	2000080c 	.word	0x2000080c
 8002a6c:	200001b0 	.word	0x200001b0

08002a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a74:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a76:	e7fe      	b.n	8002a76 <Error_Handler+0x6>

08002a78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6193      	str	r3, [r2, #24]
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4a0e      	ldr	r2, [pc, #56]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	61d3      	str	r3, [r2, #28]
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_MspInit+0x60>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <HAL_MspInit+0x60>)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40010000 	.word	0x40010000

08002adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <HAL_TIM_Base_MspInit+0x9c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d10c      	bne.n	8002b08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aee:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_TIM_Base_MspInit+0xa0>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_TIM_Base_MspInit+0xa0>)
 8002af4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002af8:	6193      	str	r3, [r2, #24]
 8002afa:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <HAL_TIM_Base_MspInit+0xa0>)
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b06:	e032      	b.n	8002b6e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b10:	d114      	bne.n	8002b3c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <HAL_TIM_Base_MspInit+0xa0>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <HAL_TIM_Base_MspInit+0xa0>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	61d3      	str	r3, [r2, #28]
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <HAL_TIM_Base_MspInit+0xa0>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	201c      	movs	r0, #28
 8002b30:	f000 fa07 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b34:	201c      	movs	r0, #28
 8002b36:	f000 fa20 	bl	8002f7a <HAL_NVIC_EnableIRQ>
}
 8002b3a:	e018      	b.n	8002b6e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <HAL_TIM_Base_MspInit+0xa4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d113      	bne.n	8002b6e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_TIM_Base_MspInit+0xa0>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <HAL_TIM_Base_MspInit+0xa0>)
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	61d3      	str	r3, [r2, #28]
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_TIM_Base_MspInit+0xa0>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	201d      	movs	r0, #29
 8002b64:	f000 f9ed 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b68:	201d      	movs	r0, #29
 8002b6a:	f000 fa06 	bl	8002f7a <HAL_NVIC_EnableIRQ>
}
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40000400 	.word	0x40000400

08002b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0310 	add.w	r3, r7, #16
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_TIM_MspPostInit+0x5c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d118      	bne.n	8002bd6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <HAL_TIM_MspPostInit+0x60>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <HAL_TIM_MspPostInit+0x60>)
 8002baa:	f043 0304 	orr.w	r3, r3, #4
 8002bae:	6193      	str	r3, [r2, #24]
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <HAL_TIM_MspPostInit+0x60>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bca:	f107 0310 	add.w	r3, r7, #16
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4805      	ldr	r0, [pc, #20]	; (8002be8 <HAL_TIM_MspPostInit+0x64>)
 8002bd2:	f000 f9ed 	bl	8002fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002bd6:	bf00      	nop
 8002bd8:	3720      	adds	r7, #32
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40012c00 	.word	0x40012c00
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40010800 	.word	0x40010800

08002bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <NMI_Handler+0x4>

08002bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf6:	e7fe      	b.n	8002bf6 <HardFault_Handler+0x4>

08002bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <MemManage_Handler+0x4>

08002bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c02:	e7fe      	b.n	8002c02 <BusFault_Handler+0x4>

08002c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <UsageFault_Handler+0x4>

08002c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr

08002c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c32:	f000 f893 	bl	8002d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002c42:	f000 fc6f 	bl	8003524 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200014f8 	.word	0x200014f8

08002c50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <TIM2_IRQHandler+0x10>)
 8002c56:	f002 fd3d 	bl	80056d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000810 	.word	0x20000810

08002c64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <TIM3_IRQHandler+0x10>)
 8002c6a:	f002 fd33 	bl	80056d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200006c0 	.word	0x200006c0

08002c78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c84:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c86:	e003      	b.n	8002c90 <LoopCopyDataInit>

08002c88 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c8a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c8c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c8e:	3104      	adds	r1, #4

08002c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c90:	480a      	ldr	r0, [pc, #40]	; (8002cbc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c94:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c96:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c98:	d3f6      	bcc.n	8002c88 <CopyDataInit>
  ldr r2, =_sbss
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c9c:	e002      	b.n	8002ca4 <LoopFillZerobss>

08002c9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c9e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ca0:	f842 3b04 	str.w	r3, [r2], #4

08002ca4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ca6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ca8:	d3f9      	bcc.n	8002c9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002caa:	f7ff ffe5 	bl	8002c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cae:	f007 fbcb 	bl	800a448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cb2:	f7ff f8a1 	bl	8001df8 <main>
  bx lr
 8002cb6:	4770      	bx	lr
  ldr r3, =_sidata
 8002cb8:	0800a544 	.word	0x0800a544
  ldr r0, =_sdata
 8002cbc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002cc0:	20000184 	.word	0x20000184
  ldr r2, =_sbss
 8002cc4:	20000184 	.word	0x20000184
  ldr r3, = _ebss
 8002cc8:	200017e4 	.word	0x200017e4

08002ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ccc:	e7fe      	b.n	8002ccc <ADC1_2_IRQHandler>
	...

08002cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_Init+0x28>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <HAL_Init+0x28>)
 8002cda:	f043 0310 	orr.w	r3, r3, #16
 8002cde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f000 f923 	bl	8002f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f000 f808 	bl	8002cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cec:	f7ff fec4 	bl	8002a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40022000 	.word	0x40022000

08002cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_InitTick+0x54>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_InitTick+0x58>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f93b 	bl	8002f96 <HAL_SYSTICK_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00e      	b.n	8002d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b0f      	cmp	r3, #15
 8002d2e:	d80a      	bhi.n	8002d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d30:	2200      	movs	r2, #0
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	f000 f903 	bl	8002f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d3c:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <HAL_InitTick+0x5c>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000008 	.word	0x20000008
 8002d54:	20000010 	.word	0x20000010
 8002d58:	2000000c 	.word	0x2000000c

08002d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_IncTick+0x1c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_IncTick+0x20>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <HAL_IncTick+0x20>)
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	20000010 	.word	0x20000010
 8002d7c:	20000860 	.word	0x20000860

08002d80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return uwTick;
 8002d84:	4b02      	ldr	r3, [pc, #8]	; (8002d90 <HAL_GetTick+0x10>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	20000860 	.word	0x20000860

08002d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <__NVIC_GetPriorityGrouping+0x18>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 0307 	and.w	r3, r3, #7
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4906      	ldr	r1, [pc, #24]	; (8002e2c <__NVIC_EnableIRQ+0x34>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	; (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	; (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
         );
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef8:	d301      	bcc.n	8002efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00f      	b.n	8002f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <SysTick_Config+0x40>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f06:	210f      	movs	r1, #15
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	f7ff ff90 	bl	8002e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <SysTick_Config+0x40>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <SysTick_Config+0x40>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	e000e010 	.word	0xe000e010

08002f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff2d 	bl	8002d94 <__NVIC_SetPriorityGrouping>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff42 	bl	8002ddc <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff90 	bl	8002e84 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5f 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff35 	bl	8002df8 <__NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffa2 	bl	8002ee8 <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b08b      	sub	sp, #44	; 0x2c
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc2:	e127      	b.n	8003214 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	f040 8116 	bne.w	800320e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b12      	cmp	r3, #18
 8002fe8:	d034      	beq.n	8003054 <HAL_GPIO_Init+0xa4>
 8002fea:	2b12      	cmp	r3, #18
 8002fec:	d80d      	bhi.n	800300a <HAL_GPIO_Init+0x5a>
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d02b      	beq.n	800304a <HAL_GPIO_Init+0x9a>
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d804      	bhi.n	8003000 <HAL_GPIO_Init+0x50>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d031      	beq.n	800305e <HAL_GPIO_Init+0xae>
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d01c      	beq.n	8003038 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ffe:	e048      	b.n	8003092 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003000:	2b03      	cmp	r3, #3
 8003002:	d043      	beq.n	800308c <HAL_GPIO_Init+0xdc>
 8003004:	2b11      	cmp	r3, #17
 8003006:	d01b      	beq.n	8003040 <HAL_GPIO_Init+0x90>
          break;
 8003008:	e043      	b.n	8003092 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800300a:	4a89      	ldr	r2, [pc, #548]	; (8003230 <HAL_GPIO_Init+0x280>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d026      	beq.n	800305e <HAL_GPIO_Init+0xae>
 8003010:	4a87      	ldr	r2, [pc, #540]	; (8003230 <HAL_GPIO_Init+0x280>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d806      	bhi.n	8003024 <HAL_GPIO_Init+0x74>
 8003016:	4a87      	ldr	r2, [pc, #540]	; (8003234 <HAL_GPIO_Init+0x284>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d020      	beq.n	800305e <HAL_GPIO_Init+0xae>
 800301c:	4a86      	ldr	r2, [pc, #536]	; (8003238 <HAL_GPIO_Init+0x288>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d01d      	beq.n	800305e <HAL_GPIO_Init+0xae>
          break;
 8003022:	e036      	b.n	8003092 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003024:	4a85      	ldr	r2, [pc, #532]	; (800323c <HAL_GPIO_Init+0x28c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d019      	beq.n	800305e <HAL_GPIO_Init+0xae>
 800302a:	4a85      	ldr	r2, [pc, #532]	; (8003240 <HAL_GPIO_Init+0x290>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d016      	beq.n	800305e <HAL_GPIO_Init+0xae>
 8003030:	4a84      	ldr	r2, [pc, #528]	; (8003244 <HAL_GPIO_Init+0x294>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d013      	beq.n	800305e <HAL_GPIO_Init+0xae>
          break;
 8003036:	e02c      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	623b      	str	r3, [r7, #32]
          break;
 800303e:	e028      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	3304      	adds	r3, #4
 8003046:	623b      	str	r3, [r7, #32]
          break;
 8003048:	e023      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	3308      	adds	r3, #8
 8003050:	623b      	str	r3, [r7, #32]
          break;
 8003052:	e01e      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	330c      	adds	r3, #12
 800305a:	623b      	str	r3, [r7, #32]
          break;
 800305c:	e019      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003066:	2304      	movs	r3, #4
 8003068:	623b      	str	r3, [r7, #32]
          break;
 800306a:	e012      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003074:	2308      	movs	r3, #8
 8003076:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	611a      	str	r2, [r3, #16]
          break;
 800307e:	e008      	b.n	8003092 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003080:	2308      	movs	r3, #8
 8003082:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	615a      	str	r2, [r3, #20]
          break;
 800308a:	e002      	b.n	8003092 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800308c:	2300      	movs	r3, #0
 800308e:	623b      	str	r3, [r7, #32]
          break;
 8003090:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2bff      	cmp	r3, #255	; 0xff
 8003096:	d801      	bhi.n	800309c <HAL_GPIO_Init+0xec>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	e001      	b.n	80030a0 <HAL_GPIO_Init+0xf0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2bff      	cmp	r3, #255	; 0xff
 80030a6:	d802      	bhi.n	80030ae <HAL_GPIO_Init+0xfe>
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	e002      	b.n	80030b4 <HAL_GPIO_Init+0x104>
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	3b08      	subs	r3, #8
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	210f      	movs	r1, #15
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	401a      	ands	r2, r3
 80030c6:	6a39      	ldr	r1, [r7, #32]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	431a      	orrs	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8096 	beq.w	800320e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030e2:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_GPIO_Init+0x298>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	4a58      	ldr	r2, [pc, #352]	; (8003248 <HAL_GPIO_Init+0x298>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6193      	str	r3, [r2, #24]
 80030ee:	4b56      	ldr	r3, [pc, #344]	; (8003248 <HAL_GPIO_Init+0x298>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030fa:	4a54      	ldr	r2, [pc, #336]	; (800324c <HAL_GPIO_Init+0x29c>)
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3302      	adds	r3, #2
 8003102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003106:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	220f      	movs	r2, #15
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4013      	ands	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4b      	ldr	r2, [pc, #300]	; (8003250 <HAL_GPIO_Init+0x2a0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0x19e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4a      	ldr	r2, [pc, #296]	; (8003254 <HAL_GPIO_Init+0x2a4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00d      	beq.n	800314a <HAL_GPIO_Init+0x19a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a49      	ldr	r2, [pc, #292]	; (8003258 <HAL_GPIO_Init+0x2a8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <HAL_GPIO_Init+0x196>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a48      	ldr	r2, [pc, #288]	; (800325c <HAL_GPIO_Init+0x2ac>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_GPIO_Init+0x192>
 800313e:	2303      	movs	r3, #3
 8003140:	e006      	b.n	8003150 <HAL_GPIO_Init+0x1a0>
 8003142:	2304      	movs	r3, #4
 8003144:	e004      	b.n	8003150 <HAL_GPIO_Init+0x1a0>
 8003146:	2302      	movs	r3, #2
 8003148:	e002      	b.n	8003150 <HAL_GPIO_Init+0x1a0>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_GPIO_Init+0x1a0>
 800314e:	2300      	movs	r3, #0
 8003150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003152:	f002 0203 	and.w	r2, r2, #3
 8003156:	0092      	lsls	r2, r2, #2
 8003158:	4093      	lsls	r3, r2
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003160:	493a      	ldr	r1, [pc, #232]	; (800324c <HAL_GPIO_Init+0x29c>)
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d006      	beq.n	8003188 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4938      	ldr	r1, [pc, #224]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
 8003186:	e006      	b.n	8003196 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003188:	4b35      	ldr	r3, [pc, #212]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	43db      	mvns	r3, r3
 8003190:	4933      	ldr	r1, [pc, #204]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 8003192:	4013      	ands	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d006      	beq.n	80031b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031a2:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	492e      	ldr	r1, [pc, #184]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
 80031ae:	e006      	b.n	80031be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031b0:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	4929      	ldr	r1, [pc, #164]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d006      	beq.n	80031d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031ca:	4b25      	ldr	r3, [pc, #148]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	4924      	ldr	r1, [pc, #144]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
 80031d6:	e006      	b.n	80031e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	43db      	mvns	r3, r3
 80031e0:	491f      	ldr	r1, [pc, #124]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d006      	beq.n	8003200 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	491a      	ldr	r1, [pc, #104]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60cb      	str	r3, [r1, #12]
 80031fe:	e006      	b.n	800320e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003200:	4b17      	ldr	r3, [pc, #92]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	43db      	mvns	r3, r3
 8003208:	4915      	ldr	r1, [pc, #84]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 800320a:	4013      	ands	r3, r2
 800320c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	3301      	adds	r3, #1
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	fa22 f303 	lsr.w	r3, r2, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	f47f aed0 	bne.w	8002fc4 <HAL_GPIO_Init+0x14>
  }
}
 8003224:	bf00      	nop
 8003226:	372c      	adds	r7, #44	; 0x2c
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	10210000 	.word	0x10210000
 8003234:	10110000 	.word	0x10110000
 8003238:	10120000 	.word	0x10120000
 800323c:	10310000 	.word	0x10310000
 8003240:	10320000 	.word	0x10320000
 8003244:	10220000 	.word	0x10220000
 8003248:	40021000 	.word	0x40021000
 800324c:	40010000 	.word	0x40010000
 8003250:	40010800 	.word	0x40010800
 8003254:	40010c00 	.word	0x40010c00
 8003258:	40011000 	.word	0x40011000
 800325c:	40011400 	.word	0x40011400
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
 8003280:	e001      	b.n	8003286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	807b      	strh	r3, [r7, #2]
 800329e:	4613      	mov	r3, r2
 80032a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032a2:	787b      	ldrb	r3, [r7, #1]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a8:	887a      	ldrh	r2, [r7, #2]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032ae:	e003      	b.n	80032b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032b0:	887b      	ldrh	r3, [r7, #2]
 80032b2:	041a      	lsls	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	611a      	str	r2, [r3, #16]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c4:	b08b      	sub	sp, #44	; 0x2c
 80032c6:	af06      	add	r7, sp, #24
 80032c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0fd      	b.n	80034d0 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f006 fe03 	bl	8009ef4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2203      	movs	r2, #3
 80032f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 f817 	bl	800632e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	687e      	ldr	r6, [r7, #4]
 8003308:	466d      	mov	r5, sp
 800330a:	f106 0410 	add.w	r4, r6, #16
 800330e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	602b      	str	r3, [r5, #0]
 8003316:	1d33      	adds	r3, r6, #4
 8003318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800331a:	6838      	ldr	r0, [r7, #0]
 800331c:	f002 ffe1 	bl	80062e2 <USB_CoreInit>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e0ce      	b.n	80034d0 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f003 f812 	bl	8006362 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
 8003342:	e04c      	b.n	80033de <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	3301      	adds	r3, #1
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	440b      	add	r3, r1
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	b298      	uxth	r0, r3
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	3336      	adds	r3, #54	; 0x36
 8003382:	4602      	mov	r2, r0
 8003384:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	440b      	add	r3, r1
 8003396:	3303      	adds	r3, #3
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800339c:	7bfa      	ldrb	r2, [r7, #15]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	440b      	add	r3, r1
 80033aa:	3338      	adds	r3, #56	; 0x38
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033b0:	7bfa      	ldrb	r2, [r7, #15]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	440b      	add	r3, r1
 80033be:	333c      	adds	r3, #60	; 0x3c
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033c4:	7bfa      	ldrb	r2, [r7, #15]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	3340      	adds	r3, #64	; 0x40
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	3301      	adds	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d3ad      	bcc.n	8003344 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	e044      	b.n	8003478 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	440b      	add	r3, r1
 80033fc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	440b      	add	r3, r1
 8003412:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	440b      	add	r3, r1
 8003428:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	440b      	add	r3, r1
 800343e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	440b      	add	r3, r1
 8003454:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800345c:	7bfa      	ldrb	r2, [r7, #15]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	440b      	add	r3, r1
 800346a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	3301      	adds	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	429a      	cmp	r2, r3
 8003480:	d3b5      	bcc.n	80033ee <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	687e      	ldr	r6, [r7, #4]
 800348a:	466d      	mov	r5, sp
 800348c:	f106 0410 	add.w	r4, r6, #16
 8003490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	602b      	str	r3, [r5, #0]
 8003498:	1d33      	adds	r3, r6, #4
 800349a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800349c:	6838      	ldr	r0, [r7, #0]
 800349e:	f002 ff6c 	bl	800637a <USB_DevInit>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e00d      	b.n	80034d0 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f004 ff07 	bl	80082dc <USB_DevDisconnect>

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_PCD_Start+0x16>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e016      	b.n	800351c <HAL_PCD_Start+0x44>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f002 ff01 	bl	8006302 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003500:	2101      	movs	r1, #1
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f006 ff69 	bl	800a3da <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f004 fedb 	bl	80082c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f004 fedd 	bl	80082f0 <USB_ReadInterrupts>
 8003536:	4603      	mov	r3, r0
 8003538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800353c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003540:	d102      	bne.n	8003548 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fb61 	bl	8003c0a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f004 fecf 	bl	80082f0 <USB_ReadInterrupts>
 8003552:	4603      	mov	r3, r0
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355c:	d112      	bne.n	8003584 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003566:	b29a      	uxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003570:	b292      	uxth	r2, r2
 8003572:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f006 fd37 	bl	8009fea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800357c:	2100      	movs	r1, #0
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f925 	bl	80037ce <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f004 feb1 	bl	80082f0 <USB_ReadInterrupts>
 800358e:	4603      	mov	r3, r0
 8003590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003598:	d10b      	bne.n	80035b2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035ac:	b292      	uxth	r2, r2
 80035ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f004 fe9a 	bl	80082f0 <USB_ReadInterrupts>
 80035bc:	4603      	mov	r3, r0
 80035be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c6:	d10b      	bne.n	80035e0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035da:	b292      	uxth	r2, r2
 80035dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f004 fe83 	bl	80082f0 <USB_ReadInterrupts>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f4:	d126      	bne.n	8003644 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035fe:	b29a      	uxth	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0204 	bic.w	r2, r2, #4
 8003608:	b292      	uxth	r2, r2
 800360a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003616:	b29a      	uxth	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0208 	bic.w	r2, r2, #8
 8003620:	b292      	uxth	r2, r2
 8003622:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f006 fd18 	bl	800a05c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003634:	b29a      	uxth	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800363e:	b292      	uxth	r2, r2
 8003640:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f004 fe51 	bl	80082f0 <USB_ReadInterrupts>
 800364e:	4603      	mov	r3, r0
 8003650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003658:	f040 8084 	bne.w	8003764 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800365c:	2300      	movs	r3, #0
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e011      	b.n	8003686 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	7ffb      	ldrb	r3, [r7, #31]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	7ffb      	ldrb	r3, [r7, #31]
 8003670:	8812      	ldrh	r2, [r2, #0]
 8003672:	b292      	uxth	r2, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	f107 0120 	add.w	r1, r7, #32
 800367a:	440b      	add	r3, r1
 800367c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003680:	7ffb      	ldrb	r3, [r7, #31]
 8003682:	3301      	adds	r3, #1
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	7ffb      	ldrb	r3, [r7, #31]
 8003688:	2b07      	cmp	r3, #7
 800368a:	d9ea      	bls.n	8003662 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	b292      	uxth	r2, r2
 80036a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	b292      	uxth	r2, r2
 80036b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80036bc:	bf00      	nop
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f6      	beq.n	80036be <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036d8:	b29a      	uxth	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e2:	b292      	uxth	r2, r2
 80036e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80036e8:	2300      	movs	r3, #0
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e010      	b.n	8003710 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80036ee:	7ffb      	ldrb	r3, [r7, #31]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	4611      	mov	r1, r2
 80036f6:	7ffa      	ldrb	r2, [r7, #31]
 80036f8:	0092      	lsls	r2, r2, #2
 80036fa:	440a      	add	r2, r1
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	f107 0120 	add.w	r1, r7, #32
 8003702:	440b      	add	r3, r1
 8003704:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003708:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800370a:	7ffb      	ldrb	r3, [r7, #31]
 800370c:	3301      	adds	r3, #1
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	7ffb      	ldrb	r3, [r7, #31]
 8003712:	2b07      	cmp	r3, #7
 8003714:	d9eb      	bls.n	80036ee <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0208 	orr.w	r2, r2, #8
 8003728:	b292      	uxth	r2, r2
 800372a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003736:	b29a      	uxth	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003740:	b292      	uxth	r2, r2
 8003742:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0204 	orr.w	r2, r2, #4
 8003758:	b292      	uxth	r2, r2
 800375a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f006 fc62 	bl	800a028 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f004 fdc1 	bl	80082f0 <USB_ReadInterrupts>
 800376e:	4603      	mov	r3, r0
 8003770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003778:	d10e      	bne.n	8003798 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003782:	b29a      	uxth	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800378c:	b292      	uxth	r2, r2
 800378e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f006 fc1b 	bl	8009fce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f004 fda7 	bl	80082f0 <USB_ReadInterrupts>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ac:	d10b      	bne.n	80037c6 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c0:	b292      	uxth	r2, r2
 80037c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80037c6:	bf00      	nop
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_PCD_SetAddress+0x1a>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e013      	b.n	8003810 <HAL_PCD_SetAddress+0x42>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	4611      	mov	r1, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f004 fd4e 	bl	80082a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	4608      	mov	r0, r1
 8003822:	4611      	mov	r1, r2
 8003824:	461a      	mov	r2, r3
 8003826:	4603      	mov	r3, r0
 8003828:	70fb      	strb	r3, [r7, #3]
 800382a:	460b      	mov	r3, r1
 800382c:	803b      	strh	r3, [r7, #0]
 800382e:	4613      	mov	r3, r2
 8003830:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800383a:	2b00      	cmp	r3, #0
 800383c:	da0e      	bge.n	800385c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	705a      	strb	r2, [r3, #1]
 800385a:	e00e      	b.n	800387a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	f003 0207 	and.w	r2, r3, #7
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4413      	add	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	b2da      	uxtb	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003886:	883a      	ldrh	r2, [r7, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	78ba      	ldrb	r2, [r7, #2]
 8003890:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	785b      	ldrb	r3, [r3, #1]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d004      	beq.n	80038a4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038a4:	78bb      	ldrb	r3, [r7, #2]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d102      	bne.n	80038b0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_PCD_EP_Open+0xa6>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e00e      	b.n	80038dc <HAL_PCD_EP_Open+0xc4>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68f9      	ldr	r1, [r7, #12]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f002 fd75 	bl	80063bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80038da:	7afb      	ldrb	r3, [r7, #11]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	da0e      	bge.n	8003916 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	705a      	strb	r2, [r3, #1]
 8003914:	e00e      	b.n	8003934 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	f003 0207 	and.w	r2, r3, #7
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4413      	add	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	b2da      	uxtb	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_PCD_EP_Close+0x6a>
 800394a:	2302      	movs	r3, #2
 800394c:	e00e      	b.n	800396c <HAL_PCD_EP_Close+0x88>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68f9      	ldr	r1, [r7, #12]
 800395c:	4618      	mov	r0, r3
 800395e:	f003 f897 	bl	8006a90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	607a      	str	r2, [r7, #4]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	460b      	mov	r3, r1
 8003982:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003984:	7afb      	ldrb	r3, [r7, #11]
 8003986:	f003 0207 	and.w	r2, r3, #7
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2200      	movs	r2, #0
 80039ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b4:	7afb      	ldrb	r3, [r7, #11]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039c0:	7afb      	ldrb	r3, [r7, #11]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6979      	ldr	r1, [r7, #20]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 fa49 	bl	8006e68 <USB_EPStartXfer>
 80039d6:	e005      	b.n	80039e4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6979      	ldr	r1, [r7, #20]
 80039de:	4618      	mov	r0, r3
 80039e0:	f003 fa42 	bl	8006e68 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	f003 0207 	and.w	r2, r3, #7
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003a10:	681b      	ldr	r3, [r3, #0]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2c:	7afb      	ldrb	r3, [r7, #11]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4413      	add	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2201      	movs	r2, #1
 8003a66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a68:	7afb      	ldrb	r3, [r7, #11]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a74:	7afb      	ldrb	r3, [r7, #11]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6979      	ldr	r1, [r7, #20]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f003 f9ef 	bl	8006e68 <USB_EPStartXfer>
 8003a8a:	e005      	b.n	8003a98 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6979      	ldr	r1, [r7, #20]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 f9e8 	bl	8006e68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	f003 0207 	and.w	r2, r3, #7
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d901      	bls.n	8003ac0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e04c      	b.n	8003b5a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	da0e      	bge.n	8003ae6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	705a      	strb	r2, [r3, #1]
 8003ae4:	e00c      	b.n	8003b00 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_PCD_EP_SetStall+0x7e>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e01c      	b.n	8003b5a <HAL_PCD_EP_SetStall+0xb8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68f9      	ldr	r1, [r7, #12]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f004 faba 	bl	80080a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d108      	bne.n	8003b50 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f004 fbdf 	bl	800830e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	f003 020f 	and.w	r2, r3, #15
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d901      	bls.n	8003b80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e040      	b.n	8003c02 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	da0e      	bge.n	8003ba6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	705a      	strb	r2, [r3, #1]
 8003ba4:	e00e      	b.n	8003bc4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	f003 0207 	and.w	r2, r3, #7
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	4413      	add	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_PCD_EP_ClrStall+0x82>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e00e      	b.n	8003c02 <HAL_PCD_EP_ClrStall+0xa0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68f9      	ldr	r1, [r7, #12]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f004 faa8 	bl	8008148 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b08e      	sub	sp, #56	; 0x38
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c12:	e2df      	b.n	80041d4 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c1c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003c1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003c2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 8158 	bne.w	8003ee4 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003c34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d152      	bne.n	8003ce4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	81fb      	strh	r3, [r7, #14]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	89fb      	ldrh	r3, [r7, #14]
 8003c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3328      	adds	r3, #40	; 0x28
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	695a      	ldr	r2, [r3, #20]
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	441a      	add	r2, r3
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f006 f978 	bl	8009f9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 828e 	beq.w	80041d4 <PCD_EP_ISR_Handler+0x5ca>
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f040 8289 	bne.w	80041d4 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	b292      	uxth	r2, r2
 8003cd6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ce2:	e277      	b.n	80041d4 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003cf4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d034      	beq.n	8003d68 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	3306      	adds	r3, #6
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	f004 fb35 	bl	80083ac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d4e:	4013      	ands	r3, r2
 8003d50:	823b      	strh	r3, [r7, #16]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	8a3a      	ldrh	r2, [r7, #16]
 8003d58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f006 f8ed 	bl	8009f40 <HAL_PCD_SetupStageCallback>
 8003d66:	e235      	b.n	80041d4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d68:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f280 8231 	bge.w	80041d4 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d7e:	4013      	ands	r3, r2
 8003d80:	83bb      	strh	r3, [r7, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	8bba      	ldrh	r2, [r7, #28]
 8003d88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d8c:	b292      	uxth	r2, r2
 8003d8e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	3306      	adds	r3, #6
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d019      	beq.n	8003df8 <PCD_EP_ISR_Handler+0x1ee>
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d015      	beq.n	8003df8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	6959      	ldr	r1, [r3, #20]
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f004 fae5 	bl	80083ac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	695a      	ldr	r2, [r3, #20]
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	441a      	add	r2, r3
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003df0:	2100      	movs	r1, #0
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f006 f8b6 	bl	8009f64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	61bb      	str	r3, [r7, #24]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d112      	bne.n	8003e46 <PCD_EP_ISR_Handler+0x23c>
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	801a      	strh	r2, [r3, #0]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	801a      	strh	r2, [r3, #0]
 8003e44:	e02f      	b.n	8003ea6 <PCD_EP_ISR_Handler+0x29c>
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e4c:	d813      	bhi.n	8003e76 <PCD_EP_ISR_Handler+0x26c>
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <PCD_EP_ISR_Handler+0x25e>
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	3301      	adds	r3, #1
 8003e66:	633b      	str	r3, [r7, #48]	; 0x30
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	029b      	lsls	r3, r3, #10
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	801a      	strh	r2, [r3, #0]
 8003e74:	e017      	b.n	8003ea6 <PCD_EP_ISR_Handler+0x29c>
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d102      	bne.n	8003e90 <PCD_EP_ISR_Handler+0x286>
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	029b      	lsls	r3, r3, #10
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	827b      	strh	r3, [r7, #18]
 8003eb8:	8a7b      	ldrh	r3, [r7, #18]
 8003eba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ebe:	827b      	strh	r3, [r7, #18]
 8003ec0:	8a7b      	ldrh	r3, [r7, #18]
 8003ec2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ec6:	827b      	strh	r3, [r7, #18]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	8a7b      	ldrh	r3, [r7, #18]
 8003ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	8013      	strh	r3, [r2, #0]
 8003ee2:	e177      	b.n	80041d4 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ef6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f280 80ea 	bge.w	80040d4 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f16:	4013      	ands	r3, r2
 8003f18:	853b      	strh	r3, [r7, #40]	; 0x28
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f2e:	b292      	uxth	r2, r2
 8003f30:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003f32:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	7b1b      	ldrb	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d122      	bne.n	8003f96 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4413      	add	r3, r2
 8003f64:	3306      	adds	r3, #6
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f78:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003f7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8087 	beq.w	8004090 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	6959      	ldr	r1, [r3, #20]
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	88da      	ldrh	r2, [r3, #6]
 8003f8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f90:	f004 fa0c 	bl	80083ac <USB_ReadPMA>
 8003f94:	e07c      	b.n	8004090 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	78db      	ldrb	r3, [r3, #3]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d108      	bne.n	8003fb0 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003f9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f923 	bl	80041f0 <HAL_PCD_EP_DB_Receive>
 8003faa:	4603      	mov	r3, r0
 8003fac:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003fae:	e06f      	b.n	8004090 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	847b      	strh	r3, [r7, #34]	; 0x22
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	441a      	add	r2, r3
 8003fda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29b      	uxth	r3, r3
 8004002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d021      	beq.n	800404e <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004012:	b29b      	uxth	r3, r3
 8004014:	461a      	mov	r2, r3
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	3302      	adds	r3, #2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004032:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004034:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004036:	2b00      	cmp	r3, #0
 8004038:	d02a      	beq.n	8004090 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	6959      	ldr	r1, [r3, #20]
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	891a      	ldrh	r2, [r3, #8]
 8004046:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004048:	f004 f9b0 	bl	80083ac <USB_ReadPMA>
 800404c:	e020      	b.n	8004090 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004056:	b29b      	uxth	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4413      	add	r3, r2
 8004062:	3306      	adds	r3, #6
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004076:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004078:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800407a:	2b00      	cmp	r3, #0
 800407c:	d008      	beq.n	8004090 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	6959      	ldr	r1, [r3, #20]
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	895a      	ldrh	r2, [r3, #10]
 800408a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800408c:	f004 f98e 	bl	80083ac <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004096:	441a      	add	r2, r3
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040a2:	441a      	add	r2, r3
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d004      	beq.n	80040ba <PCD_EP_ISR_Handler+0x4b0>
 80040b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d206      	bcs.n	80040c8 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	4619      	mov	r1, r3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f005 ff4f 	bl	8009f64 <HAL_PCD_DataOutStageCallback>
 80040c6:	e005      	b.n	80040d4 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ce:	4618      	mov	r0, r3
 80040d0:	f002 feca 	bl	8006e68 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80040d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d07a      	beq.n	80041d4 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80040de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	4413      	add	r3, r2
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410c:	843b      	strh	r3, [r7, #32]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	441a      	add	r2, r3
 800411c:	8c3b      	ldrh	r3, [r7, #32]
 800411e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004126:	b29b      	uxth	r3, r3
 8004128:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	78db      	ldrb	r3, [r3, #3]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d108      	bne.n	8004144 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004136:	2b02      	cmp	r3, #2
 8004138:	d146      	bne.n	80041c8 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800413a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d141      	bne.n	80041c8 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414c:	b29b      	uxth	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	3302      	adds	r3, #2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800416c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	8bfb      	ldrh	r3, [r7, #30]
 8004174:	429a      	cmp	r2, r3
 8004176:	d906      	bls.n	8004186 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	699a      	ldr	r2, [r3, #24]
 800417c:	8bfb      	ldrh	r3, [r7, #30]
 800417e:	1ad2      	subs	r2, r2, r3
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	619a      	str	r2, [r3, #24]
 8004184:	e002      	b.n	800418c <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	2200      	movs	r2, #0
 800418a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d106      	bne.n	80041a2 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f005 fefd 	bl	8009f9a <HAL_PCD_DataInStageCallback>
 80041a0:	e018      	b.n	80041d4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	8bfb      	ldrh	r3, [r7, #30]
 80041a8:	441a      	add	r2, r3
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	8bfb      	ldrh	r3, [r7, #30]
 80041b4:	441a      	add	r2, r3
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041c0:	4618      	mov	r0, r3
 80041c2:	f002 fe51 	bl	8006e68 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80041c6:	e005      	b.n	80041d4 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80041c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041ca:	461a      	mov	r2, r3
 80041cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f91b 	bl	800440a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041dc:	b29b      	uxth	r3, r3
 80041de:	b21b      	sxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f6ff ad17 	blt.w	8003c14 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3738      	adds	r7, #56	; 0x38
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d07e      	beq.n	8004306 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004210:	b29b      	uxth	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	3302      	adds	r3, #2
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004230:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	8b7b      	ldrh	r3, [r7, #26]
 8004238:	429a      	cmp	r2, r3
 800423a:	d306      	bcc.n	800424a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	8b7b      	ldrh	r3, [r7, #26]
 8004242:	1ad2      	subs	r2, r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	619a      	str	r2, [r3, #24]
 8004248:	e002      	b.n	8004250 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2200      	movs	r2, #0
 800424e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d123      	bne.n	80042a0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b29b      	uxth	r3, r3
 800426a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800426e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004272:	833b      	strh	r3, [r7, #24]
 8004274:	8b3b      	ldrh	r3, [r7, #24]
 8004276:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800427a:	833b      	strh	r3, [r7, #24]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	441a      	add	r2, r3
 800428a:	8b3b      	ldrh	r3, [r7, #24]
 800428c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429c:	b29b      	uxth	r3, r3
 800429e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d01f      	beq.n	80042ea <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c4:	82fb      	strh	r3, [r7, #22]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	441a      	add	r2, r3
 80042d4:	8afb      	ldrh	r3, [r7, #22]
 80042d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80042ea:	8b7b      	ldrh	r3, [r7, #26]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8087 	beq.w	8004400 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	6959      	ldr	r1, [r3, #20]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	891a      	ldrh	r2, [r3, #8]
 80042fe:	8b7b      	ldrh	r3, [r7, #26]
 8004300:	f004 f854 	bl	80083ac <USB_ReadPMA>
 8004304:	e07c      	b.n	8004400 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800430e:	b29b      	uxth	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	3306      	adds	r3, #6
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800432e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	699a      	ldr	r2, [r3, #24]
 8004334:	8b7b      	ldrh	r3, [r7, #26]
 8004336:	429a      	cmp	r2, r3
 8004338:	d306      	bcc.n	8004348 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	8b7b      	ldrh	r3, [r7, #26]
 8004340:	1ad2      	subs	r2, r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	619a      	str	r2, [r3, #24]
 8004346:	e002      	b.n	800434e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2200      	movs	r2, #0
 800434c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d123      	bne.n	800439e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	b29b      	uxth	r3, r3
 8004368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800436c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004370:	83fb      	strh	r3, [r7, #30]
 8004372:	8bfb      	ldrh	r3, [r7, #30]
 8004374:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004378:	83fb      	strh	r3, [r7, #30]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	441a      	add	r2, r3
 8004388:	8bfb      	ldrh	r3, [r7, #30]
 800438a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439a:	b29b      	uxth	r3, r3
 800439c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11f      	bne.n	80043e8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	83bb      	strh	r3, [r7, #28]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	441a      	add	r2, r3
 80043d2:	8bbb      	ldrh	r3, [r7, #28]
 80043d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80043e8:	8b7b      	ldrh	r3, [r7, #26]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d008      	beq.n	8004400 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6959      	ldr	r1, [r3, #20]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	895a      	ldrh	r2, [r3, #10]
 80043fa:	8b7b      	ldrh	r3, [r7, #26]
 80043fc:	f003 ffd6 	bl	80083ac <USB_ReadPMA>
    }
  }

  return count;
 8004400:	8b7b      	ldrh	r3, [r7, #26]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b092      	sub	sp, #72	; 0x48
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	4613      	mov	r3, r2
 8004416:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8132 	beq.w	8004688 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800442c:	b29b      	uxth	r3, r3
 800442e:	461a      	mov	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	3302      	adds	r3, #2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800444c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004454:	429a      	cmp	r2, r3
 8004456:	d906      	bls.n	8004466 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800445e:	1ad2      	subs	r2, r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	619a      	str	r2, [r3, #24]
 8004464:	e002      	b.n	800446c <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2200      	movs	r2, #0
 800446a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d12c      	bne.n	80044ce <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	4619      	mov	r1, r3
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f005 fd8d 	bl	8009f9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 822f 	beq.w	80048ea <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	827b      	strh	r3, [r7, #18]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	441a      	add	r2, r3
 80044b6:	8a7b      	ldrh	r3, [r7, #18]
 80044b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	8013      	strh	r3, [r2, #0]
 80044cc:	e20d      	b.n	80048ea <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01f      	beq.n	8004518 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800451e:	2b01      	cmp	r3, #1
 8004520:	f040 81e3 	bne.w	80048ea <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	695a      	ldr	r2, [r3, #20]
 8004528:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800452a:	441a      	add	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004536:	441a      	add	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	6a1a      	ldr	r2, [r3, #32]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	429a      	cmp	r2, r3
 8004546:	d309      	bcc.n	800455c <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6a1a      	ldr	r2, [r3, #32]
 8004552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004554:	1ad2      	subs	r2, r2, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	621a      	str	r2, [r3, #32]
 800455a:	e014      	b.n	8004586 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d106      	bne.n	8004572 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8004564:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004566:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004570:	e009      	b.n	8004586 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2200      	movs	r2, #0
 8004584:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	785b      	ldrb	r3, [r3, #1]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d155      	bne.n	800463a <HAL_PCD_EP_DB_Transmit+0x230>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800459c:	b29b      	uxth	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	4413      	add	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	011a      	lsls	r2, r3, #4
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	4413      	add	r3, r2
 80045b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d112      	bne.n	80045e2 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045da:	b29a      	uxth	r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	801a      	strh	r2, [r3, #0]
 80045e0:	e047      	b.n	8004672 <HAL_PCD_EP_DB_Transmit+0x268>
 80045e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e4:	2b3e      	cmp	r3, #62	; 0x3e
 80045e6:	d811      	bhi.n	800460c <HAL_PCD_EP_DB_Transmit+0x202>
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_PCD_EP_DB_Transmit+0x1f4>
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	3301      	adds	r3, #1
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	b29b      	uxth	r3, r3
 8004602:	029b      	lsls	r3, r3, #10
 8004604:	b29a      	uxth	r2, r3
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	e032      	b.n	8004672 <HAL_PCD_EP_DB_Transmit+0x268>
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <HAL_PCD_EP_DB_Transmit+0x218>
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	3b01      	subs	r3, #1
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	b29b      	uxth	r3, r3
 8004626:	029b      	lsls	r3, r3, #10
 8004628:	b29b      	uxth	r3, r3
 800462a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800462e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004632:	b29a      	uxth	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	801a      	strh	r2, [r3, #0]
 8004638:	e01b      	b.n	8004672 <HAL_PCD_EP_DB_Transmit+0x268>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	785b      	ldrb	r3, [r3, #1]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d117      	bne.n	8004672 <HAL_PCD_EP_DB_Transmit+0x268>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	623b      	str	r3, [r7, #32]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004650:	b29b      	uxth	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	4413      	add	r3, r2
 8004658:	623b      	str	r3, [r7, #32]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	011a      	lsls	r2, r3, #4
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	4413      	add	r3, r2
 8004664:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	b29a      	uxth	r2, r3
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	6959      	ldr	r1, [r3, #20]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	891a      	ldrh	r2, [r3, #8]
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	b29b      	uxth	r3, r3
 8004682:	f003 fe4f 	bl	8008324 <USB_WritePMA>
 8004686:	e130      	b.n	80048ea <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004690:	b29b      	uxth	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4413      	add	r3, r2
 800469c:	3306      	adds	r3, #6
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d306      	bcc.n	80046ca <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046c2:	1ad2      	subs	r2, r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	619a      	str	r2, [r3, #24]
 80046c8:	e002      	b.n	80046d0 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2200      	movs	r2, #0
 80046ce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d12c      	bne.n	8004732 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	4619      	mov	r1, r3
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f005 fc5b 	bl	8009f9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 80fd 	bne.w	80048ea <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	441a      	add	r2, r3
 800471a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800471c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004724:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472c:	b29b      	uxth	r3, r3
 800472e:	8013      	strh	r3, [r2, #0]
 8004730:	e0db      	b.n	80048ea <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d11f      	bne.n	800477c <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004756:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004770:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004778:	b29b      	uxth	r3, r3
 800477a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004782:	2b01      	cmp	r3, #1
 8004784:	f040 80b1 	bne.w	80048ea <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	695a      	ldr	r2, [r3, #20]
 800478c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800478e:	441a      	add	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800479a:	441a      	add	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d309      	bcc.n	80047c0 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6a1a      	ldr	r2, [r3, #32]
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	1ad2      	subs	r2, r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	621a      	str	r2, [r3, #32]
 80047be:	e014      	b.n	80047ea <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80047c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047ca:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80047d4:	e009      	b.n	80047ea <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2200      	movs	r2, #0
 80047e0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	637b      	str	r3, [r7, #52]	; 0x34
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d155      	bne.n	80048a4 <HAL_PCD_EP_DB_Transmit+0x49a>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	647b      	str	r3, [r7, #68]	; 0x44
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004806:	b29b      	uxth	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480c:	4413      	add	r3, r2
 800480e:	647b      	str	r3, [r7, #68]	; 0x44
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	011a      	lsls	r2, r3, #4
 8004816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004818:	4413      	add	r3, r2
 800481a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800481e:	643b      	str	r3, [r7, #64]	; 0x40
 8004820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004822:	2b00      	cmp	r3, #0
 8004824:	d112      	bne.n	800484c <HAL_PCD_EP_DB_Transmit+0x442>
 8004826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004830:	b29a      	uxth	r2, r3
 8004832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004844:	b29a      	uxth	r2, r3
 8004846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004848:	801a      	strh	r2, [r3, #0]
 800484a:	e044      	b.n	80048d6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	2b3e      	cmp	r3, #62	; 0x3e
 8004850:	d811      	bhi.n	8004876 <HAL_PCD_EP_DB_Transmit+0x46c>
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	085b      	lsrs	r3, r3, #1
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_PCD_EP_DB_Transmit+0x45e>
 8004862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004864:	3301      	adds	r3, #1
 8004866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486a:	b29b      	uxth	r3, r3
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	b29a      	uxth	r2, r3
 8004870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004872:	801a      	strh	r2, [r3, #0]
 8004874:	e02f      	b.n	80048d6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <HAL_PCD_EP_DB_Transmit+0x482>
 8004886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004888:	3b01      	subs	r3, #1
 800488a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800488c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488e:	b29b      	uxth	r3, r3
 8004890:	029b      	lsls	r3, r3, #10
 8004892:	b29b      	uxth	r3, r3
 8004894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489c:	b29a      	uxth	r2, r3
 800489e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	e018      	b.n	80048d6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d114      	bne.n	80048d6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ba:	4413      	add	r3, r2
 80048bc:	637b      	str	r3, [r7, #52]	; 0x34
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	011a      	lsls	r2, r3, #4
 80048c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c6:	4413      	add	r3, r2
 80048c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048cc:	633b      	str	r3, [r7, #48]	; 0x30
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6959      	ldr	r1, [r3, #20]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	895a      	ldrh	r2, [r3, #10]
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f003 fd1d 	bl	8008324 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004904:	823b      	strh	r3, [r7, #16]
 8004906:	8a3b      	ldrh	r3, [r7, #16]
 8004908:	f083 0310 	eor.w	r3, r3, #16
 800490c:	823b      	strh	r3, [r7, #16]
 800490e:	8a3b      	ldrh	r3, [r7, #16]
 8004910:	f083 0320 	eor.w	r3, r3, #32
 8004914:	823b      	strh	r3, [r7, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	441a      	add	r2, r3
 8004924:	8a3b      	ldrh	r3, [r7, #16]
 8004926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800492a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004936:	b29b      	uxth	r3, r3
 8004938:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3748      	adds	r7, #72	; 0x48
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	460b      	mov	r3, r1
 8004950:	817b      	strh	r3, [r7, #10]
 8004952:	4613      	mov	r3, r2
 8004954:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004956:	897b      	ldrh	r3, [r7, #10]
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00b      	beq.n	800497a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004962:	897b      	ldrh	r3, [r7, #10]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4413      	add	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e009      	b.n	800498e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800497a:	897a      	ldrh	r2, [r7, #10]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800498e:	893b      	ldrh	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d107      	bne.n	80049a4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2200      	movs	r2, #0
 8004998:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	b29a      	uxth	r2, r3
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	80da      	strh	r2, [r3, #6]
 80049a2:	e00b      	b.n	80049bc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2201      	movs	r2, #1
 80049a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e26c      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8087 	beq.w	8004af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049e8:	4b92      	ldr	r3, [pc, #584]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 030c 	and.w	r3, r3, #12
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d00c      	beq.n	8004a0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049f4:	4b8f      	ldr	r3, [pc, #572]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 030c 	and.w	r3, r3, #12
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d112      	bne.n	8004a26 <HAL_RCC_OscConfig+0x5e>
 8004a00:	4b8c      	ldr	r3, [pc, #560]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0c:	d10b      	bne.n	8004a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0e:	4b89      	ldr	r3, [pc, #548]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d06c      	beq.n	8004af4 <HAL_RCC_OscConfig+0x12c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d168      	bne.n	8004af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e246      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_OscConfig+0x76>
 8004a30:	4b80      	ldr	r3, [pc, #512]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a7f      	ldr	r2, [pc, #508]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	e02e      	b.n	8004a9c <HAL_RCC_OscConfig+0xd4>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x98>
 8004a46:	4b7b      	ldr	r3, [pc, #492]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a7a      	ldr	r2, [pc, #488]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	4b78      	ldr	r3, [pc, #480]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a77      	ldr	r2, [pc, #476]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e01d      	b.n	8004a9c <HAL_RCC_OscConfig+0xd4>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0xbc>
 8004a6a:	4b72      	ldr	r3, [pc, #456]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a71      	ldr	r2, [pc, #452]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b6f      	ldr	r3, [pc, #444]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a6e      	ldr	r2, [pc, #440]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e00b      	b.n	8004a9c <HAL_RCC_OscConfig+0xd4>
 8004a84:	4b6b      	ldr	r3, [pc, #428]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a6a      	ldr	r2, [pc, #424]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	4b68      	ldr	r3, [pc, #416]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a67      	ldr	r2, [pc, #412]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d013      	beq.n	8004acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fe f96c 	bl	8002d80 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fe f968 	bl	8002d80 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e1fa      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	4b5d      	ldr	r3, [pc, #372]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0xe4>
 8004aca:	e014      	b.n	8004af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fe f958 	bl	8002d80 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fe f954 	bl	8002d80 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	; 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e1e6      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae6:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x10c>
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d063      	beq.n	8004bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b02:	4b4c      	ldr	r3, [pc, #304]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b0e:	4b49      	ldr	r3, [pc, #292]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d11c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x18c>
 8004b1a:	4b46      	ldr	r3, [pc, #280]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d116      	bne.n	8004b54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b26:	4b43      	ldr	r3, [pc, #268]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_RCC_OscConfig+0x176>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e1ba      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3e:	4b3d      	ldr	r3, [pc, #244]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4939      	ldr	r1, [pc, #228]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b52:	e03a      	b.n	8004bca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d020      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b5c:	4b36      	ldr	r3, [pc, #216]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b62:	f7fe f90d 	bl	8002d80 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6a:	f7fe f909 	bl	8002d80 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e19b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	4b2d      	ldr	r3, [pc, #180]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	4b2a      	ldr	r3, [pc, #168]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4927      	ldr	r1, [pc, #156]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]
 8004b9c:	e015      	b.n	8004bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9e:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <HAL_RCC_OscConfig+0x270>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fe f8ec 	bl	8002d80 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bac:	f7fe f8e8 	bl	8002d80 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e17a      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d03a      	beq.n	8004c4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d019      	beq.n	8004c12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bde:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be4:	f7fe f8cc 	bl	8002d80 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bec:	f7fe f8c8 	bl	8002d80 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e15a      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <HAL_RCC_OscConfig+0x26c>)
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	f000 faa8 	bl	8005160 <RCC_Delay>
 8004c10:	e01c      	b.n	8004c4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c12:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <HAL_RCC_OscConfig+0x274>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c18:	f7fe f8b2 	bl	8002d80 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c1e:	e00f      	b.n	8004c40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c20:	f7fe f8ae 	bl	8002d80 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d908      	bls.n	8004c40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e140      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000
 8004c38:	42420000 	.word	0x42420000
 8004c3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c40:	4b9e      	ldr	r3, [pc, #632]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e9      	bne.n	8004c20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80a6 	beq.w	8004da6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c5e:	4b97      	ldr	r3, [pc, #604]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10d      	bne.n	8004c86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6a:	4b94      	ldr	r3, [pc, #592]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	4a93      	ldr	r2, [pc, #588]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c74:	61d3      	str	r3, [r2, #28]
 8004c76:	4b91      	ldr	r3, [pc, #580]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c82:	2301      	movs	r3, #1
 8004c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c86:	4b8e      	ldr	r3, [pc, #568]	; (8004ec0 <HAL_RCC_OscConfig+0x4f8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d118      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c92:	4b8b      	ldr	r3, [pc, #556]	; (8004ec0 <HAL_RCC_OscConfig+0x4f8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a8a      	ldr	r2, [pc, #552]	; (8004ec0 <HAL_RCC_OscConfig+0x4f8>)
 8004c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9e:	f7fe f86f 	bl	8002d80 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca6:	f7fe f86b 	bl	8002d80 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b64      	cmp	r3, #100	; 0x64
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e0fd      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb8:	4b81      	ldr	r3, [pc, #516]	; (8004ec0 <HAL_RCC_OscConfig+0x4f8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x312>
 8004ccc:	4b7b      	ldr	r3, [pc, #492]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	4a7a      	ldr	r2, [pc, #488]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	6213      	str	r3, [r2, #32]
 8004cd8:	e02d      	b.n	8004d36 <HAL_RCC_OscConfig+0x36e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x334>
 8004ce2:	4b76      	ldr	r3, [pc, #472]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4a75      	ldr	r2, [pc, #468]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	6213      	str	r3, [r2, #32]
 8004cee:	4b73      	ldr	r3, [pc, #460]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	4a72      	ldr	r2, [pc, #456]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004cf4:	f023 0304 	bic.w	r3, r3, #4
 8004cf8:	6213      	str	r3, [r2, #32]
 8004cfa:	e01c      	b.n	8004d36 <HAL_RCC_OscConfig+0x36e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d10c      	bne.n	8004d1e <HAL_RCC_OscConfig+0x356>
 8004d04:	4b6d      	ldr	r3, [pc, #436]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	4a6c      	ldr	r2, [pc, #432]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004d0a:	f043 0304 	orr.w	r3, r3, #4
 8004d0e:	6213      	str	r3, [r2, #32]
 8004d10:	4b6a      	ldr	r3, [pc, #424]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	4a69      	ldr	r2, [pc, #420]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	6213      	str	r3, [r2, #32]
 8004d1c:	e00b      	b.n	8004d36 <HAL_RCC_OscConfig+0x36e>
 8004d1e:	4b67      	ldr	r3, [pc, #412]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	4a66      	ldr	r2, [pc, #408]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	6213      	str	r3, [r2, #32]
 8004d2a:	4b64      	ldr	r3, [pc, #400]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	4a63      	ldr	r2, [pc, #396]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004d30:	f023 0304 	bic.w	r3, r3, #4
 8004d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d015      	beq.n	8004d6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3e:	f7fe f81f 	bl	8002d80 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d44:	e00a      	b.n	8004d5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d46:	f7fe f81b 	bl	8002d80 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e0ab      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5c:	4b57      	ldr	r3, [pc, #348]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0ee      	beq.n	8004d46 <HAL_RCC_OscConfig+0x37e>
 8004d68:	e014      	b.n	8004d94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6a:	f7fe f809 	bl	8002d80 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d70:	e00a      	b.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d72:	f7fe f805 	bl	8002d80 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e095      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d88:	4b4c      	ldr	r3, [pc, #304]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1ee      	bne.n	8004d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d105      	bne.n	8004da6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9a:	4b48      	ldr	r3, [pc, #288]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	4a47      	ldr	r2, [pc, #284]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8081 	beq.w	8004eb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004db0:	4b42      	ldr	r3, [pc, #264]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f003 030c 	and.w	r3, r3, #12
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d061      	beq.n	8004e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d146      	bne.n	8004e52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc4:	4b3f      	ldr	r3, [pc, #252]	; (8004ec4 <HAL_RCC_OscConfig+0x4fc>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dca:	f7fd ffd9 	bl	8002d80 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd2:	f7fd ffd5 	bl	8002d80 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e067      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004de4:	4b35      	ldr	r3, [pc, #212]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f0      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df8:	d108      	bne.n	8004e0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004dfa:	4b30      	ldr	r3, [pc, #192]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	492d      	ldr	r1, [pc, #180]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a19      	ldr	r1, [r3, #32]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	4927      	ldr	r1, [pc, #156]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e24:	4b27      	ldr	r3, [pc, #156]	; (8004ec4 <HAL_RCC_OscConfig+0x4fc>)
 8004e26:	2201      	movs	r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2a:	f7fd ffa9 	bl	8002d80 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e32:	f7fd ffa5 	bl	8002d80 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e037      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e44:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <HAL_RCC_OscConfig+0x46a>
 8004e50:	e02f      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e52:	4b1c      	ldr	r3, [pc, #112]	; (8004ec4 <HAL_RCC_OscConfig+0x4fc>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e58:	f7fd ff92 	bl	8002d80 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e60:	f7fd ff8e 	bl	8002d80 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e020      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x498>
 8004e7e:	e018      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e013      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <HAL_RCC_OscConfig+0x4f4>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d106      	bne.n	8004eae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d001      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	42420060 	.word	0x42420060

08004ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0d0      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004edc:	4b6a      	ldr	r3, [pc, #424]	; (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d910      	bls.n	8004f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eea:	4b67      	ldr	r3, [pc, #412]	; (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 0207 	bic.w	r2, r3, #7
 8004ef2:	4965      	ldr	r1, [pc, #404]	; (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b63      	ldr	r3, [pc, #396]	; (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0b8      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d020      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f24:	4b59      	ldr	r3, [pc, #356]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4a58      	ldr	r2, [pc, #352]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f3c:	4b53      	ldr	r3, [pc, #332]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4a52      	ldr	r2, [pc, #328]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f48:	4b50      	ldr	r3, [pc, #320]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	494d      	ldr	r1, [pc, #308]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d040      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6e:	4b47      	ldr	r3, [pc, #284]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d115      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e07f      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d107      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f86:	4b41      	ldr	r3, [pc, #260]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e073      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f96:	4b3d      	ldr	r3, [pc, #244]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e06b      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fa6:	4b39      	ldr	r3, [pc, #228]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f023 0203 	bic.w	r2, r3, #3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4936      	ldr	r1, [pc, #216]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fb8:	f7fd fee2 	bl	8002d80 <HAL_GetTick>
 8004fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc0:	f7fd fede 	bl	8002d80 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e053      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd6:	4b2d      	ldr	r3, [pc, #180]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 020c 	and.w	r2, r3, #12
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d1eb      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b27      	ldr	r3, [pc, #156]	; (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d210      	bcs.n	8005018 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b24      	ldr	r3, [pc, #144]	; (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 0207 	bic.w	r2, r3, #7
 8004ffe:	4922      	ldr	r1, [pc, #136]	; (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	4313      	orrs	r3, r2
 8005004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b20      	ldr	r3, [pc, #128]	; (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e032      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005024:	4b19      	ldr	r3, [pc, #100]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4916      	ldr	r1, [pc, #88]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8005032:	4313      	orrs	r3, r2
 8005034:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005042:	4b12      	ldr	r3, [pc, #72]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	490e      	ldr	r1, [pc, #56]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8005052:	4313      	orrs	r3, r2
 8005054:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005056:	f000 f821 	bl	800509c <HAL_RCC_GetSysClockFreq>
 800505a:	4601      	mov	r1, r0
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <HAL_RCC_ClockConfig+0x1c4>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	4a0a      	ldr	r2, [pc, #40]	; (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8005068:	5cd3      	ldrb	r3, [r2, r3]
 800506a:	fa21 f303 	lsr.w	r3, r1, r3
 800506e:	4a09      	ldr	r2, [pc, #36]	; (8005094 <HAL_RCC_ClockConfig+0x1cc>)
 8005070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <HAL_RCC_ClockConfig+0x1d0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd fe40 	bl	8002cfc <HAL_InitTick>

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40022000 	.word	0x40022000
 800508c:	40021000 	.word	0x40021000
 8005090:	0800a52c 	.word	0x0800a52c
 8005094:	20000008 	.word	0x20000008
 8005098:	2000000c 	.word	0x2000000c

0800509c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800509c:	b490      	push	{r4, r7}
 800509e:	b08a      	sub	sp, #40	; 0x28
 80050a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80050a2:	4b2a      	ldr	r3, [pc, #168]	; (800514c <HAL_RCC_GetSysClockFreq+0xb0>)
 80050a4:	1d3c      	adds	r4, r7, #4
 80050a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80050ac:	4b28      	ldr	r3, [pc, #160]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb4>)
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	2300      	movs	r3, #0
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
 80050be:	2300      	movs	r3, #0
 80050c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050c6:	4b23      	ldr	r3, [pc, #140]	; (8005154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f003 030c 	and.w	r3, r3, #12
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d002      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x40>
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d003      	beq.n	80050e2 <HAL_RCC_GetSysClockFreq+0x46>
 80050da:	e02d      	b.n	8005138 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050dc:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050de:	623b      	str	r3, [r7, #32]
      break;
 80050e0:	e02d      	b.n	800513e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	0c9b      	lsrs	r3, r3, #18
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80050ee:	4413      	add	r3, r2
 80050f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80050f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d013      	beq.n	8005128 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005100:	4b14      	ldr	r3, [pc, #80]	; (8005154 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	0c5b      	lsrs	r3, r3, #17
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800510e:	4413      	add	r3, r2
 8005110:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005114:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	4a0f      	ldr	r2, [pc, #60]	; (8005158 <HAL_RCC_GetSysClockFreq+0xbc>)
 800511a:	fb02 f203 	mul.w	r2, r2, r3
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
 8005126:	e004      	b.n	8005132 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	4a0c      	ldr	r2, [pc, #48]	; (800515c <HAL_RCC_GetSysClockFreq+0xc0>)
 800512c:	fb02 f303 	mul.w	r3, r2, r3
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	623b      	str	r3, [r7, #32]
      break;
 8005136:	e002      	b.n	800513e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005138:	4b07      	ldr	r3, [pc, #28]	; (8005158 <HAL_RCC_GetSysClockFreq+0xbc>)
 800513a:	623b      	str	r3, [r7, #32]
      break;
 800513c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800513e:	6a3b      	ldr	r3, [r7, #32]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3728      	adds	r7, #40	; 0x28
 8005144:	46bd      	mov	sp, r7
 8005146:	bc90      	pop	{r4, r7}
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	0800a4d0 	.word	0x0800a4d0
 8005150:	0800a4e0 	.word	0x0800a4e0
 8005154:	40021000 	.word	0x40021000
 8005158:	007a1200 	.word	0x007a1200
 800515c:	003d0900 	.word	0x003d0900

08005160 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <RCC_Delay+0x34>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <RCC_Delay+0x38>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	0a5b      	lsrs	r3, r3, #9
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	fb02 f303 	mul.w	r3, r2, r3
 800517a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800517c:	bf00      	nop
  }
  while (Delay --);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1e5a      	subs	r2, r3, #1
 8005182:	60fa      	str	r2, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1f9      	bne.n	800517c <RCC_Delay+0x1c>
}
 8005188:	bf00      	nop
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20000008 	.word	0x20000008
 8005198:	10624dd3 	.word	0x10624dd3

0800519c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d07d      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80051b8:	2300      	movs	r3, #0
 80051ba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051bc:	4b4f      	ldr	r3, [pc, #316]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10d      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051c8:	4b4c      	ldr	r3, [pc, #304]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	4a4b      	ldr	r2, [pc, #300]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d2:	61d3      	str	r3, [r2, #28]
 80051d4:	4b49      	ldr	r3, [pc, #292]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051dc:	60bb      	str	r3, [r7, #8]
 80051de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051e0:	2301      	movs	r3, #1
 80051e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e4:	4b46      	ldr	r3, [pc, #280]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d118      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051f0:	4b43      	ldr	r3, [pc, #268]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a42      	ldr	r2, [pc, #264]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051fc:	f7fd fdc0 	bl	8002d80 <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005202:	e008      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005204:	f7fd fdbc 	bl	8002d80 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b64      	cmp	r3, #100	; 0x64
 8005210:	d901      	bls.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e06d      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005216:	4b3a      	ldr	r3, [pc, #232]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0f0      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005222:	4b36      	ldr	r3, [pc, #216]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d02e      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	429a      	cmp	r2, r3
 800523e:	d027      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005240:	4b2e      	ldr	r3, [pc, #184]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005248:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800524a:	4b2e      	ldr	r3, [pc, #184]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800524c:	2201      	movs	r2, #1
 800524e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005250:	4b2c      	ldr	r3, [pc, #176]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005256:	4a29      	ldr	r2, [pc, #164]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d014      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005266:	f7fd fd8b 	bl	8002d80 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526c:	e00a      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526e:	f7fd fd87 	bl	8002d80 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	f241 3288 	movw	r2, #5000	; 0x1388
 800527c:	4293      	cmp	r3, r2
 800527e:	d901      	bls.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e036      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005284:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ee      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005290:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	4917      	ldr	r1, [pc, #92]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d105      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a8:	4b14      	ldr	r3, [pc, #80]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	4a13      	ldr	r2, [pc, #76]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	490b      	ldr	r1, [pc, #44]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052de:	4b07      	ldr	r3, [pc, #28]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4904      	ldr	r1, [pc, #16]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40021000 	.word	0x40021000
 8005300:	40007000 	.word	0x40007000
 8005304:	42420440 	.word	0x42420440

08005308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e041      	b.n	800539e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fd fbd4 	bl	8002adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3304      	adds	r3, #4
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f000 fc66 	bl	8005c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d001      	beq.n	80053c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e032      	b.n	8005426 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a18      	ldr	r2, [pc, #96]	; (8005430 <HAL_TIM_Base_Start+0x88>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00e      	beq.n	80053f0 <HAL_TIM_Base_Start+0x48>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053da:	d009      	beq.n	80053f0 <HAL_TIM_Base_Start+0x48>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a14      	ldr	r2, [pc, #80]	; (8005434 <HAL_TIM_Base_Start+0x8c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_TIM_Base_Start+0x48>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a13      	ldr	r2, [pc, #76]	; (8005438 <HAL_TIM_Base_Start+0x90>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d111      	bne.n	8005414 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b06      	cmp	r3, #6
 8005400:	d010      	beq.n	8005424 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0201 	orr.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005412:	e007      	b.n	8005424 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800

0800543c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	d001      	beq.n	8005454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e03a      	b.n	80054ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <HAL_TIM_Base_Start_IT+0x98>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00e      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x58>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547e:	d009      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x58>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d004      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x58>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a13      	ldr	r2, [pc, #76]	; (80054dc <HAL_TIM_Base_Start_IT+0xa0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d111      	bne.n	80054b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b06      	cmp	r3, #6
 80054a4:	d010      	beq.n	80054c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b6:	e007      	b.n	80054c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr
 80054d4:	40012c00 	.word	0x40012c00
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800

080054e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e041      	b.n	8005576 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f839 	bl	800557e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3304      	adds	r3, #4
 800551c:	4619      	mov	r1, r3
 800551e:	4610      	mov	r0, r2
 8005520:	f000 fb7a 	bl	8005c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <HAL_TIM_PWM_Start+0x24>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	bf14      	ite	ne
 80055ac:	2301      	movne	r3, #1
 80055ae:	2300      	moveq	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	e022      	b.n	80055fa <HAL_TIM_PWM_Start+0x6a>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d109      	bne.n	80055ce <HAL_TIM_PWM_Start+0x3e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	bf14      	ite	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	2300      	moveq	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	e015      	b.n	80055fa <HAL_TIM_PWM_Start+0x6a>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d109      	bne.n	80055e8 <HAL_TIM_PWM_Start+0x58>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	e008      	b.n	80055fa <HAL_TIM_PWM_Start+0x6a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	bf14      	ite	ne
 80055f4:	2301      	movne	r3, #1
 80055f6:	2300      	moveq	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e05e      	b.n	80056c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d104      	bne.n	8005612 <HAL_TIM_PWM_Start+0x82>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005610:	e013      	b.n	800563a <HAL_TIM_PWM_Start+0xaa>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b04      	cmp	r3, #4
 8005616:	d104      	bne.n	8005622 <HAL_TIM_PWM_Start+0x92>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005620:	e00b      	b.n	800563a <HAL_TIM_PWM_Start+0xaa>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b08      	cmp	r3, #8
 8005626:	d104      	bne.n	8005632 <HAL_TIM_PWM_Start+0xa2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005630:	e003      	b.n	800563a <HAL_TIM_PWM_Start+0xaa>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2202      	movs	r2, #2
 8005636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2201      	movs	r2, #1
 8005640:	6839      	ldr	r1, [r7, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fd68 	bl	8006118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1e      	ldr	r2, [pc, #120]	; (80056c8 <HAL_TIM_PWM_Start+0x138>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d107      	bne.n	8005662 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005660:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <HAL_TIM_PWM_Start+0x138>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <HAL_TIM_PWM_Start+0xfa>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005674:	d009      	beq.n	800568a <HAL_TIM_PWM_Start+0xfa>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a14      	ldr	r2, [pc, #80]	; (80056cc <HAL_TIM_PWM_Start+0x13c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_TIM_PWM_Start+0xfa>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a12      	ldr	r2, [pc, #72]	; (80056d0 <HAL_TIM_PWM_Start+0x140>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d111      	bne.n	80056ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b06      	cmp	r3, #6
 800569a:	d010      	beq.n	80056be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ac:	e007      	b.n	80056be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0201 	orr.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800

080056d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d122      	bne.n	8005730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d11b      	bne.n	8005730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0202 	mvn.w	r2, #2
 8005700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fa62 	bl	8005be0 <HAL_TIM_IC_CaptureCallback>
 800571c:	e005      	b.n	800572a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fa55 	bl	8005bce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fa64 	bl	8005bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b04      	cmp	r3, #4
 800573c:	d122      	bne.n	8005784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b04      	cmp	r3, #4
 800574a:	d11b      	bne.n	8005784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0204 	mvn.w	r2, #4
 8005754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2202      	movs	r2, #2
 800575a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fa38 	bl	8005be0 <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fa2b 	bl	8005bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fa3a 	bl	8005bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b08      	cmp	r3, #8
 8005790:	d122      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b08      	cmp	r3, #8
 800579e:	d11b      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0208 	mvn.w	r2, #8
 80057a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2204      	movs	r2, #4
 80057ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa0e 	bl	8005be0 <HAL_TIM_IC_CaptureCallback>
 80057c4:	e005      	b.n	80057d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fa01 	bl	8005bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fa10 	bl	8005bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b10      	cmp	r3, #16
 80057e4:	d122      	bne.n	800582c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d11b      	bne.n	800582c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0210 	mvn.w	r2, #16
 80057fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2208      	movs	r2, #8
 8005802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f9e4 	bl	8005be0 <HAL_TIM_IC_CaptureCallback>
 8005818:	e005      	b.n	8005826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9d7 	bl	8005bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f9e6 	bl	8005bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b01      	cmp	r3, #1
 8005838:	d10e      	bne.n	8005858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b01      	cmp	r3, #1
 8005846:	d107      	bne.n	8005858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0201 	mvn.w	r2, #1
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fd f8bc 	bl	80029d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d10e      	bne.n	8005884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005870:	2b80      	cmp	r3, #128	; 0x80
 8005872:	d107      	bne.n	8005884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800587c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fd26 	bl	80062d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	d10e      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b40      	cmp	r3, #64	; 0x40
 800589e:	d107      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f9aa 	bl	8005c04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d10e      	bne.n	80058dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	d107      	bne.n	80058dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0220 	mvn.w	r2, #32
 80058d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fcf1 	bl	80062be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058dc:	bf00      	nop
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e0ac      	b.n	8005a58 <HAL_TIM_PWM_ConfigChannel+0x174>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b0c      	cmp	r3, #12
 800590a:	f200 809f 	bhi.w	8005a4c <HAL_TIM_PWM_ConfigChannel+0x168>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005949 	.word	0x08005949
 8005918:	08005a4d 	.word	0x08005a4d
 800591c:	08005a4d 	.word	0x08005a4d
 8005920:	08005a4d 	.word	0x08005a4d
 8005924:	08005989 	.word	0x08005989
 8005928:	08005a4d 	.word	0x08005a4d
 800592c:	08005a4d 	.word	0x08005a4d
 8005930:	08005a4d 	.word	0x08005a4d
 8005934:	080059cb 	.word	0x080059cb
 8005938:	08005a4d 	.word	0x08005a4d
 800593c:	08005a4d 	.word	0x08005a4d
 8005940:	08005a4d 	.word	0x08005a4d
 8005944:	08005a0b 	.word	0x08005a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f9c4 	bl	8005cdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0208 	orr.w	r2, r2, #8
 8005962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0204 	bic.w	r2, r2, #4
 8005972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6999      	ldr	r1, [r3, #24]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	619a      	str	r2, [r3, #24]
      break;
 8005986:	e062      	b.n	8005a4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fa0a 	bl	8005da8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6999      	ldr	r1, [r3, #24]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	021a      	lsls	r2, r3, #8
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	619a      	str	r2, [r3, #24]
      break;
 80059c8:	e041      	b.n	8005a4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fa53 	bl	8005e7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0208 	orr.w	r2, r2, #8
 80059e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69da      	ldr	r2, [r3, #28]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0204 	bic.w	r2, r2, #4
 80059f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69d9      	ldr	r1, [r3, #28]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	61da      	str	r2, [r3, #28]
      break;
 8005a08:	e021      	b.n	8005a4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fa9d 	bl	8005f50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69da      	ldr	r2, [r3, #28]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69d9      	ldr	r1, [r3, #28]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	021a      	lsls	r2, r3, #8
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	61da      	str	r2, [r3, #28]
      break;
 8005a4a:	e000      	b.n	8005a4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005a4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIM_ConfigClockSource+0x18>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e0a6      	b.n	8005bc6 <HAL_TIM_ConfigClockSource+0x166>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d067      	beq.n	8005b80 <HAL_TIM_ConfigClockSource+0x120>
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d80b      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x6c>
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d073      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0x140>
 8005ab8:	2b10      	cmp	r3, #16
 8005aba:	d802      	bhi.n	8005ac2 <HAL_TIM_ConfigClockSource+0x62>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d06f      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005ac0:	e078      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d06c      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0x140>
 8005ac6:	2b30      	cmp	r3, #48	; 0x30
 8005ac8:	d06a      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005aca:	e073      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005acc:	2b70      	cmp	r3, #112	; 0x70
 8005ace:	d00d      	beq.n	8005aec <HAL_TIM_ConfigClockSource+0x8c>
 8005ad0:	2b70      	cmp	r3, #112	; 0x70
 8005ad2:	d804      	bhi.n	8005ade <HAL_TIM_ConfigClockSource+0x7e>
 8005ad4:	2b50      	cmp	r3, #80	; 0x50
 8005ad6:	d033      	beq.n	8005b40 <HAL_TIM_ConfigClockSource+0xe0>
 8005ad8:	2b60      	cmp	r3, #96	; 0x60
 8005ada:	d041      	beq.n	8005b60 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005adc:	e06a      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae2:	d066      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x152>
 8005ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae8:	d017      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005aea:	e063      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	6899      	ldr	r1, [r3, #8]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f000 faed 	bl	80060da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b0e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	609a      	str	r2, [r3, #8]
      break;
 8005b18:	e04c      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6899      	ldr	r1, [r3, #8]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f000 fad6 	bl	80060da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b3c:	609a      	str	r2, [r3, #8]
      break;
 8005b3e:	e039      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	6859      	ldr	r1, [r3, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f000 fa4d 	bl	8005fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2150      	movs	r1, #80	; 0x50
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 faa4 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005b5e:	e029      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	6859      	ldr	r1, [r3, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	f000 fa6b 	bl	8006048 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2160      	movs	r1, #96	; 0x60
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fa94 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005b7e:	e019      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	6859      	ldr	r1, [r3, #4]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f000 fa2d 	bl	8005fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2140      	movs	r1, #64	; 0x40
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fa84 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005b9e:	e009      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4610      	mov	r0, r2
 8005bac:	f000 fa7b 	bl	80060a6 <TIM_ITRx_SetConfig>
        break;
 8005bb0:	e000      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005bb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr

08005bf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr
	...

08005c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a29      	ldr	r2, [pc, #164]	; (8005cd0 <TIM_Base_SetConfig+0xb8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00b      	beq.n	8005c48 <TIM_Base_SetConfig+0x30>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c36:	d007      	beq.n	8005c48 <TIM_Base_SetConfig+0x30>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a26      	ldr	r2, [pc, #152]	; (8005cd4 <TIM_Base_SetConfig+0xbc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_Base_SetConfig+0x30>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a25      	ldr	r2, [pc, #148]	; (8005cd8 <TIM_Base_SetConfig+0xc0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d108      	bne.n	8005c5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a1c      	ldr	r2, [pc, #112]	; (8005cd0 <TIM_Base_SetConfig+0xb8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00b      	beq.n	8005c7a <TIM_Base_SetConfig+0x62>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c68:	d007      	beq.n	8005c7a <TIM_Base_SetConfig+0x62>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a19      	ldr	r2, [pc, #100]	; (8005cd4 <TIM_Base_SetConfig+0xbc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_Base_SetConfig+0x62>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a18      	ldr	r2, [pc, #96]	; (8005cd8 <TIM_Base_SetConfig+0xc0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d108      	bne.n	8005c8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a07      	ldr	r2, [pc, #28]	; (8005cd0 <TIM_Base_SetConfig+0xb8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d103      	bne.n	8005cc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	615a      	str	r2, [r3, #20]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr
 8005cd0:	40012c00 	.word	0x40012c00
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800

08005cdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f023 0201 	bic.w	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0303 	bic.w	r3, r3, #3
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f023 0302 	bic.w	r3, r3, #2
 8005d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a1c      	ldr	r2, [pc, #112]	; (8005da4 <TIM_OC1_SetConfig+0xc8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d10c      	bne.n	8005d52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f023 0308 	bic.w	r3, r3, #8
 8005d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f023 0304 	bic.w	r3, r3, #4
 8005d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a13      	ldr	r2, [pc, #76]	; (8005da4 <TIM_OC1_SetConfig+0xc8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d111      	bne.n	8005d7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	621a      	str	r2, [r3, #32]
}
 8005d98:	bf00      	nop
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40012c00 	.word	0x40012c00

08005da8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f023 0210 	bic.w	r2, r3, #16
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	021b      	lsls	r3, r3, #8
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f023 0320 	bic.w	r3, r3, #32
 8005df2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a1d      	ldr	r2, [pc, #116]	; (8005e78 <TIM_OC2_SetConfig+0xd0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d10d      	bne.n	8005e24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a14      	ldr	r2, [pc, #80]	; (8005e78 <TIM_OC2_SetConfig+0xd0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d113      	bne.n	8005e54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	621a      	str	r2, [r3, #32]
}
 8005e6e:	bf00      	nop
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr
 8005e78:	40012c00 	.word	0x40012c00

08005e7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0303 	bic.w	r3, r3, #3
 8005eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a1d      	ldr	r2, [pc, #116]	; (8005f4c <TIM_OC3_SetConfig+0xd0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d10d      	bne.n	8005ef6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	021b      	lsls	r3, r3, #8
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a14      	ldr	r2, [pc, #80]	; (8005f4c <TIM_OC3_SetConfig+0xd0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d113      	bne.n	8005f26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	621a      	str	r2, [r3, #32]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40012c00 	.word	0x40012c00

08005f50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	031b      	lsls	r3, r3, #12
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a0f      	ldr	r2, [pc, #60]	; (8005fe8 <TIM_OC4_SetConfig+0x98>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d109      	bne.n	8005fc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	019b      	lsls	r3, r3, #6
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	621a      	str	r2, [r3, #32]
}
 8005fde:	bf00      	nop
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr
 8005fe8:	40012c00 	.word	0x40012c00

08005fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	f023 0201 	bic.w	r2, r3, #1
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f023 030a 	bic.w	r3, r3, #10
 8006028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr

08006048 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	f023 0210 	bic.w	r2, r3, #16
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006072:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	031b      	lsls	r3, r3, #12
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006084:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	621a      	str	r2, [r3, #32]
}
 800609c:	bf00      	nop
 800609e:	371c      	adds	r7, #28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bc80      	pop	{r7}
 80060a4:	4770      	bx	lr

080060a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f043 0307 	orr.w	r3, r3, #7
 80060c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	609a      	str	r2, [r3, #8]
}
 80060d0:	bf00      	nop
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr

080060da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060da:	b480      	push	{r7}
 80060dc:	b087      	sub	sp, #28
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	607a      	str	r2, [r7, #4]
 80060e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	021a      	lsls	r2, r3, #8
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	431a      	orrs	r2, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	4313      	orrs	r3, r2
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	609a      	str	r2, [r3, #8]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	2201      	movs	r2, #1
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a1a      	ldr	r2, [r3, #32]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	43db      	mvns	r3, r3
 800613a:	401a      	ands	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1a      	ldr	r2, [r3, #32]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 031f 	and.w	r3, r3, #31
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	fa01 f303 	lsl.w	r3, r1, r3
 8006150:	431a      	orrs	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	bc80      	pop	{r7}
 800615e:	4770      	bx	lr

08006160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006174:	2302      	movs	r3, #2
 8006176:	e046      	b.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a16      	ldr	r2, [pc, #88]	; (8006210 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00e      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c4:	d009      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a12      	ldr	r2, [pc, #72]	; (8006214 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a10      	ldr	r2, [pc, #64]	; (8006218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d10c      	bne.n	80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr
 8006210:	40012c00 	.word	0x40012c00
 8006214:	40000400 	.word	0x40000400
 8006218:	40000800 	.word	0x40000800

0800621c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006234:	2302      	movs	r3, #2
 8006236:	e03d      	b.n	80062b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr

080062be <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	bc80      	pop	{r7}
 80062e0:	4770      	bx	lr

080062e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80062e2:	b084      	sub	sp, #16
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	f107 0014 	add.w	r0, r7, #20
 80062f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	b004      	add	sp, #16
 8006300:	4770      	bx	lr

08006302 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006312:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006316:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	bc80      	pop	{r7}
 800632c:	4770      	bx	lr

0800632e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006336:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800633a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	b29b      	uxth	r3, r3
 8006348:	43db      	mvns	r3, r3
 800634a:	b29b      	uxth	r3, r3
 800634c:	4013      	ands	r3, r2
 800634e:	b29a      	uxth	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	bc80      	pop	{r7}
 8006360:	4770      	bx	lr

08006362 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr

0800637a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800637a:	b084      	sub	sp, #16
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	f107 0014 	add.w	r0, r7, #20
 8006388:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	b004      	add	sp, #16
 80063b8:	4770      	bx	lr
	...

080063bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063bc:	b480      	push	{r7}
 80063be:	b09b      	sub	sp, #108	; 0x6c
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	b29b      	uxth	r3, r3
 80063da:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	78db      	ldrb	r3, [r3, #3]
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d81f      	bhi.n	800642e <USB_ActivateEndpoint+0x72>
 80063ee:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <USB_ActivateEndpoint+0x38>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	08006405 	.word	0x08006405
 80063f8:	08006421 	.word	0x08006421
 80063fc:	08006437 	.word	0x08006437
 8006400:	08006413 	.word	0x08006413
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006404:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006408:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800640c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006410:	e012      	b.n	8006438 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006412:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006416:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800641a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800641e:	e00b      	b.n	8006438 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006420:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006424:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006428:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800642c:	e004      	b.n	8006438 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006434:	e000      	b.n	8006438 <USB_ActivateEndpoint+0x7c>
      break;
 8006436:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	441a      	add	r2, r3
 8006442:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006456:	b29b      	uxth	r3, r3
 8006458:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006470:	b29a      	uxth	r2, r3
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	4313      	orrs	r3, r2
 800647a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	441a      	add	r2, r3
 8006488:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800648c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649c:	b29b      	uxth	r3, r3
 800649e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	7b1b      	ldrb	r3, [r3, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f040 8149 	bne.w	800673c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8084 	beq.w	80065bc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064be:	b29b      	uxth	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	4413      	add	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	011a      	lsls	r2, r3, #4
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d6:	613b      	str	r3, [r7, #16]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	88db      	ldrh	r3, [r3, #6]
 80064dc:	085b      	lsrs	r3, r3, #1
 80064de:	b29b      	uxth	r3, r3
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	81fb      	strh	r3, [r7, #14]
 80064f6:	89fb      	ldrh	r3, [r7, #14]
 80064f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01b      	beq.n	8006538 <USB_ActivateEndpoint+0x17c>
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006516:	81bb      	strh	r3, [r7, #12]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	441a      	add	r2, r3
 8006522:	89bb      	ldrh	r3, [r7, #12]
 8006524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006530:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006534:	b29b      	uxth	r3, r3
 8006536:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	78db      	ldrb	r3, [r3, #3]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d020      	beq.n	8006582 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29b      	uxth	r3, r3
 800654e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006556:	813b      	strh	r3, [r7, #8]
 8006558:	893b      	ldrh	r3, [r7, #8]
 800655a:	f083 0320 	eor.w	r3, r3, #32
 800655e:	813b      	strh	r3, [r7, #8]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	441a      	add	r2, r3
 800656a:	893b      	ldrh	r3, [r7, #8]
 800656c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657c:	b29b      	uxth	r3, r3
 800657e:	8013      	strh	r3, [r2, #0]
 8006580:	e27f      	b.n	8006a82 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006598:	817b      	strh	r3, [r7, #10]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	441a      	add	r2, r3
 80065a4:	897b      	ldrh	r3, [r7, #10]
 80065a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	8013      	strh	r3, [r2, #0]
 80065ba:	e262      	b.n	8006a82 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	461a      	mov	r2, r3
 80065ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065cc:	4413      	add	r3, r2
 80065ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	011a      	lsls	r2, r3, #4
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80065de:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	88db      	ldrh	r3, [r3, #6]
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	4413      	add	r3, r2
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	011a      	lsls	r2, r3, #4
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	4413      	add	r3, r2
 800660e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006612:	623b      	str	r3, [r7, #32]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d112      	bne.n	8006642 <USB_ActivateEndpoint+0x286>
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006626:	b29a      	uxth	r2, r3
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800663a:	b29a      	uxth	r2, r3
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	e02f      	b.n	80066a2 <USB_ActivateEndpoint+0x2e6>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b3e      	cmp	r3, #62	; 0x3e
 8006648:	d813      	bhi.n	8006672 <USB_ActivateEndpoint+0x2b6>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	085b      	lsrs	r3, r3, #1
 8006650:	663b      	str	r3, [r7, #96]	; 0x60
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <USB_ActivateEndpoint+0x2a8>
 800665e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006660:	3301      	adds	r3, #1
 8006662:	663b      	str	r3, [r7, #96]	; 0x60
 8006664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006666:	b29b      	uxth	r3, r3
 8006668:	029b      	lsls	r3, r3, #10
 800666a:	b29a      	uxth	r2, r3
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	e017      	b.n	80066a2 <USB_ActivateEndpoint+0x2e6>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	095b      	lsrs	r3, r3, #5
 8006678:	663b      	str	r3, [r7, #96]	; 0x60
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 031f 	and.w	r3, r3, #31
 8006682:	2b00      	cmp	r3, #0
 8006684:	d102      	bne.n	800668c <USB_ActivateEndpoint+0x2d0>
 8006686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006688:	3b01      	subs	r3, #1
 800668a:	663b      	str	r3, [r7, #96]	; 0x60
 800668c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800668e:	b29b      	uxth	r3, r3
 8006690:	029b      	lsls	r3, r3, #10
 8006692:	b29b      	uxth	r3, r3
 8006694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669c:	b29a      	uxth	r2, r3
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	83fb      	strh	r3, [r7, #30]
 80066b0:	8bfb      	ldrh	r3, [r7, #30]
 80066b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d01b      	beq.n	80066f2 <USB_ActivateEndpoint+0x336>
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d0:	83bb      	strh	r3, [r7, #28]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	441a      	add	r2, r3
 80066dc:	8bbb      	ldrh	r3, [r7, #28]
 80066de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006708:	837b      	strh	r3, [r7, #26]
 800670a:	8b7b      	ldrh	r3, [r7, #26]
 800670c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006710:	837b      	strh	r3, [r7, #26]
 8006712:	8b7b      	ldrh	r3, [r7, #26]
 8006714:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006718:	837b      	strh	r3, [r7, #26]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	441a      	add	r2, r3
 8006724:	8b7b      	ldrh	r3, [r7, #26]
 8006726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800672a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006736:	b29b      	uxth	r3, r3
 8006738:	8013      	strh	r3, [r2, #0]
 800673a:	e1a2      	b.n	8006a82 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006752:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	441a      	add	r2, r3
 8006760:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800676c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006774:	b29b      	uxth	r3, r3
 8006776:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	65bb      	str	r3, [r7, #88]	; 0x58
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006782:	b29b      	uxth	r3, r3
 8006784:	461a      	mov	r2, r3
 8006786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006788:	4413      	add	r3, r2
 800678a:	65bb      	str	r3, [r7, #88]	; 0x58
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	011a      	lsls	r2, r3, #4
 8006792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006794:	4413      	add	r3, r2
 8006796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800679a:	657b      	str	r3, [r7, #84]	; 0x54
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	891b      	ldrh	r3, [r3, #8]
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	653b      	str	r3, [r7, #80]	; 0x50
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067bc:	4413      	add	r3, r2
 80067be:	653b      	str	r3, [r7, #80]	; 0x50
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	011a      	lsls	r2, r3, #4
 80067c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80067ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	895b      	ldrh	r3, [r3, #10]
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f040 8091 	bne.w	800690c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80067f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80067fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01b      	beq.n	800683a <USB_ActivateEndpoint+0x47e>
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006818:	877b      	strh	r3, [r7, #58]	; 0x3a
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	441a      	add	r2, r3
 8006824:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006836:	b29b      	uxth	r3, r3
 8006838:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	873b      	strh	r3, [r7, #56]	; 0x38
 8006848:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800684a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	d01b      	beq.n	800688a <USB_ActivateEndpoint+0x4ce>
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006868:	86fb      	strh	r3, [r7, #54]	; 0x36
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	441a      	add	r2, r3
 8006874:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800687a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006882:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006886:	b29b      	uxth	r3, r3
 8006888:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800689c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	441a      	add	r2, r3
 80068bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e8:	867b      	strh	r3, [r7, #50]	; 0x32
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	441a      	add	r2, r3
 80068f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80068f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006906:	b29b      	uxth	r3, r3
 8006908:	8013      	strh	r3, [r2, #0]
 800690a:	e0ba      	b.n	8006a82 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800691c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01d      	beq.n	8006964 <USB_ActivateEndpoint+0x5a8>
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	441a      	add	r2, r3
 800694c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800695c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006960:	b29b      	uxth	r3, r3
 8006962:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006974:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01d      	beq.n	80069bc <USB_ActivateEndpoint+0x600>
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006996:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	441a      	add	r2, r3
 80069a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80069a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	78db      	ldrb	r3, [r3, #3]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d024      	beq.n	8006a0e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80069de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069e2:	f083 0320 	eor.w	r3, r3, #32
 80069e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]
 8006a0c:	e01d      	b.n	8006a4a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	441a      	add	r2, r3
 8006a32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a60:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	441a      	add	r2, r3
 8006a6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006a82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	376c      	adds	r7, #108	; 0x6c
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b08d      	sub	sp, #52	; 0x34
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	7b1b      	ldrb	r3, [r3, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 808e 	bne.w	8006bc0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	785b      	ldrb	r3, [r3, #1]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d044      	beq.n	8006b36 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	81bb      	strh	r3, [r7, #12]
 8006aba:	89bb      	ldrh	r3, [r7, #12]
 8006abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d01b      	beq.n	8006afc <USB_DeactivateEndpoint+0x6c>
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ada:	817b      	strh	r3, [r7, #10]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	441a      	add	r2, r3
 8006ae6:	897b      	ldrh	r3, [r7, #10]
 8006ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b12:	813b      	strh	r3, [r7, #8]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	441a      	add	r2, r3
 8006b1e:	893b      	ldrh	r3, [r7, #8]
 8006b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	8013      	strh	r3, [r2, #0]
 8006b34:	e192      	b.n	8006e5c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	827b      	strh	r3, [r7, #18]
 8006b44:	8a7b      	ldrh	r3, [r7, #18]
 8006b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d01b      	beq.n	8006b86 <USB_DeactivateEndpoint+0xf6>
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b64:	823b      	strh	r3, [r7, #16]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	441a      	add	r2, r3
 8006b70:	8a3b      	ldrh	r3, [r7, #16]
 8006b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9c:	81fb      	strh	r3, [r7, #14]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	441a      	add	r2, r3
 8006ba8:	89fb      	ldrh	r3, [r7, #14]
 8006baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	8013      	strh	r3, [r2, #0]
 8006bbe:	e14d      	b.n	8006e5c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	785b      	ldrb	r3, [r3, #1]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f040 80a5 	bne.w	8006d14 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	843b      	strh	r3, [r7, #32]
 8006bd8:	8c3b      	ldrh	r3, [r7, #32]
 8006bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d01b      	beq.n	8006c1a <USB_DeactivateEndpoint+0x18a>
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf8:	83fb      	strh	r3, [r7, #30]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	441a      	add	r2, r3
 8006c04:	8bfb      	ldrh	r3, [r7, #30]
 8006c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	83bb      	strh	r3, [r7, #28]
 8006c28:	8bbb      	ldrh	r3, [r7, #28]
 8006c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01b      	beq.n	8006c6a <USB_DeactivateEndpoint+0x1da>
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c48:	837b      	strh	r3, [r7, #26]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	441a      	add	r2, r3
 8006c54:	8b7b      	ldrh	r3, [r7, #26]
 8006c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c80:	833b      	strh	r3, [r7, #24]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	441a      	add	r2, r3
 8006c8c:	8b3b      	ldrh	r3, [r7, #24]
 8006c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb8:	82fb      	strh	r3, [r7, #22]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	441a      	add	r2, r3
 8006cc4:	8afb      	ldrh	r3, [r7, #22]
 8006cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf0:	82bb      	strh	r3, [r7, #20]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	441a      	add	r2, r3
 8006cfc:	8abb      	ldrh	r3, [r7, #20]
 8006cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	8013      	strh	r3, [r2, #0]
 8006d12:	e0a3      	b.n	8006e5c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01b      	beq.n	8006d64 <USB_DeactivateEndpoint+0x2d4>
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d42:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	441a      	add	r2, r3
 8006d4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006d72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01b      	beq.n	8006db4 <USB_DeactivateEndpoint+0x324>
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d92:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	441a      	add	r2, r3
 8006d9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dca:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	441a      	add	r2, r3
 8006dd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e02:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	441a      	add	r2, r3
 8006e0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	441a      	add	r2, r3
 8006e46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3734      	adds	r7, #52	; 0x34
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bc80      	pop	{r7}
 8006e66:	4770      	bx	lr

08006e68 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b0c4      	sub	sp, #272	; 0x110
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	1d3b      	adds	r3, r7, #4
 8006e70:	6018      	str	r0, [r3, #0]
 8006e72:	463b      	mov	r3, r7
 8006e74:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e76:	463b      	mov	r3, r7
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	f040 8557 	bne.w	8007930 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e82:	463b      	mov	r3, r7
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699a      	ldr	r2, [r3, #24]
 8006e88:	463b      	mov	r3, r7
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d905      	bls.n	8006e9e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006e92:	463b      	mov	r3, r7
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006e9c:	e004      	b.n	8006ea8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006ea8:	463b      	mov	r3, r7
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	7b1b      	ldrb	r3, [r3, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d12c      	bne.n	8006f0c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006eb2:	463b      	mov	r3, r7
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6959      	ldr	r1, [r3, #20]
 8006eb8:	463b      	mov	r3, r7
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	88da      	ldrh	r2, [r3, #6]
 8006ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	1d38      	adds	r0, r7, #4
 8006ec6:	6800      	ldr	r0, [r0, #0]
 8006ec8:	f001 fa2c 	bl	8008324 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ecc:	1d3b      	adds	r3, r7, #4
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	1d3b      	adds	r3, r7, #4
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	463b      	mov	r3, r7
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	011a      	lsls	r2, r3, #4
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006ef4:	f107 0310 	add.w	r3, r7, #16
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	f107 0310 	add.w	r3, r7, #16
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	801a      	strh	r2, [r3, #0]
 8006f08:	f000 bcdd 	b.w	80078c6 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006f0c:	463b      	mov	r3, r7
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	78db      	ldrb	r3, [r3, #3]
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	f040 8347 	bne.w	80075a6 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006f18:	463b      	mov	r3, r7
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6a1a      	ldr	r2, [r3, #32]
 8006f1e:	463b      	mov	r3, r7
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	f240 82eb 	bls.w	8007500 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006f2a:	1d3b      	adds	r3, r7, #4
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	463b      	mov	r3, r7
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f44:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006f48:	1d3b      	adds	r3, r7, #4
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	441a      	add	r2, r3
 8006f56:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f62:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006f6e:	463b      	mov	r3, r7
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6a1a      	ldr	r2, [r3, #32]
 8006f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f78:	1ad2      	subs	r2, r2, r3
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f80:	1d3b      	adds	r3, r7, #4
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	463b      	mov	r3, r7
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 8159 	beq.w	800724e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f9c:	1d3b      	adds	r3, r7, #4
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fa2:	463b      	mov	r3, r7
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d164      	bne.n	8007076 <USB_EPStartXfer+0x20e>
 8006fac:	1d3b      	adds	r3, r7, #4
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fb2:	1d3b      	adds	r3, r7, #4
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc0:	4413      	add	r3, r2
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fc4:	463b      	mov	r3, r7
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	011a      	lsls	r2, r3, #4
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	4413      	add	r3, r2
 8006fd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d112      	bne.n	8007004 <USB_EPStartXfer+0x19c>
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	801a      	strh	r2, [r3, #0]
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	801a      	strh	r2, [r3, #0]
 8007002:	e054      	b.n	80070ae <USB_EPStartXfer+0x246>
 8007004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007008:	2b3e      	cmp	r3, #62	; 0x3e
 800700a:	d817      	bhi.n	800703c <USB_EPStartXfer+0x1d4>
 800700c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007010:	085b      	lsrs	r3, r3, #1
 8007012:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <USB_EPStartXfer+0x1c4>
 8007022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007026:	3301      	adds	r3, #1
 8007028:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007030:	b29b      	uxth	r3, r3
 8007032:	029b      	lsls	r3, r3, #10
 8007034:	b29a      	uxth	r2, r3
 8007036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007038:	801a      	strh	r2, [r3, #0]
 800703a:	e038      	b.n	80070ae <USB_EPStartXfer+0x246>
 800703c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800704a:	f003 031f 	and.w	r3, r3, #31
 800704e:	2b00      	cmp	r3, #0
 8007050:	d104      	bne.n	800705c <USB_EPStartXfer+0x1f4>
 8007052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007056:	3b01      	subs	r3, #1
 8007058:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800705c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007060:	b29b      	uxth	r3, r3
 8007062:	029b      	lsls	r3, r3, #10
 8007064:	b29b      	uxth	r3, r3
 8007066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706e:	b29a      	uxth	r2, r3
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	801a      	strh	r2, [r3, #0]
 8007074:	e01b      	b.n	80070ae <USB_EPStartXfer+0x246>
 8007076:	463b      	mov	r3, r7
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d116      	bne.n	80070ae <USB_EPStartXfer+0x246>
 8007080:	1d3b      	adds	r3, r7, #4
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007088:	b29b      	uxth	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708e:	4413      	add	r3, r2
 8007090:	637b      	str	r3, [r7, #52]	; 0x34
 8007092:	463b      	mov	r3, r7
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	011a      	lsls	r2, r3, #4
 800709a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709c:	4413      	add	r3, r2
 800709e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070a2:	633b      	str	r3, [r7, #48]	; 0x30
 80070a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070ae:	463b      	mov	r3, r7
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	895b      	ldrh	r3, [r3, #10]
 80070b4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070b8:	463b      	mov	r3, r7
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6959      	ldr	r1, [r3, #20]
 80070be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80070c8:	1d38      	adds	r0, r7, #4
 80070ca:	6800      	ldr	r0, [r0, #0]
 80070cc:	f001 f92a 	bl	8008324 <USB_WritePMA>
            ep->xfer_buff += len;
 80070d0:	463b      	mov	r3, r7
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695a      	ldr	r2, [r3, #20]
 80070d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070da:	441a      	add	r2, r3
 80070dc:	463b      	mov	r3, r7
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80070e2:	463b      	mov	r3, r7
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6a1a      	ldr	r2, [r3, #32]
 80070e8:	463b      	mov	r3, r7
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d909      	bls.n	8007106 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80070f2:	463b      	mov	r3, r7
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6a1a      	ldr	r2, [r3, #32]
 80070f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070fc:	1ad2      	subs	r2, r2, r3
 80070fe:	463b      	mov	r3, r7
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	621a      	str	r2, [r3, #32]
 8007104:	e008      	b.n	8007118 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007106:	463b      	mov	r3, r7
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007110:	463b      	mov	r3, r7
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2200      	movs	r2, #0
 8007116:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007118:	463b      	mov	r3, r7
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d164      	bne.n	80071ec <USB_EPStartXfer+0x384>
 8007122:	1d3b      	adds	r3, r7, #4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	1d3b      	adds	r3, r7, #4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007130:	b29b      	uxth	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	4413      	add	r3, r2
 8007138:	61fb      	str	r3, [r7, #28]
 800713a:	463b      	mov	r3, r7
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	011a      	lsls	r2, r3, #4
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	4413      	add	r3, r2
 8007146:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800714a:	61bb      	str	r3, [r7, #24]
 800714c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d112      	bne.n	800717a <USB_EPStartXfer+0x312>
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	b29b      	uxth	r3, r3
 800715a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800715e:	b29a      	uxth	r2, r3
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007172:	b29a      	uxth	r2, r3
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	e057      	b.n	800722a <USB_EPStartXfer+0x3c2>
 800717a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800717e:	2b3e      	cmp	r3, #62	; 0x3e
 8007180:	d817      	bhi.n	80071b2 <USB_EPStartXfer+0x34a>
 8007182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007186:	085b      	lsrs	r3, r3, #1
 8007188:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800718c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d004      	beq.n	80071a2 <USB_EPStartXfer+0x33a>
 8007198:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800719c:	3301      	adds	r3, #1
 800719e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80071a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	029b      	lsls	r3, r3, #10
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	801a      	strh	r2, [r3, #0]
 80071b0:	e03b      	b.n	800722a <USB_EPStartXfer+0x3c2>
 80071b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80071bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071c0:	f003 031f 	and.w	r3, r3, #31
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d104      	bne.n	80071d2 <USB_EPStartXfer+0x36a>
 80071c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80071cc:	3b01      	subs	r3, #1
 80071ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80071d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	029b      	lsls	r3, r3, #10
 80071da:	b29b      	uxth	r3, r3
 80071dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	e01e      	b.n	800722a <USB_EPStartXfer+0x3c2>
 80071ec:	463b      	mov	r3, r7
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	785b      	ldrb	r3, [r3, #1]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d119      	bne.n	800722a <USB_EPStartXfer+0x3c2>
 80071f6:	1d3b      	adds	r3, r7, #4
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
 80071fc:	1d3b      	adds	r3, r7, #4
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007204:	b29b      	uxth	r3, r3
 8007206:	461a      	mov	r2, r3
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	4413      	add	r3, r2
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
 800720e:	463b      	mov	r3, r7
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	011a      	lsls	r2, r3, #4
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	4413      	add	r3, r2
 800721a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800721e:	623b      	str	r3, [r7, #32]
 8007220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007224:	b29a      	uxth	r2, r3
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800722a:	463b      	mov	r3, r7
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	891b      	ldrh	r3, [r3, #8]
 8007230:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007234:	463b      	mov	r3, r7
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6959      	ldr	r1, [r3, #20]
 800723a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800723e:	b29b      	uxth	r3, r3
 8007240:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007244:	1d38      	adds	r0, r7, #4
 8007246:	6800      	ldr	r0, [r0, #0]
 8007248:	f001 f86c 	bl	8008324 <USB_WritePMA>
 800724c:	e33b      	b.n	80078c6 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800724e:	463b      	mov	r3, r7
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	785b      	ldrb	r3, [r3, #1]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d164      	bne.n	8007322 <USB_EPStartXfer+0x4ba>
 8007258:	1d3b      	adds	r3, r7, #4
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800725e:	1d3b      	adds	r3, r7, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007266:	b29b      	uxth	r3, r3
 8007268:	461a      	mov	r2, r3
 800726a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726c:	4413      	add	r3, r2
 800726e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007270:	463b      	mov	r3, r7
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	011a      	lsls	r2, r3, #4
 8007278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800727a:	4413      	add	r3, r2
 800727c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007280:	64bb      	str	r3, [r7, #72]	; 0x48
 8007282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d112      	bne.n	80072b0 <USB_EPStartXfer+0x448>
 800728a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	b29b      	uxth	r3, r3
 8007290:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007294:	b29a      	uxth	r2, r3
 8007296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007298:	801a      	strh	r2, [r3, #0]
 800729a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072ac:	801a      	strh	r2, [r3, #0]
 80072ae:	e057      	b.n	8007360 <USB_EPStartXfer+0x4f8>
 80072b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072b4:	2b3e      	cmp	r3, #62	; 0x3e
 80072b6:	d817      	bhi.n	80072e8 <USB_EPStartXfer+0x480>
 80072b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072bc:	085b      	lsrs	r3, r3, #1
 80072be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d004      	beq.n	80072d8 <USB_EPStartXfer+0x470>
 80072ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072d2:	3301      	adds	r3, #1
 80072d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072dc:	b29b      	uxth	r3, r3
 80072de:	029b      	lsls	r3, r3, #10
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	e03b      	b.n	8007360 <USB_EPStartXfer+0x4f8>
 80072e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072ec:	095b      	lsrs	r3, r3, #5
 80072ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072f6:	f003 031f 	and.w	r3, r3, #31
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d104      	bne.n	8007308 <USB_EPStartXfer+0x4a0>
 80072fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007302:	3b01      	subs	r3, #1
 8007304:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800730c:	b29b      	uxth	r3, r3
 800730e:	029b      	lsls	r3, r3, #10
 8007310:	b29b      	uxth	r3, r3
 8007312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800731a:	b29a      	uxth	r2, r3
 800731c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800731e:	801a      	strh	r2, [r3, #0]
 8007320:	e01e      	b.n	8007360 <USB_EPStartXfer+0x4f8>
 8007322:	463b      	mov	r3, r7
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d119      	bne.n	8007360 <USB_EPStartXfer+0x4f8>
 800732c:	1d3b      	adds	r3, r7, #4
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	657b      	str	r3, [r7, #84]	; 0x54
 8007332:	1d3b      	adds	r3, r7, #4
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800733a:	b29b      	uxth	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007340:	4413      	add	r3, r2
 8007342:	657b      	str	r3, [r7, #84]	; 0x54
 8007344:	463b      	mov	r3, r7
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	011a      	lsls	r2, r3, #4
 800734c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800734e:	4413      	add	r3, r2
 8007350:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007354:	653b      	str	r3, [r7, #80]	; 0x50
 8007356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800735a:	b29a      	uxth	r2, r3
 800735c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800735e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007360:	463b      	mov	r3, r7
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	891b      	ldrh	r3, [r3, #8]
 8007366:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800736a:	463b      	mov	r3, r7
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6959      	ldr	r1, [r3, #20]
 8007370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007374:	b29b      	uxth	r3, r3
 8007376:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800737a:	1d38      	adds	r0, r7, #4
 800737c:	6800      	ldr	r0, [r0, #0]
 800737e:	f000 ffd1 	bl	8008324 <USB_WritePMA>
            ep->xfer_buff += len;
 8007382:	463b      	mov	r3, r7
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	695a      	ldr	r2, [r3, #20]
 8007388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800738c:	441a      	add	r2, r3
 800738e:	463b      	mov	r3, r7
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007394:	463b      	mov	r3, r7
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6a1a      	ldr	r2, [r3, #32]
 800739a:	463b      	mov	r3, r7
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d909      	bls.n	80073b8 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80073a4:	463b      	mov	r3, r7
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6a1a      	ldr	r2, [r3, #32]
 80073aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073ae:	1ad2      	subs	r2, r2, r3
 80073b0:	463b      	mov	r3, r7
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	621a      	str	r2, [r3, #32]
 80073b6:	e008      	b.n	80073ca <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80073b8:	463b      	mov	r3, r7
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80073c2:	463b      	mov	r3, r7
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2200      	movs	r2, #0
 80073c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073ca:	1d3b      	adds	r3, r7, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	647b      	str	r3, [r7, #68]	; 0x44
 80073d0:	463b      	mov	r3, r7
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d164      	bne.n	80074a4 <USB_EPStartXfer+0x63c>
 80073da:	1d3b      	adds	r3, r7, #4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073e0:	1d3b      	adds	r3, r7, #4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	461a      	mov	r2, r3
 80073ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ee:	4413      	add	r3, r2
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f2:	463b      	mov	r3, r7
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	011a      	lsls	r2, r3, #4
 80073fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fc:	4413      	add	r3, r2
 80073fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007402:	63bb      	str	r3, [r7, #56]	; 0x38
 8007404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d112      	bne.n	8007432 <USB_EPStartXfer+0x5ca>
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	b29b      	uxth	r3, r3
 8007412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007416:	b29a      	uxth	r2, r3
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	801a      	strh	r2, [r3, #0]
 800741c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29b      	uxth	r3, r3
 8007422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742a:	b29a      	uxth	r2, r3
 800742c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	e054      	b.n	80074dc <USB_EPStartXfer+0x674>
 8007432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007436:	2b3e      	cmp	r3, #62	; 0x3e
 8007438:	d817      	bhi.n	800746a <USB_EPStartXfer+0x602>
 800743a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <USB_EPStartXfer+0x5f2>
 8007450:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007454:	3301      	adds	r3, #1
 8007456:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800745a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800745e:	b29b      	uxth	r3, r3
 8007460:	029b      	lsls	r3, r3, #10
 8007462:	b29a      	uxth	r2, r3
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	801a      	strh	r2, [r3, #0]
 8007468:	e038      	b.n	80074dc <USB_EPStartXfer+0x674>
 800746a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007478:	f003 031f 	and.w	r3, r3, #31
 800747c:	2b00      	cmp	r3, #0
 800747e:	d104      	bne.n	800748a <USB_EPStartXfer+0x622>
 8007480:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007484:	3b01      	subs	r3, #1
 8007486:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800748a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800748e:	b29b      	uxth	r3, r3
 8007490:	029b      	lsls	r3, r3, #10
 8007492:	b29b      	uxth	r3, r3
 8007494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800749c:	b29a      	uxth	r2, r3
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	801a      	strh	r2, [r3, #0]
 80074a2:	e01b      	b.n	80074dc <USB_EPStartXfer+0x674>
 80074a4:	463b      	mov	r3, r7
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	785b      	ldrb	r3, [r3, #1]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d116      	bne.n	80074dc <USB_EPStartXfer+0x674>
 80074ae:	1d3b      	adds	r3, r7, #4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074bc:	4413      	add	r3, r2
 80074be:	647b      	str	r3, [r7, #68]	; 0x44
 80074c0:	463b      	mov	r3, r7
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	011a      	lsls	r2, r3, #4
 80074c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ca:	4413      	add	r3, r2
 80074cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074d0:	643b      	str	r3, [r7, #64]	; 0x40
 80074d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074dc:	463b      	mov	r3, r7
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	895b      	ldrh	r3, [r3, #10]
 80074e2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074e6:	463b      	mov	r3, r7
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6959      	ldr	r1, [r3, #20]
 80074ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80074f6:	1d38      	adds	r0, r7, #4
 80074f8:	6800      	ldr	r0, [r0, #0]
 80074fa:	f000 ff13 	bl	8008324 <USB_WritePMA>
 80074fe:	e1e2      	b.n	80078c6 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007500:	463b      	mov	r3, r7
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800750a:	1d3b      	adds	r3, r7, #4
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	463b      	mov	r3, r7
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	b29b      	uxth	r3, r3
 800751c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007524:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007528:	1d3b      	adds	r3, r7, #4
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	463b      	mov	r3, r7
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	441a      	add	r2, r3
 8007536:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800753a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800753e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754a:	b29b      	uxth	r3, r3
 800754c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800754e:	1d3b      	adds	r3, r7, #4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	663b      	str	r3, [r7, #96]	; 0x60
 8007554:	1d3b      	adds	r3, r7, #4
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755c:	b29b      	uxth	r3, r3
 800755e:	461a      	mov	r2, r3
 8007560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007562:	4413      	add	r3, r2
 8007564:	663b      	str	r3, [r7, #96]	; 0x60
 8007566:	463b      	mov	r3, r7
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	011a      	lsls	r2, r3, #4
 800756e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007570:	4413      	add	r3, r2
 8007572:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007576:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800757c:	b29a      	uxth	r2, r3
 800757e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007580:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007582:	463b      	mov	r3, r7
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	891b      	ldrh	r3, [r3, #8]
 8007588:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800758c:	463b      	mov	r3, r7
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6959      	ldr	r1, [r3, #20]
 8007592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007596:	b29b      	uxth	r3, r3
 8007598:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800759c:	1d38      	adds	r0, r7, #4
 800759e:	6800      	ldr	r0, [r0, #0]
 80075a0:	f000 fec0 	bl	8008324 <USB_WritePMA>
 80075a4:	e18f      	b.n	80078c6 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075a6:	1d3b      	adds	r3, r7, #4
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	463b      	mov	r3, r7
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 808f 	beq.w	80076e0 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075c2:	1d3b      	adds	r3, r7, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80075c8:	463b      	mov	r3, r7
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d164      	bne.n	800769c <USB_EPStartXfer+0x834>
 80075d2:	1d3b      	adds	r3, r7, #4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	673b      	str	r3, [r7, #112]	; 0x70
 80075d8:	1d3b      	adds	r3, r7, #4
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	461a      	mov	r2, r3
 80075e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075e6:	4413      	add	r3, r2
 80075e8:	673b      	str	r3, [r7, #112]	; 0x70
 80075ea:	463b      	mov	r3, r7
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	011a      	lsls	r2, r3, #4
 80075f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075f4:	4413      	add	r3, r2
 80075f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007600:	2b00      	cmp	r3, #0
 8007602:	d112      	bne.n	800762a <USB_EPStartXfer+0x7c2>
 8007604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	b29b      	uxth	r3, r3
 800760a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800760e:	b29a      	uxth	r2, r3
 8007610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007612:	801a      	strh	r2, [r3, #0]
 8007614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	b29b      	uxth	r3, r3
 800761a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007622:	b29a      	uxth	r2, r3
 8007624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	e054      	b.n	80076d4 <USB_EPStartXfer+0x86c>
 800762a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800762e:	2b3e      	cmp	r3, #62	; 0x3e
 8007630:	d817      	bhi.n	8007662 <USB_EPStartXfer+0x7fa>
 8007632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007636:	085b      	lsrs	r3, r3, #1
 8007638:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800763c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d004      	beq.n	8007652 <USB_EPStartXfer+0x7ea>
 8007648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764c:	3301      	adds	r3, #1
 800764e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007656:	b29b      	uxth	r3, r3
 8007658:	029b      	lsls	r3, r3, #10
 800765a:	b29a      	uxth	r2, r3
 800765c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800765e:	801a      	strh	r2, [r3, #0]
 8007660:	e038      	b.n	80076d4 <USB_EPStartXfer+0x86c>
 8007662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007666:	095b      	lsrs	r3, r3, #5
 8007668:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800766c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007670:	f003 031f 	and.w	r3, r3, #31
 8007674:	2b00      	cmp	r3, #0
 8007676:	d104      	bne.n	8007682 <USB_EPStartXfer+0x81a>
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767c:	3b01      	subs	r3, #1
 800767e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007686:	b29b      	uxth	r3, r3
 8007688:	029b      	lsls	r3, r3, #10
 800768a:	b29b      	uxth	r3, r3
 800768c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007694:	b29a      	uxth	r2, r3
 8007696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007698:	801a      	strh	r2, [r3, #0]
 800769a:	e01b      	b.n	80076d4 <USB_EPStartXfer+0x86c>
 800769c:	463b      	mov	r3, r7
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	785b      	ldrb	r3, [r3, #1]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d116      	bne.n	80076d4 <USB_EPStartXfer+0x86c>
 80076a6:	1d3b      	adds	r3, r7, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076b4:	4413      	add	r3, r2
 80076b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80076b8:	463b      	mov	r3, r7
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	011a      	lsls	r2, r3, #4
 80076c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076c2:	4413      	add	r3, r2
 80076c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076c8:	677b      	str	r3, [r7, #116]	; 0x74
 80076ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80076d4:	463b      	mov	r3, r7
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	895b      	ldrh	r3, [r3, #10]
 80076da:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80076de:	e097      	b.n	8007810 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076e0:	463b      	mov	r3, r7
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d168      	bne.n	80077bc <USB_EPStartXfer+0x954>
 80076ea:	1d3b      	adds	r3, r7, #4
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076f2:	1d3b      	adds	r3, r7, #4
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	461a      	mov	r2, r3
 80076fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007702:	4413      	add	r3, r2
 8007704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007708:	463b      	mov	r3, r7
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	011a      	lsls	r2, r3, #4
 8007710:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007714:	4413      	add	r3, r2
 8007716:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800771a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800771c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d112      	bne.n	800774a <USB_EPStartXfer+0x8e2>
 8007724:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800772e:	b29a      	uxth	r2, r3
 8007730:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007732:	801a      	strh	r2, [r3, #0]
 8007734:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29b      	uxth	r3, r3
 800773a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800773e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007742:	b29a      	uxth	r2, r3
 8007744:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007746:	801a      	strh	r2, [r3, #0]
 8007748:	e05d      	b.n	8007806 <USB_EPStartXfer+0x99e>
 800774a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800774e:	2b3e      	cmp	r3, #62	; 0x3e
 8007750:	d817      	bhi.n	8007782 <USB_EPStartXfer+0x91a>
 8007752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800775c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d004      	beq.n	8007772 <USB_EPStartXfer+0x90a>
 8007768:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800776c:	3301      	adds	r3, #1
 800776e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007772:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007776:	b29b      	uxth	r3, r3
 8007778:	029b      	lsls	r3, r3, #10
 800777a:	b29a      	uxth	r2, r3
 800777c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800777e:	801a      	strh	r2, [r3, #0]
 8007780:	e041      	b.n	8007806 <USB_EPStartXfer+0x99e>
 8007782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007786:	095b      	lsrs	r3, r3, #5
 8007788:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800778c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007790:	f003 031f 	and.w	r3, r3, #31
 8007794:	2b00      	cmp	r3, #0
 8007796:	d104      	bne.n	80077a2 <USB_EPStartXfer+0x93a>
 8007798:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800779c:	3b01      	subs	r3, #1
 800779e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80077a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	029b      	lsls	r3, r3, #10
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077b8:	801a      	strh	r2, [r3, #0]
 80077ba:	e024      	b.n	8007806 <USB_EPStartXfer+0x99e>
 80077bc:	463b      	mov	r3, r7
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	785b      	ldrb	r3, [r3, #1]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d11f      	bne.n	8007806 <USB_EPStartXfer+0x99e>
 80077c6:	1d3b      	adds	r3, r7, #4
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077ce:	1d3b      	adds	r3, r7, #4
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077de:	4413      	add	r3, r2
 80077e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077e4:	463b      	mov	r3, r7
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	011a      	lsls	r2, r3, #4
 80077ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077f0:	4413      	add	r3, r2
 80077f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077fe:	b29a      	uxth	r2, r3
 8007800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007804:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007806:	463b      	mov	r3, r7
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	891b      	ldrh	r3, [r3, #8]
 800780c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007810:	463b      	mov	r3, r7
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6959      	ldr	r1, [r3, #20]
 8007816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800781a:	b29b      	uxth	r3, r3
 800781c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007820:	1d38      	adds	r0, r7, #4
 8007822:	6800      	ldr	r0, [r0, #0]
 8007824:	f000 fd7e 	bl	8008324 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007828:	463b      	mov	r3, r7
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	785b      	ldrb	r3, [r3, #1]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d122      	bne.n	8007878 <USB_EPStartXfer+0xa10>
 8007832:	1d3b      	adds	r3, r7, #4
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	463b      	mov	r3, r7
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	b29b      	uxth	r3, r3
 8007844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007850:	1d3b      	adds	r3, r7, #4
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	463b      	mov	r3, r7
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	441a      	add	r2, r3
 800785e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800786a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800786e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007872:	b29b      	uxth	r3, r3
 8007874:	8013      	strh	r3, [r2, #0]
 8007876:	e026      	b.n	80078c6 <USB_EPStartXfer+0xa5e>
 8007878:	463b      	mov	r3, r7
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	785b      	ldrb	r3, [r3, #1]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d121      	bne.n	80078c6 <USB_EPStartXfer+0xa5e>
 8007882:	1d3b      	adds	r3, r7, #4
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	463b      	mov	r3, r7
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	b29b      	uxth	r3, r3
 8007894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80078a0:	1d3b      	adds	r3, r7, #4
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	463b      	mov	r3, r7
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	441a      	add	r2, r3
 80078ae:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80078b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80078c6:	1d3b      	adds	r3, r7, #4
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	463b      	mov	r3, r7
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	f107 020e 	add.w	r2, r7, #14
 80078dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e4:	8013      	strh	r3, [r2, #0]
 80078e6:	f107 030e 	add.w	r3, r7, #14
 80078ea:	f107 020e 	add.w	r2, r7, #14
 80078ee:	8812      	ldrh	r2, [r2, #0]
 80078f0:	f082 0210 	eor.w	r2, r2, #16
 80078f4:	801a      	strh	r2, [r3, #0]
 80078f6:	f107 030e 	add.w	r3, r7, #14
 80078fa:	f107 020e 	add.w	r2, r7, #14
 80078fe:	8812      	ldrh	r2, [r2, #0]
 8007900:	f082 0220 	eor.w	r2, r2, #32
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	1d3b      	adds	r3, r7, #4
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	463b      	mov	r3, r7
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	441a      	add	r2, r3
 8007914:	f107 030e 	add.w	r3, r7, #14
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792a:	b29b      	uxth	r3, r3
 800792c:	8013      	strh	r3, [r2, #0]
 800792e:	e3b5      	b.n	800809c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007930:	463b      	mov	r3, r7
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	7b1b      	ldrb	r3, [r3, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	f040 8090 	bne.w	8007a5c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800793c:	463b      	mov	r3, r7
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699a      	ldr	r2, [r3, #24]
 8007942:	463b      	mov	r3, r7
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	429a      	cmp	r2, r3
 800794a:	d90e      	bls.n	800796a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800794c:	463b      	mov	r3, r7
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8007956:	463b      	mov	r3, r7
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	699a      	ldr	r2, [r3, #24]
 800795c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007960:	1ad2      	subs	r2, r2, r3
 8007962:	463b      	mov	r3, r7
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	619a      	str	r2, [r3, #24]
 8007968:	e008      	b.n	800797c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800796a:	463b      	mov	r3, r7
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8007974:	463b      	mov	r3, r7
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2200      	movs	r2, #0
 800797a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800797c:	1d3b      	adds	r3, r7, #4
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007984:	1d3b      	adds	r3, r7, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800798c:	b29b      	uxth	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007994:	4413      	add	r3, r2
 8007996:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800799a:	463b      	mov	r3, r7
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	011a      	lsls	r2, r3, #4
 80079a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079a6:	4413      	add	r3, r2
 80079a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d116      	bne.n	80079e6 <USB_EPStartXfer+0xb7e>
 80079b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079ca:	801a      	strh	r2, [r3, #0]
 80079cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079dc:	b29a      	uxth	r2, r3
 80079de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079e2:	801a      	strh	r2, [r3, #0]
 80079e4:	e32c      	b.n	8008040 <USB_EPStartXfer+0x11d8>
 80079e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ea:	2b3e      	cmp	r3, #62	; 0x3e
 80079ec:	d818      	bhi.n	8007a20 <USB_EPStartXfer+0xbb8>
 80079ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079f2:	085b      	lsrs	r3, r3, #1
 80079f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d004      	beq.n	8007a0e <USB_EPStartXfer+0xba6>
 8007a04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a08:	3301      	adds	r3, #1
 8007a0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	029b      	lsls	r3, r3, #10
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a1c:	801a      	strh	r2, [r3, #0]
 8007a1e:	e30f      	b.n	8008040 <USB_EPStartXfer+0x11d8>
 8007a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a24:	095b      	lsrs	r3, r3, #5
 8007a26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a2e:	f003 031f 	and.w	r3, r3, #31
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d104      	bne.n	8007a40 <USB_EPStartXfer+0xbd8>
 8007a36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	029b      	lsls	r3, r3, #10
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a58:	801a      	strh	r2, [r3, #0]
 8007a5a:	e2f1      	b.n	8008040 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a5c:	463b      	mov	r3, r7
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	78db      	ldrb	r3, [r3, #3]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	f040 818f 	bne.w	8007d86 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007a68:	463b      	mov	r3, r7
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	785b      	ldrb	r3, [r3, #1]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d175      	bne.n	8007b5e <USB_EPStartXfer+0xcf6>
 8007a72:	1d3b      	adds	r3, r7, #4
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a7a:	1d3b      	adds	r3, r7, #4
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a90:	463b      	mov	r3, r7
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	011a      	lsls	r2, r3, #4
 8007a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007aa6:	463b      	mov	r3, r7
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d116      	bne.n	8007ade <USB_EPStartXfer+0xc76>
 8007ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ac2:	801a      	strh	r2, [r3, #0]
 8007ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ada:	801a      	strh	r2, [r3, #0]
 8007adc:	e065      	b.n	8007baa <USB_EPStartXfer+0xd42>
 8007ade:	463b      	mov	r3, r7
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ae6:	d81a      	bhi.n	8007b1e <USB_EPStartXfer+0xcb6>
 8007ae8:	463b      	mov	r3, r7
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	085b      	lsrs	r3, r3, #1
 8007af0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007af4:	463b      	mov	r3, r7
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d004      	beq.n	8007b0c <USB_EPStartXfer+0xca4>
 8007b02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b06:	3301      	adds	r3, #1
 8007b08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	029b      	lsls	r3, r3, #10
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b1a:	801a      	strh	r2, [r3, #0]
 8007b1c:	e045      	b.n	8007baa <USB_EPStartXfer+0xd42>
 8007b1e:	463b      	mov	r3, r7
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	095b      	lsrs	r3, r3, #5
 8007b26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b2a:	463b      	mov	r3, r7
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	f003 031f 	and.w	r3, r3, #31
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d104      	bne.n	8007b42 <USB_EPStartXfer+0xcda>
 8007b38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	029b      	lsls	r3, r3, #10
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b5a:	801a      	strh	r2, [r3, #0]
 8007b5c:	e025      	b.n	8007baa <USB_EPStartXfer+0xd42>
 8007b5e:	463b      	mov	r3, r7
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	785b      	ldrb	r3, [r3, #1]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d120      	bne.n	8007baa <USB_EPStartXfer+0xd42>
 8007b68:	1d3b      	adds	r3, r7, #4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b70:	1d3b      	adds	r3, r7, #4
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b80:	4413      	add	r3, r2
 8007b82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b86:	463b      	mov	r3, r7
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	011a      	lsls	r2, r3, #4
 8007b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b92:	4413      	add	r3, r2
 8007b94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b9c:	463b      	mov	r3, r7
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ba8:	801a      	strh	r2, [r3, #0]
 8007baa:	1d3b      	adds	r3, r7, #4
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	785b      	ldrb	r3, [r3, #1]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d175      	bne.n	8007ca8 <USB_EPStartXfer+0xe40>
 8007bbc:	1d3b      	adds	r3, r7, #4
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007bc4:	1d3b      	adds	r3, r7, #4
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007bda:	463b      	mov	r3, r7
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	011a      	lsls	r2, r3, #4
 8007be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007be6:	4413      	add	r3, r2
 8007be8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bf0:	463b      	mov	r3, r7
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d116      	bne.n	8007c28 <USB_EPStartXfer+0xdc0>
 8007bfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c0c:	801a      	strh	r2, [r3, #0]
 8007c0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c24:	801a      	strh	r2, [r3, #0]
 8007c26:	e061      	b.n	8007cec <USB_EPStartXfer+0xe84>
 8007c28:	463b      	mov	r3, r7
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c30:	d81a      	bhi.n	8007c68 <USB_EPStartXfer+0xe00>
 8007c32:	463b      	mov	r3, r7
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	085b      	lsrs	r3, r3, #1
 8007c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c3e:	463b      	mov	r3, r7
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d004      	beq.n	8007c56 <USB_EPStartXfer+0xdee>
 8007c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c50:	3301      	adds	r3, #1
 8007c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	029b      	lsls	r3, r3, #10
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c64:	801a      	strh	r2, [r3, #0]
 8007c66:	e041      	b.n	8007cec <USB_EPStartXfer+0xe84>
 8007c68:	463b      	mov	r3, r7
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c74:	463b      	mov	r3, r7
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f003 031f 	and.w	r3, r3, #31
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d104      	bne.n	8007c8c <USB_EPStartXfer+0xe24>
 8007c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c86:	3b01      	subs	r3, #1
 8007c88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	029b      	lsls	r3, r3, #10
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	e021      	b.n	8007cec <USB_EPStartXfer+0xe84>
 8007ca8:	463b      	mov	r3, r7
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d11c      	bne.n	8007cec <USB_EPStartXfer+0xe84>
 8007cb2:	1d3b      	adds	r3, r7, #4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cc8:	463b      	mov	r3, r7
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	011a      	lsls	r2, r3, #4
 8007cd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007cde:	463b      	mov	r3, r7
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cea:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007cec:	463b      	mov	r3, r7
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 81a4 	beq.w	8008040 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007cf8:	1d3b      	adds	r3, r7, #4
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	463b      	mov	r3, r7
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d0c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <USB_EPStartXfer+0xebc>
 8007d18:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10d      	bne.n	8007d40 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d24:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f040 8187 	bne.w	8008040 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d32:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f040 8180 	bne.w	8008040 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007d40:	1d3b      	adds	r3, r7, #4
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	463b      	mov	r3, r7
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007d5e:	1d3b      	adds	r3, r7, #4
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	463b      	mov	r3, r7
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	441a      	add	r2, r3
 8007d6c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	8013      	strh	r3, [r2, #0]
 8007d84:	e15c      	b.n	8008040 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007d86:	463b      	mov	r3, r7
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	78db      	ldrb	r3, [r3, #3]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	f040 8155 	bne.w	800803c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007d92:	463b      	mov	r3, r7
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	699a      	ldr	r2, [r3, #24]
 8007d98:	463b      	mov	r3, r7
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d90e      	bls.n	8007dc0 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8007da2:	463b      	mov	r3, r7
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8007dac:	463b      	mov	r3, r7
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	699a      	ldr	r2, [r3, #24]
 8007db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007db6:	1ad2      	subs	r2, r2, r3
 8007db8:	463b      	mov	r3, r7
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	619a      	str	r2, [r3, #24]
 8007dbe:	e008      	b.n	8007dd2 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8007dc0:	463b      	mov	r3, r7
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8007dca:	463b      	mov	r3, r7
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007dd2:	463b      	mov	r3, r7
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	785b      	ldrb	r3, [r3, #1]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d16f      	bne.n	8007ebc <USB_EPStartXfer+0x1054>
 8007ddc:	1d3b      	adds	r3, r7, #4
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007de4:	1d3b      	adds	r3, r7, #4
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	461a      	mov	r2, r3
 8007df0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007df4:	4413      	add	r3, r2
 8007df6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	011a      	lsls	r2, r3, #4
 8007e02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e06:	4413      	add	r3, r2
 8007e08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d116      	bne.n	8007e46 <USB_EPStartXfer+0xfde>
 8007e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e2a:	801a      	strh	r2, [r3, #0]
 8007e2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e42:	801a      	strh	r2, [r3, #0]
 8007e44:	e05f      	b.n	8007f06 <USB_EPStartXfer+0x109e>
 8007e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e4a:	2b3e      	cmp	r3, #62	; 0x3e
 8007e4c:	d818      	bhi.n	8007e80 <USB_EPStartXfer+0x1018>
 8007e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d004      	beq.n	8007e6e <USB_EPStartXfer+0x1006>
 8007e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e68:	3301      	adds	r3, #1
 8007e6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	029b      	lsls	r3, r3, #10
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e7c:	801a      	strh	r2, [r3, #0]
 8007e7e:	e042      	b.n	8007f06 <USB_EPStartXfer+0x109e>
 8007e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e84:	095b      	lsrs	r3, r3, #5
 8007e86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e8e:	f003 031f 	and.w	r3, r3, #31
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d104      	bne.n	8007ea0 <USB_EPStartXfer+0x1038>
 8007e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	029b      	lsls	r3, r3, #10
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007eb8:	801a      	strh	r2, [r3, #0]
 8007eba:	e024      	b.n	8007f06 <USB_EPStartXfer+0x109e>
 8007ebc:	463b      	mov	r3, r7
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d11f      	bne.n	8007f06 <USB_EPStartXfer+0x109e>
 8007ec6:	1d3b      	adds	r3, r7, #4
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ece:	1d3b      	adds	r3, r7, #4
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ede:	4413      	add	r3, r2
 8007ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	011a      	lsls	r2, r3, #4
 8007eec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f04:	801a      	strh	r2, [r3, #0]
 8007f06:	1d3b      	adds	r3, r7, #4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f0e:	463b      	mov	r3, r7
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	785b      	ldrb	r3, [r3, #1]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d16f      	bne.n	8007ff8 <USB_EPStartXfer+0x1190>
 8007f18:	1d3b      	adds	r3, r7, #4
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f20:	1d3b      	adds	r3, r7, #4
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f30:	4413      	add	r3, r2
 8007f32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f36:	463b      	mov	r3, r7
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	011a      	lsls	r2, r3, #4
 8007f3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f42:	4413      	add	r3, r2
 8007f44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d116      	bne.n	8007f82 <USB_EPStartXfer+0x111a>
 8007f54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f66:	801a      	strh	r2, [r3, #0]
 8007f68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f7e:	801a      	strh	r2, [r3, #0]
 8007f80:	e05e      	b.n	8008040 <USB_EPStartXfer+0x11d8>
 8007f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f86:	2b3e      	cmp	r3, #62	; 0x3e
 8007f88:	d818      	bhi.n	8007fbc <USB_EPStartXfer+0x1154>
 8007f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <USB_EPStartXfer+0x1142>
 8007fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	029b      	lsls	r3, r3, #10
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007fb8:	801a      	strh	r2, [r3, #0]
 8007fba:	e041      	b.n	8008040 <USB_EPStartXfer+0x11d8>
 8007fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fc0:	095b      	lsrs	r3, r3, #5
 8007fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fca:	f003 031f 	and.w	r3, r3, #31
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d104      	bne.n	8007fdc <USB_EPStartXfer+0x1174>
 8007fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	029b      	lsls	r3, r3, #10
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ff4:	801a      	strh	r2, [r3, #0]
 8007ff6:	e023      	b.n	8008040 <USB_EPStartXfer+0x11d8>
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d11e      	bne.n	8008040 <USB_EPStartXfer+0x11d8>
 8008002:	1d3b      	adds	r3, r7, #4
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800800a:	b29b      	uxth	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008012:	4413      	add	r3, r2
 8008014:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008018:	463b      	mov	r3, r7
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	011a      	lsls	r2, r3, #4
 8008020:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008024:	4413      	add	r3, r2
 8008026:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800802a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800802e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008032:	b29a      	uxth	r2, r3
 8008034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008038:	801a      	strh	r2, [r3, #0]
 800803a:	e001      	b.n	8008040 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e02e      	b.n	800809e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008040:	1d3b      	adds	r3, r7, #4
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	463b      	mov	r3, r7
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	881b      	ldrh	r3, [r3, #0]
 8008050:	b29b      	uxth	r3, r3
 8008052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800805e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008062:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008066:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800806a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800806e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008072:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008076:	1d3b      	adds	r3, r7, #4
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	463b      	mov	r3, r7
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	441a      	add	r2, r3
 8008084:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800808c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008098:	b29b      	uxth	r3, r3
 800809a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	785b      	ldrb	r3, [r3, #1]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d020      	beq.n	80080fc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080d0:	81bb      	strh	r3, [r7, #12]
 80080d2:	89bb      	ldrh	r3, [r7, #12]
 80080d4:	f083 0310 	eor.w	r3, r3, #16
 80080d8:	81bb      	strh	r3, [r7, #12]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	441a      	add	r2, r3
 80080e4:	89bb      	ldrh	r3, [r7, #12]
 80080e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	8013      	strh	r3, [r2, #0]
 80080fa:	e01f      	b.n	800813c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800810e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008112:	81fb      	strh	r3, [r7, #14]
 8008114:	89fb      	ldrh	r3, [r7, #14]
 8008116:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800811a:	81fb      	strh	r3, [r7, #14]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	441a      	add	r2, r3
 8008126:	89fb      	ldrh	r3, [r7, #14]
 8008128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800812c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008138:	b29b      	uxth	r3, r3
 800813a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	bc80      	pop	{r7}
 8008146:	4770      	bx	lr

08008148 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	7b1b      	ldrb	r3, [r3, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f040 809d 	bne.w	8008296 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d04c      	beq.n	80081fe <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	823b      	strh	r3, [r7, #16]
 8008172:	8a3b      	ldrh	r3, [r7, #16]
 8008174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008178:	2b00      	cmp	r3, #0
 800817a:	d01b      	beq.n	80081b4 <USB_EPClearStall+0x6c>
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	b29b      	uxth	r3, r3
 800818a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800818e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008192:	81fb      	strh	r3, [r7, #14]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	441a      	add	r2, r3
 800819e:	89fb      	ldrh	r3, [r7, #14]
 80081a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	78db      	ldrb	r3, [r3, #3]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d06c      	beq.n	8008296 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081d2:	81bb      	strh	r3, [r7, #12]
 80081d4:	89bb      	ldrh	r3, [r7, #12]
 80081d6:	f083 0320 	eor.w	r3, r3, #32
 80081da:	81bb      	strh	r3, [r7, #12]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	441a      	add	r2, r3
 80081e6:	89bb      	ldrh	r3, [r7, #12]
 80081e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	8013      	strh	r3, [r2, #0]
 80081fc:	e04b      	b.n	8008296 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	82fb      	strh	r3, [r7, #22]
 800820c:	8afb      	ldrh	r3, [r7, #22]
 800820e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d01b      	beq.n	800824e <USB_EPClearStall+0x106>
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822c:	82bb      	strh	r3, [r7, #20]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	441a      	add	r2, r3
 8008238:	8abb      	ldrh	r3, [r7, #20]
 800823a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800823e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008242:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800824a:	b29b      	uxth	r3, r3
 800824c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	881b      	ldrh	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008264:	827b      	strh	r3, [r7, #18]
 8008266:	8a7b      	ldrh	r3, [r7, #18]
 8008268:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800826c:	827b      	strh	r3, [r7, #18]
 800826e:	8a7b      	ldrh	r3, [r7, #18]
 8008270:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008274:	827b      	strh	r3, [r7, #18]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	441a      	add	r2, r3
 8008280:	8a7b      	ldrh	r3, [r7, #18]
 8008282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800828a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800828e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008292:	b29b      	uxth	r3, r3
 8008294:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	371c      	adds	r7, #28
 800829c:	46bd      	mov	sp, r7
 800829e:	bc80      	pop	{r7}
 80082a0:	4770      	bx	lr

080082a2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80082ae:	78fb      	ldrb	r3, [r7, #3]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d103      	bne.n	80082bc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2280      	movs	r2, #128	; 0x80
 80082b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bc80      	pop	{r7}
 80082c6:	4770      	bx	lr

080082c8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bc80      	pop	{r7}
 80082da:	4770      	bx	lr

080082dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bc80      	pop	{r7}
 80082ee:	4770      	bx	lr

080082f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80082fe:	b29b      	uxth	r3, r3
 8008300:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008302:	68fb      	ldr	r3, [r7, #12]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	bc80      	pop	{r7}
 800830c:	4770      	bx	lr

0800830e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008324:	b480      	push	{r7}
 8008326:	b08d      	sub	sp, #52	; 0x34
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	4611      	mov	r1, r2
 8008330:	461a      	mov	r2, r3
 8008332:	460b      	mov	r3, r1
 8008334:	80fb      	strh	r3, [r7, #6]
 8008336:	4613      	mov	r3, r2
 8008338:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800833a:	88bb      	ldrh	r3, [r7, #4]
 800833c:	3301      	adds	r3, #1
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800834a:	88fb      	ldrh	r3, [r7, #6]
 800834c:	005a      	lsls	r2, r3, #1
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4413      	add	r3, r2
 8008352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800835c:	e01e      	b.n	800839c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	3301      	adds	r3, #1
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	b29b      	uxth	r3, r3
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	b29b      	uxth	r3, r3
 8008374:	461a      	mov	r2, r3
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	4313      	orrs	r3, r2
 800837a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	b29a      	uxth	r2, r3
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008386:	3302      	adds	r3, #2
 8008388:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838c:	3302      	adds	r3, #2
 800838e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	3301      	adds	r3, #1
 8008394:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008398:	3b01      	subs	r3, #1
 800839a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1dd      	bne.n	800835e <USB_WritePMA+0x3a>
  }
}
 80083a2:	bf00      	nop
 80083a4:	3734      	adds	r7, #52	; 0x34
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr

080083ac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b08b      	sub	sp, #44	; 0x2c
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4611      	mov	r1, r2
 80083b8:	461a      	mov	r2, r3
 80083ba:	460b      	mov	r3, r1
 80083bc:	80fb      	strh	r3, [r7, #6]
 80083be:	4613      	mov	r3, r2
 80083c0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80083c2:	88bb      	ldrh	r3, [r7, #4]
 80083c4:	085b      	lsrs	r3, r3, #1
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	005a      	lsls	r2, r3, #1
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083de:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	627b      	str	r3, [r7, #36]	; 0x24
 80083e4:	e01b      	b.n	800841e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80083ee:	6a3b      	ldr	r3, [r7, #32]
 80083f0:	3302      	adds	r3, #2
 80083f2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	3301      	adds	r3, #1
 8008400:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	0a1b      	lsrs	r3, r3, #8
 8008406:	b2da      	uxtb	r2, r3
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	3301      	adds	r3, #1
 8008410:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	3302      	adds	r3, #2
 8008416:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	3b01      	subs	r3, #1
 800841c:	627b      	str	r3, [r7, #36]	; 0x24
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e0      	bne.n	80083e6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008424:	88bb      	ldrh	r3, [r7, #4]
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	b29b      	uxth	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	d007      	beq.n	8008440 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	b29b      	uxth	r3, r3
 8008436:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	b2da      	uxtb	r2, r3
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	701a      	strb	r2, [r3, #0]
  }
}
 8008440:	bf00      	nop
 8008442:	372c      	adds	r7, #44	; 0x2c
 8008444:	46bd      	mov	sp, r7
 8008446:	bc80      	pop	{r7}
 8008448:	4770      	bx	lr

0800844a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	460b      	mov	r3, r1
 8008454:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	7c1b      	ldrb	r3, [r3, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d115      	bne.n	800848e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008466:	2202      	movs	r2, #2
 8008468:	2181      	movs	r1, #129	; 0x81
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f001 fe79 	bl	800a162 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008476:	f44f 7300 	mov.w	r3, #512	; 0x200
 800847a:	2202      	movs	r2, #2
 800847c:	2101      	movs	r1, #1
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f001 fe6f 	bl	800a162 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800848c:	e012      	b.n	80084b4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800848e:	2340      	movs	r3, #64	; 0x40
 8008490:	2202      	movs	r2, #2
 8008492:	2181      	movs	r1, #129	; 0x81
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f001 fe64 	bl	800a162 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80084a0:	2340      	movs	r3, #64	; 0x40
 80084a2:	2202      	movs	r2, #2
 80084a4:	2101      	movs	r1, #1
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 fe5b 	bl	800a162 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80084b4:	2308      	movs	r3, #8
 80084b6:	2203      	movs	r2, #3
 80084b8:	2182      	movs	r1, #130	; 0x82
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 fe51 	bl	800a162 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084c6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80084ca:	f001 ff71 	bl	800a3b0 <USBD_static_malloc>
 80084ce:	4602      	mov	r2, r0
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d102      	bne.n	80084e6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80084e0:	2301      	movs	r3, #1
 80084e2:	73fb      	strb	r3, [r7, #15]
 80084e4:	e026      	b.n	8008534 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ec:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2200      	movs	r2, #0
 8008504:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	7c1b      	ldrb	r3, [r3, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d109      	bne.n	8008524 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800851a:	2101      	movs	r1, #1
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 ff11 	bl	800a344 <USBD_LL_PrepareReceive>
 8008522:	e007      	b.n	8008534 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800852a:	2340      	movs	r3, #64	; 0x40
 800852c:	2101      	movs	r1, #1
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f001 ff08 	bl	800a344 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008534:	7bfb      	ldrb	r3, [r7, #15]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	460b      	mov	r3, r1
 8008548:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800854e:	2181      	movs	r1, #129	; 0x81
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 fe2c 	bl	800a1ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800855c:	2101      	movs	r1, #1
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 fe25 	bl	800a1ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800856c:	2182      	movs	r1, #130	; 0x82
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f001 fe1d 	bl	800a1ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00e      	beq.n	80085a2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008594:	4618      	mov	r0, r3
 8008596:	f001 ff17 	bl	800a3c8 <USBD_static_free>
    pdev->pClassData = NULL;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085bc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d039      	beq.n	800864a <USBD_CDC_Setup+0x9e>
 80085d6:	2b20      	cmp	r3, #32
 80085d8:	d17c      	bne.n	80086d4 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	88db      	ldrh	r3, [r3, #6]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d029      	beq.n	8008636 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	b25b      	sxtb	r3, r3
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	da11      	bge.n	8008610 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80085f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	88d2      	ldrh	r2, [r2, #6]
 80085fe:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008600:	6939      	ldr	r1, [r7, #16]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	88db      	ldrh	r3, [r3, #6]
 8008606:	461a      	mov	r2, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 f9f9 	bl	8009a00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800860e:	e068      	b.n	80086e2 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	785a      	ldrb	r2, [r3, #1]
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	88db      	ldrh	r3, [r3, #6]
 800861e:	b2da      	uxtb	r2, r3
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008626:	6939      	ldr	r1, [r7, #16]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	88db      	ldrh	r3, [r3, #6]
 800862c:	461a      	mov	r2, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 fa14 	bl	8009a5c <USBD_CtlPrepareRx>
      break;
 8008634:	e055      	b.n	80086e2 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	7850      	ldrb	r0, [r2, #1]
 8008642:	2200      	movs	r2, #0
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	4798      	blx	r3
      break;
 8008648:	e04b      	b.n	80086e2 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	2b0a      	cmp	r3, #10
 8008650:	d017      	beq.n	8008682 <USBD_CDC_Setup+0xd6>
 8008652:	2b0b      	cmp	r3, #11
 8008654:	d029      	beq.n	80086aa <USBD_CDC_Setup+0xfe>
 8008656:	2b00      	cmp	r3, #0
 8008658:	d133      	bne.n	80086c2 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008660:	2b03      	cmp	r3, #3
 8008662:	d107      	bne.n	8008674 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008664:	f107 030c 	add.w	r3, r7, #12
 8008668:	2202      	movs	r2, #2
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 f9c7 	bl	8009a00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008672:	e02e      	b.n	80086d2 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f001 f958 	bl	800992c <USBD_CtlError>
            ret = USBD_FAIL;
 800867c:	2302      	movs	r3, #2
 800867e:	75fb      	strb	r3, [r7, #23]
          break;
 8008680:	e027      	b.n	80086d2 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008688:	2b03      	cmp	r3, #3
 800868a:	d107      	bne.n	800869c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800868c:	f107 030f 	add.w	r3, r7, #15
 8008690:	2201      	movs	r2, #1
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 f9b3 	bl	8009a00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800869a:	e01a      	b.n	80086d2 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f001 f944 	bl	800992c <USBD_CtlError>
            ret = USBD_FAIL;
 80086a4:	2302      	movs	r3, #2
 80086a6:	75fb      	strb	r3, [r7, #23]
          break;
 80086a8:	e013      	b.n	80086d2 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d00d      	beq.n	80086d0 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 f938 	bl	800992c <USBD_CtlError>
            ret = USBD_FAIL;
 80086bc:	2302      	movs	r3, #2
 80086be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80086c0:	e006      	b.n	80086d0 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 f931 	bl	800992c <USBD_CtlError>
          ret = USBD_FAIL;
 80086ca:	2302      	movs	r3, #2
 80086cc:	75fb      	strb	r3, [r7, #23]
          break;
 80086ce:	e000      	b.n	80086d2 <USBD_CDC_Setup+0x126>
          break;
 80086d0:	bf00      	nop
      }
      break;
 80086d2:	e006      	b.n	80086e2 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f001 f928 	bl	800992c <USBD_CtlError>
      ret = USBD_FAIL;
 80086dc:	2302      	movs	r3, #2
 80086de:	75fb      	strb	r3, [r7, #23]
      break;
 80086e0:	bf00      	nop
  }

  return ret;
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fe:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008706:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870e:	2b00      	cmp	r3, #0
 8008710:	d03a      	beq.n	8008788 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008712:	78fa      	ldrb	r2, [r7, #3]
 8008714:	6879      	ldr	r1, [r7, #4]
 8008716:	4613      	mov	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	440b      	add	r3, r1
 8008720:	331c      	adds	r3, #28
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d029      	beq.n	800877c <USBD_CDC_DataIn+0x90>
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	4613      	mov	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	440b      	add	r3, r1
 8008736:	331c      	adds	r3, #28
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	78f9      	ldrb	r1, [r7, #3]
 800873c:	68b8      	ldr	r0, [r7, #8]
 800873e:	460b      	mov	r3, r1
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	440b      	add	r3, r1
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	4403      	add	r3, r0
 8008748:	3338      	adds	r3, #56	; 0x38
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008750:	fb03 f301 	mul.w	r3, r3, r1
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	d110      	bne.n	800877c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800875a:	78fa      	ldrb	r2, [r7, #3]
 800875c:	6879      	ldr	r1, [r7, #4]
 800875e:	4613      	mov	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	440b      	add	r3, r1
 8008768:	331c      	adds	r3, #28
 800876a:	2200      	movs	r2, #0
 800876c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800876e:	78f9      	ldrb	r1, [r7, #3]
 8008770:	2300      	movs	r3, #0
 8008772:	2200      	movs	r2, #0
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f001 fdc2 	bl	800a2fe <USBD_LL_Transmit>
 800877a:	e003      	b.n	8008784 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	e000      	b.n	800878a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008788:	2302      	movs	r3, #2
  }
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b084      	sub	sp, #16
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	460b      	mov	r3, r1
 800879c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 fded 	bl	800a38a <USBD_LL_GetRxDataSize>
 80087b0:	4602      	mov	r2, r0
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00d      	beq.n	80087de <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80087d6:	4611      	mov	r1, r2
 80087d8:	4798      	blx	r3

    return USBD_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	e000      	b.n	80087e0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80087de:	2302      	movs	r3, #2
  }
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d015      	beq.n	800882e <USBD_CDC_EP0_RxReady+0x46>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008808:	2bff      	cmp	r3, #255	; 0xff
 800880a:	d010      	beq.n	800882e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800881a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008822:	b292      	uxth	r2, r2
 8008824:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	22ff      	movs	r2, #255	; 0xff
 800882a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2243      	movs	r2, #67	; 0x43
 8008844:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008846:	4b03      	ldr	r3, [pc, #12]	; (8008854 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	bc80      	pop	{r7}
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	2000009c 	.word	0x2000009c

08008858 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2243      	movs	r2, #67	; 0x43
 8008864:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008866:	4b03      	ldr	r3, [pc, #12]	; (8008874 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	bc80      	pop	{r7}
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20000058 	.word	0x20000058

08008878 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2243      	movs	r2, #67	; 0x43
 8008884:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008886:	4b03      	ldr	r3, [pc, #12]	; (8008894 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008888:	4618      	mov	r0, r3
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	bc80      	pop	{r7}
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	200000e0 	.word	0x200000e0

08008898 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	220a      	movs	r2, #10
 80088a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80088a6:	4b03      	ldr	r3, [pc, #12]	; (80088b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bc80      	pop	{r7}
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	20000014 	.word	0x20000014

080088b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80088c2:	2302      	movs	r3, #2
 80088c4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	bc80      	pop	{r7}
 80088e2:	4770      	bx	lr

080088e4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	4613      	mov	r3, r2
 80088f0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008902:	88fa      	ldrh	r2, [r7, #6]
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	371c      	adds	r7, #28
 8008910:	46bd      	mov	sp, r7
 8008912:	bc80      	pop	{r7}
 8008914:	4770      	bx	lr

08008916 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008916:	b480      	push	{r7}
 8008918:	b085      	sub	sp, #20
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008926:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	683a      	ldr	r2, [r7, #0]
 800892c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	bc80      	pop	{r7}
 800893a:	4770      	bx	lr

0800893c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800894a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008952:	2b00      	cmp	r3, #0
 8008954:	d01c      	beq.n	8008990 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800895c:	2b00      	cmp	r3, #0
 800895e:	d115      	bne.n	800898c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800897e:	b29b      	uxth	r3, r3
 8008980:	2181      	movs	r1, #129	; 0x81
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f001 fcbb 	bl	800a2fe <USBD_LL_Transmit>

      return USBD_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	e002      	b.n	8008992 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800898c:	2301      	movs	r3, #1
 800898e:	e000      	b.n	8008992 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008990:	2302      	movs	r3, #2
  }
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d017      	beq.n	80089e4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	7c1b      	ldrb	r3, [r3, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d109      	bne.n	80089d0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089c6:	2101      	movs	r1, #1
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 fcbb 	bl	800a344 <USBD_LL_PrepareReceive>
 80089ce:	e007      	b.n	80089e0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089d6:	2340      	movs	r3, #64	; 0x40
 80089d8:	2101      	movs	r1, #1
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f001 fcb2 	bl	800a344 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	e000      	b.n	80089e6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80089e4:	2302      	movs	r3, #2
  }
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	4613      	mov	r3, r2
 80089fa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008a02:	2302      	movs	r3, #2
 8008a04:	e01a      	b.n	8008a3c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	79fa      	ldrb	r2, [r7, #7]
 8008a32:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f001 fb1f 	bl	800a078 <USBD_LL_Init>

  return USBD_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d006      	beq.n	8008a66 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]
 8008a64:	e001      	b.n	8008a6a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008a66:	2302      	movs	r3, #2
 8008a68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bc80      	pop	{r7}
 8008a74:	4770      	bx	lr

08008a76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 fb54 	bl	800a12c <USBD_LL_Start>

  return USBD_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bc80      	pop	{r7}
 8008aa0:	4770      	bx	lr

08008aa2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00c      	beq.n	8008ad6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	78fa      	ldrb	r2, [r7, #3]
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	4798      	blx	r3
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	78fa      	ldrb	r2, [r7, #3]
 8008af6:	4611      	mov	r1, r2
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	4798      	blx	r3

  return USBD_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b082      	sub	sp, #8
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fecb 	bl	80098b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008b3a:	f003 031f 	and.w	r3, r3, #31
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d00c      	beq.n	8008b5c <USBD_LL_SetupStage+0x56>
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d302      	bcc.n	8008b4c <USBD_LL_SetupStage+0x46>
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d010      	beq.n	8008b6c <USBD_LL_SetupStage+0x66>
 8008b4a:	e017      	b.n	8008b7c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f9cb 	bl	8008ef0 <USBD_StdDevReq>
      break;
 8008b5a:	e01a      	b.n	8008b92 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fa2d 	bl	8008fc4 <USBD_StdItfReq>
      break;
 8008b6a:	e012      	b.n	8008b92 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fa6b 	bl	8009050 <USBD_StdEPReq>
      break;
 8008b7a:	e00a      	b.n	8008b92 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008b82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f001 fb2e 	bl	800a1ec <USBD_LL_StallEP>
      break;
 8008b90:	bf00      	nop
  }

  return USBD_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008baa:	7afb      	ldrb	r3, [r7, #11]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d14b      	bne.n	8008c48 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008bb6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d134      	bne.n	8008c2c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d919      	bls.n	8008c02 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	68da      	ldr	r2, [r3, #12]
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	1ad2      	subs	r2, r2, r3
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d203      	bcs.n	8008bf0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	e002      	b.n	8008bf6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 ff4c 	bl	8009a98 <USBD_CtlContinueRx>
 8008c00:	e038      	b.n	8008c74 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d105      	bne.n	8008c24 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 ff49 	bl	8009abc <USBD_CtlSendStatus>
 8008c2a:	e023      	b.n	8008c74 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c32:	2b05      	cmp	r3, #5
 8008c34:	d11e      	bne.n	8008c74 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008c3e:	2100      	movs	r1, #0
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f001 fad3 	bl	800a1ec <USBD_LL_StallEP>
 8008c46:	e015      	b.n	8008c74 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00d      	beq.n	8008c70 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d108      	bne.n	8008c70 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	7afa      	ldrb	r2, [r7, #11]
 8008c68:	4611      	mov	r1, r2
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	4798      	blx	r3
 8008c6e:	e001      	b.n	8008c74 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c70:	2302      	movs	r3, #2
 8008c72:	e000      	b.n	8008c76 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b086      	sub	sp, #24
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	460b      	mov	r3, r1
 8008c88:	607a      	str	r2, [r7, #4]
 8008c8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008c8c:	7afb      	ldrb	r3, [r7, #11]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d17f      	bne.n	8008d92 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3314      	adds	r3, #20
 8008c96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d15c      	bne.n	8008d5c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	68da      	ldr	r2, [r3, #12]
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d915      	bls.n	8008cda <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	1ad2      	subs	r2, r2, r3
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6879      	ldr	r1, [r7, #4]
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 feb6 	bl	8009a38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ccc:	2300      	movs	r3, #0
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f001 fb36 	bl	800a344 <USBD_LL_PrepareReceive>
 8008cd8:	e04e      	b.n	8008d78 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	6912      	ldr	r2, [r2, #16]
 8008ce2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ce6:	fb02 f201 	mul.w	r2, r2, r1
 8008cea:	1a9b      	subs	r3, r3, r2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d11c      	bne.n	8008d2a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	689a      	ldr	r2, [r3, #8]
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d316      	bcc.n	8008d2a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d20f      	bcs.n	8008d2a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 fe92 	bl	8009a38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2100      	movs	r1, #0
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f001 fb0e 	bl	800a344 <USBD_LL_PrepareReceive>
 8008d28:	e026      	b.n	8008d78 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00a      	beq.n	8008d4c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d105      	bne.n	8008d4c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008d4c:	2180      	movs	r1, #128	; 0x80
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f001 fa4c 	bl	800a1ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f000 fec4 	bl	8009ae2 <USBD_CtlReceiveStatus>
 8008d5a:	e00d      	b.n	8008d78 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	d004      	beq.n	8008d70 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d103      	bne.n	8008d78 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008d70:	2180      	movs	r1, #128	; 0x80
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f001 fa3a 	bl	800a1ec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d11d      	bne.n	8008dbe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f7ff fe83 	bl	8008a8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d90:	e015      	b.n	8008dbe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00d      	beq.n	8008dba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d108      	bne.n	8008dba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	7afa      	ldrb	r2, [r7, #11]
 8008db2:	4611      	mov	r1, r2
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	4798      	blx	r3
 8008db8:	e001      	b.n	8008dbe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e000      	b.n	8008dc0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dd0:	2340      	movs	r3, #64	; 0x40
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f001 f9c3 	bl	800a162 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2240      	movs	r2, #64	; 0x40
 8008de8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dec:	2340      	movs	r3, #64	; 0x40
 8008dee:	2200      	movs	r2, #0
 8008df0:	2180      	movs	r1, #128	; 0x80
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f001 f9b5 	bl	800a162 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2240      	movs	r2, #64	; 0x40
 8008e02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d009      	beq.n	8008e40 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	6852      	ldr	r2, [r2, #4]
 8008e38:	b2d2      	uxtb	r2, r2
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	4798      	blx	r3
  }

  return USBD_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b083      	sub	sp, #12
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	460b      	mov	r3, r1
 8008e54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	78fa      	ldrb	r2, [r7, #3]
 8008e5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bc80      	pop	{r7}
 8008e66:	4770      	bx	lr

08008e68 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2204      	movs	r2, #4
 8008e80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bc80      	pop	{r7}
 8008e8e:	4770      	bx	lr

08008e90 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	d105      	bne.n	8008eae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bc80      	pop	{r7}
 8008eb8:	4770      	bx	lr

08008eba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec8:	2b03      	cmp	r3, #3
 8008eca:	d10b      	bne.n	8008ee4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	d004      	beq.n	8008f14 <USBD_StdDevReq+0x24>
 8008f0a:	2b40      	cmp	r3, #64	; 0x40
 8008f0c:	d002      	beq.n	8008f14 <USBD_StdDevReq+0x24>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d008      	beq.n	8008f24 <USBD_StdDevReq+0x34>
 8008f12:	e04c      	b.n	8008fae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	4798      	blx	r3
      break;
 8008f22:	e049      	b.n	8008fb8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	785b      	ldrb	r3, [r3, #1]
 8008f28:	2b09      	cmp	r3, #9
 8008f2a:	d83a      	bhi.n	8008fa2 <USBD_StdDevReq+0xb2>
 8008f2c:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <USBD_StdDevReq+0x44>)
 8008f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f32:	bf00      	nop
 8008f34:	08008f85 	.word	0x08008f85
 8008f38:	08008f99 	.word	0x08008f99
 8008f3c:	08008fa3 	.word	0x08008fa3
 8008f40:	08008f8f 	.word	0x08008f8f
 8008f44:	08008fa3 	.word	0x08008fa3
 8008f48:	08008f67 	.word	0x08008f67
 8008f4c:	08008f5d 	.word	0x08008f5d
 8008f50:	08008fa3 	.word	0x08008fa3
 8008f54:	08008f7b 	.word	0x08008f7b
 8008f58:	08008f71 	.word	0x08008f71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f9d4 	bl	800930c <USBD_GetDescriptor>
          break;
 8008f64:	e022      	b.n	8008fac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fb37 	bl	80095dc <USBD_SetAddress>
          break;
 8008f6e:	e01d      	b.n	8008fac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fb74 	bl	8009660 <USBD_SetConfig>
          break;
 8008f78:	e018      	b.n	8008fac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fbfd 	bl	800977c <USBD_GetConfig>
          break;
 8008f82:	e013      	b.n	8008fac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fc2c 	bl	80097e4 <USBD_GetStatus>
          break;
 8008f8c:	e00e      	b.n	8008fac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fc5a 	bl	800984a <USBD_SetFeature>
          break;
 8008f96:	e009      	b.n	8008fac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fc69 	bl	8009872 <USBD_ClrFeature>
          break;
 8008fa0:	e004      	b.n	8008fac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fcc1 	bl	800992c <USBD_CtlError>
          break;
 8008faa:	bf00      	nop
      }
      break;
 8008fac:	e004      	b.n	8008fb8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fcbb 	bl	800992c <USBD_CtlError>
      break;
 8008fb6:	bf00      	nop
  }

  return ret;
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop

08008fc4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fda:	2b20      	cmp	r3, #32
 8008fdc:	d003      	beq.n	8008fe6 <USBD_StdItfReq+0x22>
 8008fde:	2b40      	cmp	r3, #64	; 0x40
 8008fe0:	d001      	beq.n	8008fe6 <USBD_StdItfReq+0x22>
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d12a      	bne.n	800903c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fec:	3b01      	subs	r3, #1
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d81d      	bhi.n	800902e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	889b      	ldrh	r3, [r3, #4]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d813      	bhi.n	8009024 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	6839      	ldr	r1, [r7, #0]
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	4798      	blx	r3
 800900a:	4603      	mov	r3, r0
 800900c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	88db      	ldrh	r3, [r3, #6]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d110      	bne.n	8009038 <USBD_StdItfReq+0x74>
 8009016:	7bfb      	ldrb	r3, [r7, #15]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10d      	bne.n	8009038 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fd4d 	bl	8009abc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009022:	e009      	b.n	8009038 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fc80 	bl	800992c <USBD_CtlError>
          break;
 800902c:	e004      	b.n	8009038 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fc7b 	bl	800992c <USBD_CtlError>
          break;
 8009036:	e000      	b.n	800903a <USBD_StdItfReq+0x76>
          break;
 8009038:	bf00      	nop
      }
      break;
 800903a:	e004      	b.n	8009046 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fc74 	bl	800992c <USBD_CtlError>
      break;
 8009044:	bf00      	nop
  }

  return USBD_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	889b      	ldrh	r3, [r3, #4]
 8009062:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800906c:	2b20      	cmp	r3, #32
 800906e:	d004      	beq.n	800907a <USBD_StdEPReq+0x2a>
 8009070:	2b40      	cmp	r3, #64	; 0x40
 8009072:	d002      	beq.n	800907a <USBD_StdEPReq+0x2a>
 8009074:	2b00      	cmp	r3, #0
 8009076:	d008      	beq.n	800908a <USBD_StdEPReq+0x3a>
 8009078:	e13d      	b.n	80092f6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	4798      	blx	r3
      break;
 8009088:	e13a      	b.n	8009300 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009092:	2b20      	cmp	r3, #32
 8009094:	d10a      	bne.n	80090ac <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	4798      	blx	r3
 80090a4:	4603      	mov	r3, r0
 80090a6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
 80090aa:	e12a      	b.n	8009302 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	785b      	ldrb	r3, [r3, #1]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d03e      	beq.n	8009132 <USBD_StdEPReq+0xe2>
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d002      	beq.n	80090be <USBD_StdEPReq+0x6e>
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d070      	beq.n	800919e <USBD_StdEPReq+0x14e>
 80090bc:	e115      	b.n	80092ea <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d002      	beq.n	80090ce <USBD_StdEPReq+0x7e>
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d015      	beq.n	80090f8 <USBD_StdEPReq+0xa8>
 80090cc:	e02b      	b.n	8009126 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00c      	beq.n	80090ee <USBD_StdEPReq+0x9e>
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
 80090d6:	2b80      	cmp	r3, #128	; 0x80
 80090d8:	d009      	beq.n	80090ee <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80090da:	7bbb      	ldrb	r3, [r7, #14]
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f001 f884 	bl	800a1ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80090e4:	2180      	movs	r1, #128	; 0x80
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f001 f880 	bl	800a1ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090ec:	e020      	b.n	8009130 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fc1b 	bl	800992c <USBD_CtlError>
              break;
 80090f6:	e01b      	b.n	8009130 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	885b      	ldrh	r3, [r3, #2]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10e      	bne.n	800911e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00b      	beq.n	800911e <USBD_StdEPReq+0xce>
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	2b80      	cmp	r3, #128	; 0x80
 800910a:	d008      	beq.n	800911e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	88db      	ldrh	r3, [r3, #6]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d104      	bne.n	800911e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f001 f867 	bl	800a1ec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fccc 	bl	8009abc <USBD_CtlSendStatus>

              break;
 8009124:	e004      	b.n	8009130 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fbff 	bl	800992c <USBD_CtlError>
              break;
 800912e:	bf00      	nop
          }
          break;
 8009130:	e0e0      	b.n	80092f4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009138:	2b02      	cmp	r3, #2
 800913a:	d002      	beq.n	8009142 <USBD_StdEPReq+0xf2>
 800913c:	2b03      	cmp	r3, #3
 800913e:	d015      	beq.n	800916c <USBD_StdEPReq+0x11c>
 8009140:	e026      	b.n	8009190 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009142:	7bbb      	ldrb	r3, [r7, #14]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00c      	beq.n	8009162 <USBD_StdEPReq+0x112>
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	2b80      	cmp	r3, #128	; 0x80
 800914c:	d009      	beq.n	8009162 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 f84a 	bl	800a1ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009158:	2180      	movs	r1, #128	; 0x80
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f001 f846 	bl	800a1ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009160:	e01c      	b.n	800919c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fbe1 	bl	800992c <USBD_CtlError>
              break;
 800916a:	e017      	b.n	800919c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	885b      	ldrh	r3, [r3, #2]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d112      	bne.n	800919a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009174:	7bbb      	ldrb	r3, [r7, #14]
 8009176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800917a:	2b00      	cmp	r3, #0
 800917c:	d004      	beq.n	8009188 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 f851 	bl	800a22a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fc97 	bl	8009abc <USBD_CtlSendStatus>
              }
              break;
 800918e:	e004      	b.n	800919a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fbca 	bl	800992c <USBD_CtlError>
              break;
 8009198:	e000      	b.n	800919c <USBD_StdEPReq+0x14c>
              break;
 800919a:	bf00      	nop
          }
          break;
 800919c:	e0aa      	b.n	80092f4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d002      	beq.n	80091ae <USBD_StdEPReq+0x15e>
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d032      	beq.n	8009212 <USBD_StdEPReq+0x1c2>
 80091ac:	e097      	b.n	80092de <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d007      	beq.n	80091c4 <USBD_StdEPReq+0x174>
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
 80091b6:	2b80      	cmp	r3, #128	; 0x80
 80091b8:	d004      	beq.n	80091c4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fbb5 	bl	800992c <USBD_CtlError>
                break;
 80091c2:	e091      	b.n	80092e8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	da0b      	bge.n	80091e4 <USBD_StdEPReq+0x194>
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
 80091ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091d2:	4613      	mov	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	3310      	adds	r3, #16
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	4413      	add	r3, r2
 80091e0:	3304      	adds	r3, #4
 80091e2:	e00b      	b.n	80091fc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091e4:	7bbb      	ldrb	r3, [r7, #14]
 80091e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091ea:	4613      	mov	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	4413      	add	r3, r2
 80091fa:	3304      	adds	r3, #4
 80091fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2200      	movs	r2, #0
 8009202:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2202      	movs	r2, #2
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fbf8 	bl	8009a00 <USBD_CtlSendData>
              break;
 8009210:	e06a      	b.n	80092e8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009212:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009216:	2b00      	cmp	r3, #0
 8009218:	da11      	bge.n	800923e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800921a:	7bbb      	ldrb	r3, [r7, #14]
 800921c:	f003 020f 	and.w	r2, r3, #15
 8009220:	6879      	ldr	r1, [r7, #4]
 8009222:	4613      	mov	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	440b      	add	r3, r1
 800922c:	3318      	adds	r3, #24
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d117      	bne.n	8009264 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fb78 	bl	800992c <USBD_CtlError>
                  break;
 800923c:	e054      	b.n	80092e8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	f003 020f 	and.w	r2, r3, #15
 8009244:	6879      	ldr	r1, [r7, #4]
 8009246:	4613      	mov	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	440b      	add	r3, r1
 8009250:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d104      	bne.n	8009264 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fb65 	bl	800992c <USBD_CtlError>
                  break;
 8009262:	e041      	b.n	80092e8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009268:	2b00      	cmp	r3, #0
 800926a:	da0b      	bge.n	8009284 <USBD_StdEPReq+0x234>
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009272:	4613      	mov	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	3310      	adds	r3, #16
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	4413      	add	r3, r2
 8009280:	3304      	adds	r3, #4
 8009282:	e00b      	b.n	800929c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009284:	7bbb      	ldrb	r3, [r7, #14]
 8009286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	4413      	add	r3, r2
 800929a:	3304      	adds	r3, #4
 800929c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800929e:	7bbb      	ldrb	r3, [r7, #14]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <USBD_StdEPReq+0x25a>
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
 80092a6:	2b80      	cmp	r3, #128	; 0x80
 80092a8:	d103      	bne.n	80092b2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	e00e      	b.n	80092d0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 ffd6 	bl	800a268 <USBD_LL_IsStallEP>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2201      	movs	r2, #1
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	e002      	b.n	80092d0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2202      	movs	r2, #2
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fb92 	bl	8009a00 <USBD_CtlSendData>
              break;
 80092dc:	e004      	b.n	80092e8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fb23 	bl	800992c <USBD_CtlError>
              break;
 80092e6:	bf00      	nop
          }
          break;
 80092e8:	e004      	b.n	80092f4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fb1d 	bl	800992c <USBD_CtlError>
          break;
 80092f2:	bf00      	nop
      }
      break;
 80092f4:	e004      	b.n	8009300 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fb17 	bl	800992c <USBD_CtlError>
      break;
 80092fe:	bf00      	nop
  }

  return ret;
 8009300:	7bfb      	ldrb	r3, [r7, #15]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
	...

0800930c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009316:	2300      	movs	r3, #0
 8009318:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800931a:	2300      	movs	r3, #0
 800931c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	885b      	ldrh	r3, [r3, #2]
 8009326:	0a1b      	lsrs	r3, r3, #8
 8009328:	b29b      	uxth	r3, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	2b06      	cmp	r3, #6
 800932e:	f200 8128 	bhi.w	8009582 <USBD_GetDescriptor+0x276>
 8009332:	a201      	add	r2, pc, #4	; (adr r2, 8009338 <USBD_GetDescriptor+0x2c>)
 8009334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009338:	08009355 	.word	0x08009355
 800933c:	0800936d 	.word	0x0800936d
 8009340:	080093ad 	.word	0x080093ad
 8009344:	08009583 	.word	0x08009583
 8009348:	08009583 	.word	0x08009583
 800934c:	08009523 	.word	0x08009523
 8009350:	0800954f 	.word	0x0800954f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	7c12      	ldrb	r2, [r2, #16]
 8009360:	f107 0108 	add.w	r1, r7, #8
 8009364:	4610      	mov	r0, r2
 8009366:	4798      	blx	r3
 8009368:	60f8      	str	r0, [r7, #12]
      break;
 800936a:	e112      	b.n	8009592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	7c1b      	ldrb	r3, [r3, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10d      	bne.n	8009390 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937c:	f107 0208 	add.w	r2, r7, #8
 8009380:	4610      	mov	r0, r2
 8009382:	4798      	blx	r3
 8009384:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	3301      	adds	r3, #1
 800938a:	2202      	movs	r2, #2
 800938c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800938e:	e100      	b.n	8009592 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	f107 0208 	add.w	r2, r7, #8
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3301      	adds	r3, #1
 80093a6:	2202      	movs	r2, #2
 80093a8:	701a      	strb	r2, [r3, #0]
      break;
 80093aa:	e0f2      	b.n	8009592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	885b      	ldrh	r3, [r3, #2]
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b05      	cmp	r3, #5
 80093b4:	f200 80ac 	bhi.w	8009510 <USBD_GetDescriptor+0x204>
 80093b8:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <USBD_GetDescriptor+0xb4>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	080093d9 	.word	0x080093d9
 80093c4:	0800940d 	.word	0x0800940d
 80093c8:	08009441 	.word	0x08009441
 80093cc:	08009475 	.word	0x08009475
 80093d0:	080094a9 	.word	0x080094a9
 80093d4:	080094dd 	.word	0x080094dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00b      	beq.n	80093fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	7c12      	ldrb	r2, [r2, #16]
 80093f0:	f107 0108 	add.w	r1, r7, #8
 80093f4:	4610      	mov	r0, r2
 80093f6:	4798      	blx	r3
 80093f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093fa:	e091      	b.n	8009520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fa94 	bl	800992c <USBD_CtlError>
            err++;
 8009404:	7afb      	ldrb	r3, [r7, #11]
 8009406:	3301      	adds	r3, #1
 8009408:	72fb      	strb	r3, [r7, #11]
          break;
 800940a:	e089      	b.n	8009520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00b      	beq.n	8009430 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	7c12      	ldrb	r2, [r2, #16]
 8009424:	f107 0108 	add.w	r1, r7, #8
 8009428:	4610      	mov	r0, r2
 800942a:	4798      	blx	r3
 800942c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800942e:	e077      	b.n	8009520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fa7a 	bl	800992c <USBD_CtlError>
            err++;
 8009438:	7afb      	ldrb	r3, [r7, #11]
 800943a:	3301      	adds	r3, #1
 800943c:	72fb      	strb	r3, [r7, #11]
          break;
 800943e:	e06f      	b.n	8009520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00b      	beq.n	8009464 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	7c12      	ldrb	r2, [r2, #16]
 8009458:	f107 0108 	add.w	r1, r7, #8
 800945c:	4610      	mov	r0, r2
 800945e:	4798      	blx	r3
 8009460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009462:	e05d      	b.n	8009520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fa60 	bl	800992c <USBD_CtlError>
            err++;
 800946c:	7afb      	ldrb	r3, [r7, #11]
 800946e:	3301      	adds	r3, #1
 8009470:	72fb      	strb	r3, [r7, #11]
          break;
 8009472:	e055      	b.n	8009520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00b      	beq.n	8009498 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	7c12      	ldrb	r2, [r2, #16]
 800948c:	f107 0108 	add.w	r1, r7, #8
 8009490:	4610      	mov	r0, r2
 8009492:	4798      	blx	r3
 8009494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009496:	e043      	b.n	8009520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fa46 	bl	800992c <USBD_CtlError>
            err++;
 80094a0:	7afb      	ldrb	r3, [r7, #11]
 80094a2:	3301      	adds	r3, #1
 80094a4:	72fb      	strb	r3, [r7, #11]
          break;
 80094a6:	e03b      	b.n	8009520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00b      	beq.n	80094cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	7c12      	ldrb	r2, [r2, #16]
 80094c0:	f107 0108 	add.w	r1, r7, #8
 80094c4:	4610      	mov	r0, r2
 80094c6:	4798      	blx	r3
 80094c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ca:	e029      	b.n	8009520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fa2c 	bl	800992c <USBD_CtlError>
            err++;
 80094d4:	7afb      	ldrb	r3, [r7, #11]
 80094d6:	3301      	adds	r3, #1
 80094d8:	72fb      	strb	r3, [r7, #11]
          break;
 80094da:	e021      	b.n	8009520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00b      	beq.n	8009500 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	7c12      	ldrb	r2, [r2, #16]
 80094f4:	f107 0108 	add.w	r1, r7, #8
 80094f8:	4610      	mov	r0, r2
 80094fa:	4798      	blx	r3
 80094fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094fe:	e00f      	b.n	8009520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fa12 	bl	800992c <USBD_CtlError>
            err++;
 8009508:	7afb      	ldrb	r3, [r7, #11]
 800950a:	3301      	adds	r3, #1
 800950c:	72fb      	strb	r3, [r7, #11]
          break;
 800950e:	e007      	b.n	8009520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa0a 	bl	800992c <USBD_CtlError>
          err++;
 8009518:	7afb      	ldrb	r3, [r7, #11]
 800951a:	3301      	adds	r3, #1
 800951c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800951e:	e038      	b.n	8009592 <USBD_GetDescriptor+0x286>
 8009520:	e037      	b.n	8009592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	7c1b      	ldrb	r3, [r3, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d109      	bne.n	800953e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009532:	f107 0208 	add.w	r2, r7, #8
 8009536:	4610      	mov	r0, r2
 8009538:	4798      	blx	r3
 800953a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800953c:	e029      	b.n	8009592 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f9f3 	bl	800992c <USBD_CtlError>
        err++;
 8009546:	7afb      	ldrb	r3, [r7, #11]
 8009548:	3301      	adds	r3, #1
 800954a:	72fb      	strb	r3, [r7, #11]
      break;
 800954c:	e021      	b.n	8009592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	7c1b      	ldrb	r3, [r3, #16]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10d      	bne.n	8009572 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800955c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955e:	f107 0208 	add.w	r2, r7, #8
 8009562:	4610      	mov	r0, r2
 8009564:	4798      	blx	r3
 8009566:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	3301      	adds	r3, #1
 800956c:	2207      	movs	r2, #7
 800956e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009570:	e00f      	b.n	8009592 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f9d9 	bl	800992c <USBD_CtlError>
        err++;
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	3301      	adds	r3, #1
 800957e:	72fb      	strb	r3, [r7, #11]
      break;
 8009580:	e007      	b.n	8009592 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f9d1 	bl	800992c <USBD_CtlError>
      err++;
 800958a:	7afb      	ldrb	r3, [r7, #11]
 800958c:	3301      	adds	r3, #1
 800958e:	72fb      	strb	r3, [r7, #11]
      break;
 8009590:	bf00      	nop
  }

  if (err != 0U)
 8009592:	7afb      	ldrb	r3, [r7, #11]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d11c      	bne.n	80095d2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009598:	893b      	ldrh	r3, [r7, #8]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d011      	beq.n	80095c2 <USBD_GetDescriptor+0x2b6>
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	88db      	ldrh	r3, [r3, #6]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00d      	beq.n	80095c2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	88da      	ldrh	r2, [r3, #6]
 80095aa:	893b      	ldrh	r3, [r7, #8]
 80095ac:	4293      	cmp	r3, r2
 80095ae:	bf28      	it	cs
 80095b0:	4613      	movcs	r3, r2
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095b6:	893b      	ldrh	r3, [r7, #8]
 80095b8:	461a      	mov	r2, r3
 80095ba:	68f9      	ldr	r1, [r7, #12]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fa1f 	bl	8009a00 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	88db      	ldrh	r3, [r3, #6]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d104      	bne.n	80095d4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fa76 	bl	8009abc <USBD_CtlSendStatus>
 80095d0:	e000      	b.n	80095d4 <USBD_GetDescriptor+0x2c8>
    return;
 80095d2:	bf00      	nop
    }
  }
}
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop

080095dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	889b      	ldrh	r3, [r3, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d130      	bne.n	8009650 <USBD_SetAddress+0x74>
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	88db      	ldrh	r3, [r3, #6]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d12c      	bne.n	8009650 <USBD_SetAddress+0x74>
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	885b      	ldrh	r3, [r3, #2]
 80095fa:	2b7f      	cmp	r3, #127	; 0x7f
 80095fc:	d828      	bhi.n	8009650 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	885b      	ldrh	r3, [r3, #2]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009608:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009610:	2b03      	cmp	r3, #3
 8009612:	d104      	bne.n	800961e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f988 	bl	800992c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800961c:	e01c      	b.n	8009658 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	7bfa      	ldrb	r2, [r7, #15]
 8009622:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fe48 	bl	800a2c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fa43 	bl	8009abc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009636:	7bfb      	ldrb	r3, [r7, #15]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d004      	beq.n	8009646 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009644:	e008      	b.n	8009658 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800964e:	e003      	b.n	8009658 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f96a 	bl	800992c <USBD_CtlError>
  }
}
 8009658:	bf00      	nop
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	885b      	ldrh	r3, [r3, #2]
 800966e:	b2da      	uxtb	r2, r3
 8009670:	4b41      	ldr	r3, [pc, #260]	; (8009778 <USBD_SetConfig+0x118>)
 8009672:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009674:	4b40      	ldr	r3, [pc, #256]	; (8009778 <USBD_SetConfig+0x118>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d904      	bls.n	8009686 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f954 	bl	800992c <USBD_CtlError>
 8009684:	e075      	b.n	8009772 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968c:	2b02      	cmp	r3, #2
 800968e:	d002      	beq.n	8009696 <USBD_SetConfig+0x36>
 8009690:	2b03      	cmp	r3, #3
 8009692:	d023      	beq.n	80096dc <USBD_SetConfig+0x7c>
 8009694:	e062      	b.n	800975c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009696:	4b38      	ldr	r3, [pc, #224]	; (8009778 <USBD_SetConfig+0x118>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d01a      	beq.n	80096d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800969e:	4b36      	ldr	r3, [pc, #216]	; (8009778 <USBD_SetConfig+0x118>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2203      	movs	r2, #3
 80096ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80096b0:	4b31      	ldr	r3, [pc, #196]	; (8009778 <USBD_SetConfig+0x118>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff f9f3 	bl	8008aa2 <USBD_SetClassConfig>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d104      	bne.n	80096cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f931 	bl	800992c <USBD_CtlError>
            return;
 80096ca:	e052      	b.n	8009772 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f9f5 	bl	8009abc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80096d2:	e04e      	b.n	8009772 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f9f1 	bl	8009abc <USBD_CtlSendStatus>
        break;
 80096da:	e04a      	b.n	8009772 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80096dc:	4b26      	ldr	r3, [pc, #152]	; (8009778 <USBD_SetConfig+0x118>)
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d112      	bne.n	800970a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2202      	movs	r2, #2
 80096e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80096ec:	4b22      	ldr	r3, [pc, #136]	; (8009778 <USBD_SetConfig+0x118>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	461a      	mov	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80096f6:	4b20      	ldr	r3, [pc, #128]	; (8009778 <USBD_SetConfig+0x118>)
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	4619      	mov	r1, r3
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7ff f9ef 	bl	8008ae0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f9da 	bl	8009abc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009708:	e033      	b.n	8009772 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800970a:	4b1b      	ldr	r3, [pc, #108]	; (8009778 <USBD_SetConfig+0x118>)
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	429a      	cmp	r2, r3
 8009716:	d01d      	beq.n	8009754 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff f9dd 	bl	8008ae0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009726:	4b14      	ldr	r3, [pc, #80]	; (8009778 <USBD_SetConfig+0x118>)
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	461a      	mov	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009730:	4b11      	ldr	r3, [pc, #68]	; (8009778 <USBD_SetConfig+0x118>)
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7ff f9b3 	bl	8008aa2 <USBD_SetClassConfig>
 800973c:	4603      	mov	r3, r0
 800973e:	2b02      	cmp	r3, #2
 8009740:	d104      	bne.n	800974c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 f8f1 	bl	800992c <USBD_CtlError>
            return;
 800974a:	e012      	b.n	8009772 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f9b5 	bl	8009abc <USBD_CtlSendStatus>
        break;
 8009752:	e00e      	b.n	8009772 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f9b1 	bl	8009abc <USBD_CtlSendStatus>
        break;
 800975a:	e00a      	b.n	8009772 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f8e4 	bl	800992c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009764:	4b04      	ldr	r3, [pc, #16]	; (8009778 <USBD_SetConfig+0x118>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff f9b8 	bl	8008ae0 <USBD_ClrClassConfig>
        break;
 8009770:	bf00      	nop
    }
  }
}
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	200001bc 	.word	0x200001bc

0800977c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	88db      	ldrh	r3, [r3, #6]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d004      	beq.n	8009798 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f8cb 	bl	800992c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009796:	e021      	b.n	80097dc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800979e:	2b01      	cmp	r3, #1
 80097a0:	db17      	blt.n	80097d2 <USBD_GetConfig+0x56>
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	dd02      	ble.n	80097ac <USBD_GetConfig+0x30>
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d00b      	beq.n	80097c2 <USBD_GetConfig+0x46>
 80097aa:	e012      	b.n	80097d2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	3308      	adds	r3, #8
 80097b6:	2201      	movs	r2, #1
 80097b8:	4619      	mov	r1, r3
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f920 	bl	8009a00 <USBD_CtlSendData>
        break;
 80097c0:	e00c      	b.n	80097dc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	3304      	adds	r3, #4
 80097c6:	2201      	movs	r2, #1
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f918 	bl	8009a00 <USBD_CtlSendData>
        break;
 80097d0:	e004      	b.n	80097dc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f8a9 	bl	800992c <USBD_CtlError>
        break;
 80097da:	bf00      	nop
}
 80097dc:	bf00      	nop
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f4:	3b01      	subs	r3, #1
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d81e      	bhi.n	8009838 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	88db      	ldrh	r3, [r3, #6]
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d004      	beq.n	800980c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f891 	bl	800992c <USBD_CtlError>
        break;
 800980a:	e01a      	b.n	8009842 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009818:	2b00      	cmp	r3, #0
 800981a:	d005      	beq.n	8009828 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f043 0202 	orr.w	r2, r3, #2
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	330c      	adds	r3, #12
 800982c:	2202      	movs	r2, #2
 800982e:	4619      	mov	r1, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f8e5 	bl	8009a00 <USBD_CtlSendData>
      break;
 8009836:	e004      	b.n	8009842 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f876 	bl	800992c <USBD_CtlError>
      break;
 8009840:	bf00      	nop
  }
}
 8009842:	bf00      	nop
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b082      	sub	sp, #8
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	885b      	ldrh	r3, [r3, #2]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d106      	bne.n	800986a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f929 	bl	8009abc <USBD_CtlSendStatus>
  }
}
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009882:	3b01      	subs	r3, #1
 8009884:	2b02      	cmp	r3, #2
 8009886:	d80b      	bhi.n	80098a0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	885b      	ldrh	r3, [r3, #2]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d10c      	bne.n	80098aa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f90f 	bl	8009abc <USBD_CtlSendStatus>
      }
      break;
 800989e:	e004      	b.n	80098aa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f842 	bl	800992c <USBD_CtlError>
      break;
 80098a8:	e000      	b.n	80098ac <USBD_ClrFeature+0x3a>
      break;
 80098aa:	bf00      	nop
  }
}
 80098ac:	bf00      	nop
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	781a      	ldrb	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	785a      	ldrb	r2, [r3, #1]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	3302      	adds	r3, #2
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	3303      	adds	r3, #3
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	021b      	lsls	r3, r3, #8
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	4413      	add	r3, r2
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	3304      	adds	r3, #4
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	3305      	adds	r3, #5
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	021b      	lsls	r3, r3, #8
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	4413      	add	r3, r2
 8009900:	b29a      	uxth	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	3306      	adds	r3, #6
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	b29a      	uxth	r2, r3
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	3307      	adds	r3, #7
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	b29b      	uxth	r3, r3
 8009916:	021b      	lsls	r3, r3, #8
 8009918:	b29b      	uxth	r3, r3
 800991a:	4413      	add	r3, r2
 800991c:	b29a      	uxth	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	80da      	strh	r2, [r3, #6]

}
 8009922:	bf00      	nop
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	bc80      	pop	{r7}
 800992a:	4770      	bx	lr

0800992c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009936:	2180      	movs	r1, #128	; 0x80
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fc57 	bl	800a1ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800993e:	2100      	movs	r1, #0
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fc53 	bl	800a1ec <USBD_LL_StallEP>
}
 8009946:	bf00      	nop
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b086      	sub	sp, #24
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	60b9      	str	r1, [r7, #8]
 8009958:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800995a:	2300      	movs	r3, #0
 800995c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d032      	beq.n	80099ca <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f000 f834 	bl	80099d2 <USBD_GetLen>
 800996a:	4603      	mov	r3, r0
 800996c:	3301      	adds	r3, #1
 800996e:	b29b      	uxth	r3, r3
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	b29a      	uxth	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	75fa      	strb	r2, [r7, #23]
 800997e:	461a      	mov	r2, r3
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	4413      	add	r3, r2
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	7812      	ldrb	r2, [r2, #0]
 8009988:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800998a:	7dfb      	ldrb	r3, [r7, #23]
 800998c:	1c5a      	adds	r2, r3, #1
 800998e:	75fa      	strb	r2, [r7, #23]
 8009990:	461a      	mov	r2, r3
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	4413      	add	r3, r2
 8009996:	2203      	movs	r2, #3
 8009998:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800999a:	e012      	b.n	80099c2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	1c5a      	adds	r2, r3, #1
 80099a0:	60fa      	str	r2, [r7, #12]
 80099a2:	7dfa      	ldrb	r2, [r7, #23]
 80099a4:	1c51      	adds	r1, r2, #1
 80099a6:	75f9      	strb	r1, [r7, #23]
 80099a8:	4611      	mov	r1, r2
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	440a      	add	r2, r1
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	75fa      	strb	r2, [r7, #23]
 80099b8:	461a      	mov	r2, r3
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	4413      	add	r3, r2
 80099be:	2200      	movs	r2, #0
 80099c0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e8      	bne.n	800999c <USBD_GetString+0x4e>
    }
  }
}
 80099ca:	bf00      	nop
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b085      	sub	sp, #20
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80099de:	e005      	b.n	80099ec <USBD_GetLen+0x1a>
  {
    len++;
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	3301      	adds	r3, #1
 80099e4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3301      	adds	r3, #1
 80099ea:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1f5      	bne.n	80099e0 <USBD_GetLen+0xe>
  }

  return len;
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bc80      	pop	{r7}
 80099fe:	4770      	bx	lr

08009a00 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2202      	movs	r2, #2
 8009a12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a16:	88fa      	ldrh	r2, [r7, #6]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009a1c:	88fa      	ldrh	r2, [r7, #6]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a22:	88fb      	ldrh	r3, [r7, #6]
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	2100      	movs	r1, #0
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 fc68 	bl	800a2fe <USBD_LL_Transmit>

  return USBD_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	4613      	mov	r3, r2
 8009a44:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a46:	88fb      	ldrh	r3, [r7, #6]
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 fc56 	bl	800a2fe <USBD_LL_Transmit>

  return USBD_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	4613      	mov	r3, r2
 8009a68:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2203      	movs	r2, #3
 8009a6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a72:	88fa      	ldrh	r2, [r7, #6]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009a7a:	88fa      	ldrh	r2, [r7, #6]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a82:	88fb      	ldrh	r3, [r7, #6]
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	2100      	movs	r1, #0
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f000 fc5b 	bl	800a344 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009aa6:	88fb      	ldrh	r3, [r7, #6]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	2100      	movs	r1, #0
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 fc49 	bl	800a344 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2204      	movs	r2, #4
 8009ac8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009acc:	2300      	movs	r3, #0
 8009ace:	2200      	movs	r2, #0
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fc13 	bl	800a2fe <USBD_LL_Transmit>

  return USBD_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b082      	sub	sp, #8
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2205      	movs	r2, #5
 8009aee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009af2:	2300      	movs	r3, #0
 8009af4:	2200      	movs	r2, #0
 8009af6:	2100      	movs	r1, #0
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fc23 	bl	800a344 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4912      	ldr	r1, [pc, #72]	; (8009b58 <MX_USB_DEVICE_Init+0x50>)
 8009b10:	4812      	ldr	r0, [pc, #72]	; (8009b5c <MX_USB_DEVICE_Init+0x54>)
 8009b12:	f7fe ff6c 	bl	80089ee <USBD_Init>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b1c:	f7f8 ffa8 	bl	8002a70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b20:	490f      	ldr	r1, [pc, #60]	; (8009b60 <MX_USB_DEVICE_Init+0x58>)
 8009b22:	480e      	ldr	r0, [pc, #56]	; (8009b5c <MX_USB_DEVICE_Init+0x54>)
 8009b24:	f7fe ff8e 	bl	8008a44 <USBD_RegisterClass>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b2e:	f7f8 ff9f 	bl	8002a70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b32:	490c      	ldr	r1, [pc, #48]	; (8009b64 <MX_USB_DEVICE_Init+0x5c>)
 8009b34:	4809      	ldr	r0, [pc, #36]	; (8009b5c <MX_USB_DEVICE_Init+0x54>)
 8009b36:	f7fe febf 	bl	80088b8 <USBD_CDC_RegisterInterface>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b40:	f7f8 ff96 	bl	8002a70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b44:	4805      	ldr	r0, [pc, #20]	; (8009b5c <MX_USB_DEVICE_Init+0x54>)
 8009b46:	f7fe ff96 	bl	8008a76 <USBD_Start>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b50:	f7f8 ff8e 	bl	8002a70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b54:	bf00      	nop
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	20000134 	.word	0x20000134
 8009b5c:	20000864 	.word	0x20000864
 8009b60:	20000020 	.word	0x20000020
 8009b64:	20000124 	.word	0x20000124

08009b68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4905      	ldr	r1, [pc, #20]	; (8009b84 <CDC_Init_FS+0x1c>)
 8009b70:	4805      	ldr	r0, [pc, #20]	; (8009b88 <CDC_Init_FS+0x20>)
 8009b72:	f7fe feb7 	bl	80088e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b76:	4905      	ldr	r1, [pc, #20]	; (8009b8c <CDC_Init_FS+0x24>)
 8009b78:	4803      	ldr	r0, [pc, #12]	; (8009b88 <CDC_Init_FS+0x20>)
 8009b7a:	f7fe fecc 	bl	8008916 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	20000f10 	.word	0x20000f10
 8009b88:	20000864 	.word	0x20000864
 8009b8c:	20000b28 	.word	0x20000b28

08009b90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b90:	b480      	push	{r7}
 8009b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bc80      	pop	{r7}
 8009b9c:	4770      	bx	lr
	...

08009ba0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	6039      	str	r1, [r7, #0]
 8009baa:	71fb      	strb	r3, [r7, #7]
 8009bac:	4613      	mov	r3, r2
 8009bae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009bb0:	79fb      	ldrb	r3, [r7, #7]
 8009bb2:	2b23      	cmp	r3, #35	; 0x23
 8009bb4:	d84a      	bhi.n	8009c4c <CDC_Control_FS+0xac>
 8009bb6:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <CDC_Control_FS+0x1c>)
 8009bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbc:	08009c4d 	.word	0x08009c4d
 8009bc0:	08009c4d 	.word	0x08009c4d
 8009bc4:	08009c4d 	.word	0x08009c4d
 8009bc8:	08009c4d 	.word	0x08009c4d
 8009bcc:	08009c4d 	.word	0x08009c4d
 8009bd0:	08009c4d 	.word	0x08009c4d
 8009bd4:	08009c4d 	.word	0x08009c4d
 8009bd8:	08009c4d 	.word	0x08009c4d
 8009bdc:	08009c4d 	.word	0x08009c4d
 8009be0:	08009c4d 	.word	0x08009c4d
 8009be4:	08009c4d 	.word	0x08009c4d
 8009be8:	08009c4d 	.word	0x08009c4d
 8009bec:	08009c4d 	.word	0x08009c4d
 8009bf0:	08009c4d 	.word	0x08009c4d
 8009bf4:	08009c4d 	.word	0x08009c4d
 8009bf8:	08009c4d 	.word	0x08009c4d
 8009bfc:	08009c4d 	.word	0x08009c4d
 8009c00:	08009c4d 	.word	0x08009c4d
 8009c04:	08009c4d 	.word	0x08009c4d
 8009c08:	08009c4d 	.word	0x08009c4d
 8009c0c:	08009c4d 	.word	0x08009c4d
 8009c10:	08009c4d 	.word	0x08009c4d
 8009c14:	08009c4d 	.word	0x08009c4d
 8009c18:	08009c4d 	.word	0x08009c4d
 8009c1c:	08009c4d 	.word	0x08009c4d
 8009c20:	08009c4d 	.word	0x08009c4d
 8009c24:	08009c4d 	.word	0x08009c4d
 8009c28:	08009c4d 	.word	0x08009c4d
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009c4d 	.word	0x08009c4d
 8009c34:	08009c4d 	.word	0x08009c4d
 8009c38:	08009c4d 	.word	0x08009c4d
 8009c3c:	08009c4d 	.word	0x08009c4d
 8009c40:	08009c4d 	.word	0x08009c4d
 8009c44:	08009c4d 	.word	0x08009c4d
 8009c48:	08009c4d 	.word	0x08009c4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c4c:	bf00      	nop
  }

  return (USBD_OK);
 8009c4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bc80      	pop	{r7}
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop

08009c5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	resiveRx(Buf, Len);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7f8 fe8f 	bl	800298c <resiveRx>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	4805      	ldr	r0, [pc, #20]	; (8009c88 <CDC_Receive_FS+0x2c>)
 8009c72:	f7fe fe50 	bl	8008916 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c76:	4804      	ldr	r0, [pc, #16]	; (8009c88 <CDC_Receive_FS+0x2c>)
 8009c78:	f7fe fe8f 	bl	800899a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009c7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20000864 	.word	0x20000864

08009c8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009c9c:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <CDC_Transmit_FS+0x48>)
 8009c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e00b      	b.n	8009cca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009cb2:	887b      	ldrh	r3, [r7, #2]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	4806      	ldr	r0, [pc, #24]	; (8009cd4 <CDC_Transmit_FS+0x48>)
 8009cba:	f7fe fe13 	bl	80088e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009cbe:	4805      	ldr	r0, [pc, #20]	; (8009cd4 <CDC_Transmit_FS+0x48>)
 8009cc0:	f7fe fe3c 	bl	800893c <USBD_CDC_TransmitPacket>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20000864 	.word	0x20000864

08009cd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	4603      	mov	r3, r0
 8009ce0:	6039      	str	r1, [r7, #0]
 8009ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2212      	movs	r2, #18
 8009ce8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009cea:	4b03      	ldr	r3, [pc, #12]	; (8009cf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bc80      	pop	{r7}
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	20000150 	.word	0x20000150

08009cfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	6039      	str	r1, [r7, #0]
 8009d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2204      	movs	r2, #4
 8009d0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d0e:	4b03      	ldr	r3, [pc, #12]	; (8009d1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bc80      	pop	{r7}
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	20000164 	.word	0x20000164

08009d20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	6039      	str	r1, [r7, #0]
 8009d2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d2c:	79fb      	ldrb	r3, [r7, #7]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d105      	bne.n	8009d3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	4907      	ldr	r1, [pc, #28]	; (8009d54 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d36:	4808      	ldr	r0, [pc, #32]	; (8009d58 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d38:	f7ff fe09 	bl	800994e <USBD_GetString>
 8009d3c:	e004      	b.n	8009d48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	4904      	ldr	r1, [pc, #16]	; (8009d54 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d42:	4805      	ldr	r0, [pc, #20]	; (8009d58 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d44:	f7ff fe03 	bl	800994e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d48:	4b02      	ldr	r3, [pc, #8]	; (8009d54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	200012f8 	.word	0x200012f8
 8009d58:	0800a4e4 	.word	0x0800a4e4

08009d5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4603      	mov	r3, r0
 8009d64:	6039      	str	r1, [r7, #0]
 8009d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	4904      	ldr	r1, [pc, #16]	; (8009d7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d6c:	4804      	ldr	r0, [pc, #16]	; (8009d80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d6e:	f7ff fdee 	bl	800994e <USBD_GetString>
  return USBD_StrDesc;
 8009d72:	4b02      	ldr	r3, [pc, #8]	; (8009d7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	200012f8 	.word	0x200012f8
 8009d80:	0800a4fc 	.word	0x0800a4fc

08009d84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	6039      	str	r1, [r7, #0]
 8009d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	221a      	movs	r2, #26
 8009d94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d96:	f000 f843 	bl	8009e20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d9a:	4b02      	ldr	r3, [pc, #8]	; (8009da4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	20000168 	.word	0x20000168

08009da8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	6039      	str	r1, [r7, #0]
 8009db2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009db4:	79fb      	ldrb	r3, [r7, #7]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d105      	bne.n	8009dc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	4907      	ldr	r1, [pc, #28]	; (8009ddc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dbe:	4808      	ldr	r0, [pc, #32]	; (8009de0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009dc0:	f7ff fdc5 	bl	800994e <USBD_GetString>
 8009dc4:	e004      	b.n	8009dd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	4904      	ldr	r1, [pc, #16]	; (8009ddc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dca:	4805      	ldr	r0, [pc, #20]	; (8009de0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009dcc:	f7ff fdbf 	bl	800994e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dd0:	4b02      	ldr	r3, [pc, #8]	; (8009ddc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	200012f8 	.word	0x200012f8
 8009de0:	0800a510 	.word	0x0800a510

08009de4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	6039      	str	r1, [r7, #0]
 8009dee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009df0:	79fb      	ldrb	r3, [r7, #7]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d105      	bne.n	8009e02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	4907      	ldr	r1, [pc, #28]	; (8009e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009dfa:	4808      	ldr	r0, [pc, #32]	; (8009e1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009dfc:	f7ff fda7 	bl	800994e <USBD_GetString>
 8009e00:	e004      	b.n	8009e0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	4904      	ldr	r1, [pc, #16]	; (8009e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e06:	4805      	ldr	r0, [pc, #20]	; (8009e1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e08:	f7ff fda1 	bl	800994e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e0c:	4b02      	ldr	r3, [pc, #8]	; (8009e18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	200012f8 	.word	0x200012f8
 8009e1c:	0800a51c 	.word	0x0800a51c

08009e20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e26:	4b0f      	ldr	r3, [pc, #60]	; (8009e64 <Get_SerialNum+0x44>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e2c:	4b0e      	ldr	r3, [pc, #56]	; (8009e68 <Get_SerialNum+0x48>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e32:	4b0e      	ldr	r3, [pc, #56]	; (8009e6c <Get_SerialNum+0x4c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d009      	beq.n	8009e5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e46:	2208      	movs	r2, #8
 8009e48:	4909      	ldr	r1, [pc, #36]	; (8009e70 <Get_SerialNum+0x50>)
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f000 f814 	bl	8009e78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e50:	2204      	movs	r2, #4
 8009e52:	4908      	ldr	r1, [pc, #32]	; (8009e74 <Get_SerialNum+0x54>)
 8009e54:	68b8      	ldr	r0, [r7, #8]
 8009e56:	f000 f80f 	bl	8009e78 <IntToUnicode>
  }
}
 8009e5a:	bf00      	nop
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	1ffff7e8 	.word	0x1ffff7e8
 8009e68:	1ffff7ec 	.word	0x1ffff7ec
 8009e6c:	1ffff7f0 	.word	0x1ffff7f0
 8009e70:	2000016a 	.word	0x2000016a
 8009e74:	2000017a 	.word	0x2000017a

08009e78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b087      	sub	sp, #28
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	4613      	mov	r3, r2
 8009e84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e86:	2300      	movs	r3, #0
 8009e88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	75fb      	strb	r3, [r7, #23]
 8009e8e:	e027      	b.n	8009ee0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	0f1b      	lsrs	r3, r3, #28
 8009e94:	2b09      	cmp	r3, #9
 8009e96:	d80b      	bhi.n	8009eb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	0f1b      	lsrs	r3, r3, #28
 8009e9c:	b2da      	uxtb	r2, r3
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ea0:	005b      	lsls	r3, r3, #1
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	440b      	add	r3, r1
 8009ea8:	3230      	adds	r2, #48	; 0x30
 8009eaa:	b2d2      	uxtb	r2, r2
 8009eac:	701a      	strb	r2, [r3, #0]
 8009eae:	e00a      	b.n	8009ec6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	0f1b      	lsrs	r3, r3, #28
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	7dfb      	ldrb	r3, [r7, #23]
 8009eb8:	005b      	lsls	r3, r3, #1
 8009eba:	4619      	mov	r1, r3
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	440b      	add	r3, r1
 8009ec0:	3237      	adds	r2, #55	; 0x37
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	011b      	lsls	r3, r3, #4
 8009eca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
 8009ece:	005b      	lsls	r3, r3, #1
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
 8009edc:	3301      	adds	r3, #1
 8009ede:	75fb      	strb	r3, [r7, #23]
 8009ee0:	7dfa      	ldrb	r2, [r7, #23]
 8009ee2:	79fb      	ldrb	r3, [r7, #7]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d3d3      	bcc.n	8009e90 <IntToUnicode+0x18>
  }
}
 8009ee8:	bf00      	nop
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bc80      	pop	{r7}
 8009ef0:	4770      	bx	lr
	...

08009ef4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a0d      	ldr	r2, [pc, #52]	; (8009f38 <HAL_PCD_MspInit+0x44>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d113      	bne.n	8009f2e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f06:	4b0d      	ldr	r3, [pc, #52]	; (8009f3c <HAL_PCD_MspInit+0x48>)
 8009f08:	69db      	ldr	r3, [r3, #28]
 8009f0a:	4a0c      	ldr	r2, [pc, #48]	; (8009f3c <HAL_PCD_MspInit+0x48>)
 8009f0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f10:	61d3      	str	r3, [r2, #28]
 8009f12:	4b0a      	ldr	r3, [pc, #40]	; (8009f3c <HAL_PCD_MspInit+0x48>)
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2100      	movs	r1, #0
 8009f22:	2014      	movs	r0, #20
 8009f24:	f7f9 f80d 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009f28:	2014      	movs	r0, #20
 8009f2a:	f7f9 f826 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009f2e:	bf00      	nop
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	40005c00 	.word	0x40005c00
 8009f3c:	40021000 	.word	0x40021000

08009f40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009f54:	4619      	mov	r1, r3
 8009f56:	4610      	mov	r0, r2
 8009f58:	f7fe fdd5 	bl	8008b06 <USBD_LL_SetupStage>
}
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009f76:	78fa      	ldrb	r2, [r7, #3]
 8009f78:	6879      	ldr	r1, [r7, #4]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	00db      	lsls	r3, r3, #3
 8009f82:	440b      	add	r3, r1
 8009f84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	78fb      	ldrb	r3, [r7, #3]
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	f7fe fe05 	bl	8008b9c <USBD_LL_DataOutStage>
}
 8009f92:	bf00      	nop
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009fac:	78fa      	ldrb	r2, [r7, #3]
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	440b      	add	r3, r1
 8009fba:	333c      	adds	r3, #60	; 0x3c
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	78fb      	ldrb	r3, [r7, #3]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	f7fe fe5c 	bl	8008c7e <USBD_LL_DataInStage>
}
 8009fc6:	bf00      	nop
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7fe ff6c 	bl	8008eba <USBD_LL_SOF>
}
 8009fe2:	bf00      	nop
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d001      	beq.n	800a002 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009ffe:	f7f8 fd37 	bl	8002a70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a008:	7bfa      	ldrb	r2, [r7, #15]
 800a00a:	4611      	mov	r1, r2
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fe ff1c 	bl	8008e4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fe fed5 	bl	8008dc8 <USBD_LL_Reset>
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
	...

0800a028 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a036:	4618      	mov	r0, r3
 800a038:	f7fe ff16 	bl	8008e68 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d005      	beq.n	800a050 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a044:	4b04      	ldr	r3, [pc, #16]	; (800a058 <HAL_PCD_SuspendCallback+0x30>)
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	4a03      	ldr	r2, [pc, #12]	; (800a058 <HAL_PCD_SuspendCallback+0x30>)
 800a04a:	f043 0306 	orr.w	r3, r3, #6
 800a04e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	e000ed00 	.word	0xe000ed00

0800a05c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe ff10 	bl	8008e90 <USBD_LL_Resume>
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a080:	4a28      	ldr	r2, [pc, #160]	; (800a124 <USBD_LL_Init+0xac>)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a26      	ldr	r2, [pc, #152]	; (800a124 <USBD_LL_Init+0xac>)
 800a08c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a090:	4b24      	ldr	r3, [pc, #144]	; (800a124 <USBD_LL_Init+0xac>)
 800a092:	4a25      	ldr	r2, [pc, #148]	; (800a128 <USBD_LL_Init+0xb0>)
 800a094:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a096:	4b23      	ldr	r3, [pc, #140]	; (800a124 <USBD_LL_Init+0xac>)
 800a098:	2208      	movs	r2, #8
 800a09a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a09c:	4b21      	ldr	r3, [pc, #132]	; (800a124 <USBD_LL_Init+0xac>)
 800a09e:	2202      	movs	r2, #2
 800a0a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a0a2:	4b20      	ldr	r3, [pc, #128]	; (800a124 <USBD_LL_Init+0xac>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a0a8:	4b1e      	ldr	r3, [pc, #120]	; (800a124 <USBD_LL_Init+0xac>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a0ae:	4b1d      	ldr	r3, [pc, #116]	; (800a124 <USBD_LL_Init+0xac>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a0b4:	481b      	ldr	r0, [pc, #108]	; (800a124 <USBD_LL_Init+0xac>)
 800a0b6:	f7f9 f904 	bl	80032c2 <HAL_PCD_Init>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a0c0:	f7f8 fcd6 	bl	8002a70 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0ca:	2318      	movs	r3, #24
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	f7fa fc38 	bl	8004944 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0da:	2358      	movs	r3, #88	; 0x58
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2180      	movs	r1, #128	; 0x80
 800a0e0:	f7fa fc30 	bl	8004944 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0ea:	23c0      	movs	r3, #192	; 0xc0
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2181      	movs	r1, #129	; 0x81
 800a0f0:	f7fa fc28 	bl	8004944 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a0fe:	2200      	movs	r2, #0
 800a100:	2101      	movs	r1, #1
 800a102:	f7fa fc1f 	bl	8004944 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a10c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a110:	2200      	movs	r2, #0
 800a112:	2182      	movs	r1, #130	; 0x82
 800a114:	f7fa fc16 	bl	8004944 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	200014f8 	.word	0x200014f8
 800a128:	40005c00 	.word	0x40005c00

0800a12c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a138:	2300      	movs	r3, #0
 800a13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a142:	4618      	mov	r0, r3
 800a144:	f7f9 f9c8 	bl	80034d8 <HAL_PCD_Start>
 800a148:	4603      	mov	r3, r0
 800a14a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	4618      	mov	r0, r3
 800a150:	f000 f94e 	bl	800a3f0 <USBD_Get_USB_Status>
 800a154:	4603      	mov	r3, r0
 800a156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a158:	7bbb      	ldrb	r3, [r7, #14]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	4608      	mov	r0, r1
 800a16c:	4611      	mov	r1, r2
 800a16e:	461a      	mov	r2, r3
 800a170:	4603      	mov	r3, r0
 800a172:	70fb      	strb	r3, [r7, #3]
 800a174:	460b      	mov	r3, r1
 800a176:	70bb      	strb	r3, [r7, #2]
 800a178:	4613      	mov	r3, r2
 800a17a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a18a:	78bb      	ldrb	r3, [r7, #2]
 800a18c:	883a      	ldrh	r2, [r7, #0]
 800a18e:	78f9      	ldrb	r1, [r7, #3]
 800a190:	f7f9 fb42 	bl	8003818 <HAL_PCD_EP_Open>
 800a194:	4603      	mov	r3, r0
 800a196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a198:	7bfb      	ldrb	r3, [r7, #15]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f000 f928 	bl	800a3f0 <USBD_Get_USB_Status>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1c8:	78fa      	ldrb	r2, [r7, #3]
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7f9 fb89 	bl	80038e4 <HAL_PCD_EP_Close>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1d6:	7bfb      	ldrb	r3, [r7, #15]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 f909 	bl	800a3f0 <USBD_Get_USB_Status>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a206:	78fa      	ldrb	r2, [r7, #3]
 800a208:	4611      	mov	r1, r2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7f9 fc49 	bl	8003aa2 <HAL_PCD_EP_SetStall>
 800a210:	4603      	mov	r3, r0
 800a212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	4618      	mov	r0, r3
 800a218:	f000 f8ea 	bl	800a3f0 <USBD_Get_USB_Status>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a220:	7bbb      	ldrb	r3, [r7, #14]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	460b      	mov	r3, r1
 800a234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a244:	78fa      	ldrb	r2, [r7, #3]
 800a246:	4611      	mov	r1, r2
 800a248:	4618      	mov	r0, r3
 800a24a:	f7f9 fc8a 	bl	8003b62 <HAL_PCD_EP_ClrStall>
 800a24e:	4603      	mov	r3, r0
 800a250:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a252:	7bfb      	ldrb	r3, [r7, #15]
 800a254:	4618      	mov	r0, r3
 800a256:	f000 f8cb 	bl	800a3f0 <USBD_Get_USB_Status>
 800a25a:	4603      	mov	r3, r0
 800a25c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a25e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a27a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a27c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a280:	2b00      	cmp	r3, #0
 800a282:	da0c      	bge.n	800a29e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a284:	78fb      	ldrb	r3, [r7, #3]
 800a286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a28a:	68f9      	ldr	r1, [r7, #12]
 800a28c:	1c5a      	adds	r2, r3, #1
 800a28e:	4613      	mov	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	00db      	lsls	r3, r3, #3
 800a296:	440b      	add	r3, r1
 800a298:	3302      	adds	r3, #2
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	e00b      	b.n	800a2b6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a29e:	78fb      	ldrb	r3, [r7, #3]
 800a2a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2a4:	68f9      	ldr	r1, [r7, #12]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	440b      	add	r3, r1
 800a2b0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a2b4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bc80      	pop	{r7}
 800a2be:	4770      	bx	lr

0800a2c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2da:	78fa      	ldrb	r2, [r7, #3]
 800a2dc:	4611      	mov	r1, r2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7f9 fa75 	bl	80037ce <HAL_PCD_SetAddress>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 f880 	bl	800a3f0 <USBD_Get_USB_Status>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b086      	sub	sp, #24
 800a302:	af00      	add	r7, sp, #0
 800a304:	60f8      	str	r0, [r7, #12]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	461a      	mov	r2, r3
 800a30a:	460b      	mov	r3, r1
 800a30c:	72fb      	strb	r3, [r7, #11]
 800a30e:	4613      	mov	r3, r2
 800a310:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a312:	2300      	movs	r3, #0
 800a314:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a320:	893b      	ldrh	r3, [r7, #8]
 800a322:	7af9      	ldrb	r1, [r7, #11]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	f7f9 fb79 	bl	8003a1c <HAL_PCD_EP_Transmit>
 800a32a:	4603      	mov	r3, r0
 800a32c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
 800a330:	4618      	mov	r0, r3
 800a332:	f000 f85d 	bl	800a3f0 <USBD_Get_USB_Status>
 800a336:	4603      	mov	r3, r0
 800a338:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a33a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	607a      	str	r2, [r7, #4]
 800a34e:	461a      	mov	r2, r3
 800a350:	460b      	mov	r3, r1
 800a352:	72fb      	strb	r3, [r7, #11]
 800a354:	4613      	mov	r3, r2
 800a356:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a366:	893b      	ldrh	r3, [r7, #8]
 800a368:	7af9      	ldrb	r1, [r7, #11]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	f7f9 fb02 	bl	8003974 <HAL_PCD_EP_Receive>
 800a370:	4603      	mov	r3, r0
 800a372:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	4618      	mov	r0, r3
 800a378:	f000 f83a 	bl	800a3f0 <USBD_Get_USB_Status>
 800a37c:	4603      	mov	r3, r0
 800a37e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a380:	7dbb      	ldrb	r3, [r7, #22]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b082      	sub	sp, #8
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	460b      	mov	r3, r1
 800a394:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a39c:	78fa      	ldrb	r2, [r7, #3]
 800a39e:	4611      	mov	r1, r2
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7f9 fb24 	bl	80039ee <HAL_PCD_EP_GetRxCount>
 800a3a6:	4603      	mov	r3, r0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a3b8:	4b02      	ldr	r3, [pc, #8]	; (800a3c4 <USBD_static_malloc+0x14>)
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bc80      	pop	{r7}
 800a3c2:	4770      	bx	lr
 800a3c4:	200001c0 	.word	0x200001c0

0800a3c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]

}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bc80      	pop	{r7}
 800a3d8:	4770      	bx	lr

0800a3da <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b083      	sub	sp, #12
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a3e6:	bf00      	nop
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr

0800a3f0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
 800a400:	2b03      	cmp	r3, #3
 800a402:	d817      	bhi.n	800a434 <USBD_Get_USB_Status+0x44>
 800a404:	a201      	add	r2, pc, #4	; (adr r2, 800a40c <USBD_Get_USB_Status+0x1c>)
 800a406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40a:	bf00      	nop
 800a40c:	0800a41d 	.word	0x0800a41d
 800a410:	0800a423 	.word	0x0800a423
 800a414:	0800a429 	.word	0x0800a429
 800a418:	0800a42f 	.word	0x0800a42f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	73fb      	strb	r3, [r7, #15]
    break;
 800a420:	e00b      	b.n	800a43a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a422:	2302      	movs	r3, #2
 800a424:	73fb      	strb	r3, [r7, #15]
    break;
 800a426:	e008      	b.n	800a43a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a428:	2301      	movs	r3, #1
 800a42a:	73fb      	strb	r3, [r7, #15]
    break;
 800a42c:	e005      	b.n	800a43a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a42e:	2302      	movs	r3, #2
 800a430:	73fb      	strb	r3, [r7, #15]
    break;
 800a432:	e002      	b.n	800a43a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a434:	2302      	movs	r3, #2
 800a436:	73fb      	strb	r3, [r7, #15]
    break;
 800a438:	bf00      	nop
  }
  return usb_status;
 800a43a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3714      	adds	r7, #20
 800a440:	46bd      	mov	sp, r7
 800a442:	bc80      	pop	{r7}
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop

0800a448 <__libc_init_array>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	2500      	movs	r5, #0
 800a44c:	4e0c      	ldr	r6, [pc, #48]	; (800a480 <__libc_init_array+0x38>)
 800a44e:	4c0d      	ldr	r4, [pc, #52]	; (800a484 <__libc_init_array+0x3c>)
 800a450:	1ba4      	subs	r4, r4, r6
 800a452:	10a4      	asrs	r4, r4, #2
 800a454:	42a5      	cmp	r5, r4
 800a456:	d109      	bne.n	800a46c <__libc_init_array+0x24>
 800a458:	f000 f82e 	bl	800a4b8 <_init>
 800a45c:	2500      	movs	r5, #0
 800a45e:	4e0a      	ldr	r6, [pc, #40]	; (800a488 <__libc_init_array+0x40>)
 800a460:	4c0a      	ldr	r4, [pc, #40]	; (800a48c <__libc_init_array+0x44>)
 800a462:	1ba4      	subs	r4, r4, r6
 800a464:	10a4      	asrs	r4, r4, #2
 800a466:	42a5      	cmp	r5, r4
 800a468:	d105      	bne.n	800a476 <__libc_init_array+0x2e>
 800a46a:	bd70      	pop	{r4, r5, r6, pc}
 800a46c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a470:	4798      	blx	r3
 800a472:	3501      	adds	r5, #1
 800a474:	e7ee      	b.n	800a454 <__libc_init_array+0xc>
 800a476:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a47a:	4798      	blx	r3
 800a47c:	3501      	adds	r5, #1
 800a47e:	e7f2      	b.n	800a466 <__libc_init_array+0x1e>
 800a480:	0800a53c 	.word	0x0800a53c
 800a484:	0800a53c 	.word	0x0800a53c
 800a488:	0800a53c 	.word	0x0800a53c
 800a48c:	0800a540 	.word	0x0800a540

0800a490 <memcpy>:
 800a490:	b510      	push	{r4, lr}
 800a492:	1e43      	subs	r3, r0, #1
 800a494:	440a      	add	r2, r1
 800a496:	4291      	cmp	r1, r2
 800a498:	d100      	bne.n	800a49c <memcpy+0xc>
 800a49a:	bd10      	pop	{r4, pc}
 800a49c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4a4:	e7f7      	b.n	800a496 <memcpy+0x6>

0800a4a6 <memset>:
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	4402      	add	r2, r0
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d100      	bne.n	800a4b0 <memset+0xa>
 800a4ae:	4770      	bx	lr
 800a4b0:	f803 1b01 	strb.w	r1, [r3], #1
 800a4b4:	e7f9      	b.n	800a4aa <memset+0x4>
	...

0800a4b8 <_init>:
 800a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ba:	bf00      	nop
 800a4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4be:	bc08      	pop	{r3}
 800a4c0:	469e      	mov	lr, r3
 800a4c2:	4770      	bx	lr

0800a4c4 <_fini>:
 800a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c6:	bf00      	nop
 800a4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ca:	bc08      	pop	{r3}
 800a4cc:	469e      	mov	lr, r3
 800a4ce:	4770      	bx	lr
